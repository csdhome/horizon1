{
  "slots": {
    "0": {
      "name": "slot1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "slot2",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "slot3",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "slot4",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "10": {
      "name": "slot11",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "11": {
      "name": "slot12",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "12": {
      "name": "slot13",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "13": {
      "name": "slot14",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "14": {
      "name": "slot15",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "15": {
      "name": "slot16",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "16": {
      "name": "slot17",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "17": {
      "name": "slot18",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "18": {
      "name": "slot19",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "19": {
      "name": "slot20",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "20": {
      "name": "slot21",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "--@class SimpleSlotDetector\r\ncore = nil\r\nantigrav = nil\r\nwarpDrive = nil\r\nradarUnit = nil\r\nflightModeDb = nil\r\nmanualSwitches = {}\r\nforceFields = {}\r\nscreen = nil\r\n\r\nfunction getElements()\r\n  for k,var in pairs(_G) do\r\n    if type(var) == \"table\" and var[\"getClass\"] then\r\n      local class = var[\"getClass\"]()\r\n    --   system.print(class)\r\n      if class == \"CoreUnitDynamic\" or class == \"CoreUnitStatic\" or class == \"CoreUnitSpace\" then\r\n        core = var\r\n      end\r\n\r\n      if class == \"AtmoFuelContainer\" or class == \"SpaceFuelContainer\" then\r\n        var.showWidget()\r\n      end\r\n\r\n      if class == \"WarpDriveUnit\" then\r\n        warpDrive = var\r\n        var.showWidget()\r\n      end\r\n\r\n      if class == \"RadarPvPAtmospheric\" or class == \"RadarPVPSpaceSmallGroup\" then\r\n        radarUnit = var\r\n        var.showWidget()\r\n      end\r\n\r\n      if class == \"DataBankUnit\" then\r\n        flightModeDb = var\r\n      end\r\n\r\n      if class == \"AntiGravityGeneratorUnit\" then\r\n        antigrav = var\r\n      end\r\n      if class == \"ManualSwitchUnit\" then\r\n        --manualSwitch = var\r\n        table.insert(manualSwitches, var)\r\n      end\r\n      if class == \"ForceFieldUnit\" then\r\n        table.insert(forceFields, var)\r\n      end\r\n      if class == \"ScreenUnit\" then\r\n        screen = var\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\ngetElements()\r\n",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "--@class ExportedVariables\r\n\r\ngoButtonSpeed = 1050 --export: GO Button Speed\r\ninertialDampening = false --export: Start with inertial dampening on/off\r\nfollowGravity = true --export: Start with gravity follow on/off\r\ncounterGravity = false --export: Start with gravity follow on/off\r\nrotationMin = 0.2 --export: Auto-scaling rotation speed starting point\r\nrotationMax = 5 --export: Auto-scaling rotaiton max speed\r\nrotationStep = 0.1 --export: Controls how quickly the rotation speed scales up\r\nshowDockingWidget = true --export: Show Docking Widget\r\ndockingMode = 3 --export: Set docking mode (1:Manual, 2:Automatic, 3:Semi-Automatic)\r\nvtolShip = true --export:\r\n\r\ndisplaySize = 0.65\r\n--primaryColor = \"0faea9\" --export: Primary color of HUD\r\n--secondaryColor = \"0247b5\" --export: Secondary color of HUD\r\n--textShadow = \"d9ff00\" --export: Color of text shadow for speedometer\r\nprimaryColor = \"b80000\" --export: Primary color of HUD\r\nsecondaryColor = \"e30000\" --export: Secondary color of HUD\r\ntextShadow = \"e81313\" --export: Color of text shadow for speedometer\r\n\r\nContainerOptimization = 5 --export: Container ContainerOptimization\r\nFuelTankOptimization = 5 --export: Fuel Tank FuelTankOptimization\r\nfuelTankHandlingAtmo = 5 --export: Fuel Tank Handling Atmo\r\nfuelTankHandlingSpace = 5 --export: Fuel Tank Handling Space\r\n\r\nap_stop_distance = 200000 --export: AP Stop distance\r\n\r\nactivateFFonStart = false\r\nsetactivateFFonStart = false --export: Activate force fields on start (connected to button)\r\npocket = false\r\nsetpocket = false --export: Pocket ship?\r\n\r\nbool_to_number={ [true]=1, [false]=0 }\r\nnumber_to_bool={ [1]=true, [0]=false }\r\n  \r\nif flightModeDb.hasKey(\"activateFFonStart\") == 0 or updateSettings then \r\n    flightModeDb.setIntValue(\"activateFFonStart\", bool_to_number[setactivateFFonStart])\r\n    activateFFonStart = setactivateFFonStart\r\nelse activateFFonStart = number_to_bool[flightModeDb.getIntValue(\"activateFFonStart\")] end\r\n\r\n\r\n\r\nif flightModeDb.hasKey(\"pocket\") == 0 or updateSettings then \r\n    flightModeDb.setIntValue(\"pocket\", bool_to_number[setpocket])\r\n    pocket = setpocket\r\nelse pocket = number_to_bool[flightModeDb.getIntValue(\"pocket\")] end\r\n",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "--@class PlanetRef\r\nfunction PlanetRef()\r\n    local function isNumber(n)  return type(n)           == 'number' end\r\n    local function isSNumber(n) return type(tonumber(n)) == 'number' end\r\n    local function isTable(t)   return type(t)           == 'table'  end\r\n    local function isString(s)  return type(s)           == 'string' end\r\n    local function isVector(v)  return isTable(v)\r\n                                        and isNumber(v.x and v.y and v.z) end\r\n\r\n    local function isMapPosition(m) return isTable(m) and isNumber(m.latitude  and\r\n                                                                m.longitude and\r\n                                                                m.altitude  and\r\n                                                                m.bodyId    and\r\n                                                                m.systemId) end\r\n\r\n    -- Constants\r\n\r\n    local deg2rad    = math.pi/180\r\n    local rad2deg    = 180/math.pi\r\n    local epsilon    = 1e-10\r\n    local num        = ' *([+-]?%d+%.?%d*e?[+-]?%d*)'\r\n    local posPattern = '::pos{' .. num .. ',' .. num .. ',' ..  num .. ',' ..\r\n                    num ..  ',' .. num .. '}'\r\n\r\n    -- Utilities\r\n\r\n    local utils  = require('cpml.utils')\r\n    local vec3   = require('cpml.vec3')\r\n    local clamp  = utils.clamp\r\n\r\n    local function float_eq(a,b)\r\n        if a == 0 then return math.abs(b) < 1e-09 end\r\n        if b == 0 then return math.abs(a) < 1e-09 end\r\n        return math.abs(a - b) < math.max(math.abs(a),math.abs(b))*epsilon\r\n    end\r\n\r\n    local function formatNumber(n)\r\n        local result = string.gsub(\r\n                        string.reverse(string.format('%.4f',n)),\r\n                        '^0*%.?','')\r\n        return result == '' and '0' or string.reverse(result)\r\n    end\r\n\r\n    local function formatValue(obj)\r\n        if isVector(obj) then\r\n            return string.format('{x=%.3f,y=%.3f,z=%.3f}', obj.x, obj.y, obj.z)\r\n        end\r\n\r\n        if isTable(obj) and not getmetatable(obj) then\r\n            local list = {}\r\n            local nxt  = next(obj)\r\n\r\n            if type(nxt) == 'nil' or nxt == 1 then -- assume this is an array\r\n                for i,a in ipairs(obj) do\r\n                    list[i] = formatValue(a)\r\n                end\r\n            else\r\n                for k,v in pairs(obj) do\r\n                    local value = formatValue(v)\r\n                    if type(k) == 'number' then\r\n                        table.insert(list, string.format('[%s]=%s', k, value))\r\n                    else\r\n                        table.insert(list, string.format('%s=%s',   k, value))\r\n                    end\r\n                end\r\n            end\r\n            return string.format('{%s}', table.concat(list, ','))\r\n        end\r\n\r\n        if isString(obj) then\r\n            return string.format(\"[[%s]]\", obj)\r\n        end\r\n        return tostring(obj)\r\n    end\r\n\r\n    -- CLASSES\r\n\r\n    -- BodyParameters: Attributes of planetary bodies (planets and moons)\r\n\r\n    local BodyParameters = {}\r\n    BodyParameters.__index = BodyParameters\r\n    BodyParameters.__tostring =\r\n        function(obj, indent)\r\n            local keys = {}\r\n            for k in pairs(obj) do table.insert(keys, k) end\r\n            table.sort(keys)\r\n            local list = {}\r\n            for _, k in ipairs(keys) do\r\n                local value = formatValue(obj[k])\r\n                if type(k) == 'number' then\r\n                    table.insert(list, string.format('[%s]=%s', k, value))\r\n                else\r\n                    table.insert(list, string.format('%s=%s', k, value))\r\n                end\r\n            end\r\n            if indent then\r\n                return string.format('%s%s',\r\n                                    indent,\r\n                                    table.concat(list, ',\\n' .. indent))\r\n            end\r\n            return string.format('{%s}', table.concat(list, ','))\r\n        end\r\n    BodyParameters.__eq = function(lhs, rhs)\r\n            return lhs.planetarySystemId == rhs.planetarySystemId and\r\n                lhs.bodyId            == rhs.bodyId            and\r\n                float_eq(lhs.radius, rhs.radius)               and\r\n                float_eq(lhs.center.x, rhs.center.x)           and\r\n                float_eq(lhs.center.y, rhs.center.y)           and\r\n                float_eq(lhs.center.z, rhs.center.z)           and\r\n                float_eq(lhs.GM, rhs.GM)\r\n        end\r\n\r\n    local function mkBodyParameters(systemId, bodyId, radius, worldCoordinates, GM)\r\n        -- 'worldCoordinates' can be either table or vec3\r\n        assert(isSNumber(systemId),\r\n            'Argument 1 (planetarySystemId) must be a number:' .. type(systemId))\r\n        assert(isSNumber(bodyId),\r\n            'Argument 2 (bodyId) must be a number:' .. type(bodyId))\r\n        assert(isSNumber(radius),\r\n            'Argument 3 (radius) must be a number:' .. type(radius))\r\n        assert(isTable(worldCoordinates),\r\n            'Argument 4 (worldCoordinates) must be a array or vec3.' ..\r\n            type(worldCoordinates))\r\n        assert(isSNumber(GM),\r\n            'Argument 5 (GM) must be a number:' .. type(GM))\r\n        return setmetatable({planetarySystemId = tonumber(systemId),\r\n                            bodyId            = tonumber(bodyId),\r\n                            radius            = tonumber(radius),\r\n                            center            = vec3(worldCoordinates),\r\n                            GM                = tonumber(GM) }, BodyParameters)\r\n    end\r\n\r\n    -- MapPosition: Geographical coordinates of a point on a planetary body.\r\n\r\n    local MapPosition = {}\r\n    MapPosition.__index = MapPosition\r\n    MapPosition.__tostring = function(p)\r\n            return string.format('::pos{%d,%d,%s,%s,%s}',\r\n                                p.systemId,\r\n                                p.bodyId,\r\n                                formatNumber(p.latitude*rad2deg),\r\n                                formatNumber(p.longitude*rad2deg),\r\n                                formatNumber(p.altitude))\r\n        end\r\n    MapPosition.__eq       = function(lhs, rhs)\r\n            return lhs.bodyId   == rhs.bodyId              and\r\n                lhs.systemId == rhs.systemId            and\r\n                float_eq(lhs.latitude,   rhs.latitude)  and\r\n                float_eq(lhs.altitude,   rhs.altitude)  and\r\n                (float_eq(lhs.longitude, rhs.longitude) or\r\n                    float_eq(lhs.latitude, math.pi/2)      or\r\n                    float_eq(lhs.latitude, -math.pi/2))\r\n        end\r\n\r\n    -- latitude and longitude are in degrees while altitude is in meters\r\n\r\n    local function mkMapPosition(overload, bodyId, latitude, longitude, altitude)\r\n        local systemId = overload -- Id or '::pos{...}' string\r\n\r\n        if isString(overload) and not longitude and not altitude and\r\n                                not bodyId    and not latitude then\r\n            systemId, bodyId, latitude, longitude, altitude =\r\n                                                string.match(overload, posPattern)\r\n            assert(systemId, 'Argument 1 (position string) is malformed.')\r\n        else\r\n            assert(isSNumber(systemId),\r\n                'Argument 1 (systemId) must be a number:' .. type(systemId))\r\n            assert(isSNumber(bodyId),\r\n                'Argument 2 (bodyId) must be a number:' .. type(bodyId))\r\n            assert(isSNumber(latitude),\r\n                'Argument 3 (latitude) must be in degrees:' .. type(latitude))\r\n            assert(isSNumber(longitude),\r\n                'Argument 4 (longitude) must be in degrees:' .. type(longitude))\r\n            assert(isSNumber(altitude),\r\n                'Argument 5 (altitude) must be in meters:' .. type(altitude))\r\n        end\r\n        systemId  = tonumber(systemId)\r\n        bodyId    = tonumber(bodyId)\r\n        latitude  = tonumber(latitude)\r\n        longitude = tonumber(longitude)\r\n        altitude  = tonumber(altitude)\r\n\r\n        if bodyId == 0 then -- this is a hack to represent points in space\r\n            return setmetatable({latitude  = latitude,\r\n                                longitude = longitude,\r\n                                altitude  = altitude,\r\n                                bodyId    = bodyId,\r\n                                systemId  = systemId}, MapPosition)\r\n        end\r\n        return setmetatable({latitude  = deg2rad*clamp(latitude, -90, 90),\r\n                            longitude = deg2rad*(longitude % 360),\r\n                            altitude  = altitude,\r\n                            bodyId    = bodyId,\r\n                            systemId  = systemId}, MapPosition)\r\n    end\r\n\r\n    -- PlanetarySystem - map body IDs to BodyParameters\r\n\r\n    local PlanetarySystem = {}\r\n    PlanetarySystem.__index = PlanetarySystem\r\n\r\n    PlanetarySystem.__tostring =\r\n        function (obj, indent)\r\n            local sep = indent and (indent .. '  ' )\r\n            local bdylist = {}\r\n            local keys = {}\r\n            for k in pairs(obj) do table.insert(keys, k) end\r\n            table.sort(keys)\r\n            for _, bi in ipairs(keys) do\r\n                bdy = obj[bi]\r\n                local bdys = BodyParameters.__tostring(bdy, sep)\r\n                if indent then\r\n                    table.insert(bdylist,\r\n                                string.format('[%s]={\\n%s\\n%s}',\r\n                                            bi, bdys, indent))\r\n                else\r\n                    table.insert(bdylist, string.format('  [%s]=%s', bi, bdys))\r\n                end\r\n            end\r\n            if indent then\r\n                return string.format('\\n%s%s%s',\r\n                                    indent,\r\n                                    table.concat(bdylist, ',\\n' .. indent),\r\n                                    indent)\r\n            end\r\n            return string.format('{\\n%s\\n}', table.concat(bdylist, ',\\n'))\r\n        end\r\n\r\n    local function mkPlanetarySystem(systemReferenceTable)\r\n        local atlas = {}\r\n        local pid\r\n        for _, v in pairs(systemReferenceTable) do\r\n            local id = v.planetarySystemId\r\n\r\n            if id == nil then\r\n                id = 0\r\n                v.planetarySystemId = id\r\n            end\r\n\r\n            if type(id) ~= 'number' then\r\n                error('Invalid planetary system ID: ' .. tostring(id))\r\n            elseif pid and id ~= pid then\r\n                error('Mismatch planetary system IDs: ' .. id .. ' and '\r\n                    .. pid)\r\n            end\r\n            local bid = v.bodyId\r\n\r\n            if bid == nil then\r\n                bid      = v.id\r\n                v.bodyId = bid\r\n            end\r\n            if type(bid) ~= 'number' then\r\n                error('Invalid body ID: ' .. tostring(bid))\r\n            elseif atlas[bid] then\r\n                error('Duplicate body ID: ' .. tostring(bid))\r\n            end\r\n            v.center = vec3(v.center)\r\n            atlas[bid] = setmetatable(v, BodyParameters)\r\n            pid = id\r\n        end\r\n        return setmetatable(atlas, PlanetarySystem)\r\n    end\r\n\r\n    -- PlanetaryReference - map planetary system ID to PlanetarySystem\r\n\r\n    PlanetaryReference = {}\r\n\r\n    local function mkPlanetaryReference(referenceTable)\r\n        return setmetatable({ galaxyAtlas = referenceTable or {} },\r\n                            PlanetaryReference)\r\n    end\r\n\r\n    PlanetaryReference.__index        = \r\n        function(t,i)\r\n            if type(i) == 'number' then\r\n                local system = t.galaxyAtlas[i]\r\n                return mkPlanetarySystem(system)\r\n            end\r\n            return rawget(PlanetaryReference, i)\r\n        end\r\n    PlanetaryReference.__pairs        =\r\n        function(obj)\r\n            return  function(t, k)\r\n                        local nk, nv = next(t, k)\r\n                        return nk, nv and mkPlanetarySystem(nv)\r\n                    end, obj.galaxyAtlas, nil\r\n        end\r\n    PlanetaryReference.__tostring     =\r\n        function (obj)\r\n            local pslist = {}\r\n            for _,ps in pairs(obj or {}) do\r\n                local psi = ps:getPlanetarySystemId()\r\n                local pss = PlanetarySystem.__tostring(ps, '    ')\r\n                table.insert(pslist,\r\n                            string.format('  [%s]={%s\\n  }', psi, pss))\r\n            end\r\n            return string.format('{\\n%s\\n}\\n', table.concat(pslist,',\\n'))\r\n        end\r\n    PlanetaryReference.BodyParameters = mkBodyParameters\r\n    PlanetaryReference.MapPosition    = mkMapPosition\r\n    PlanetaryReference.PlanetarySystem = mkPlanetarySystem\r\n\r\n    function PlanetaryReference.createBodyParameters(planetarySystemId,\r\n                                                    bodyId,\r\n                                                    surfaceArea,\r\n                                                    aPosition,\r\n                                                    verticalAtPosition,\r\n                                                    altitudeAtPosition,\r\n                                                    gravityAtPosition)\r\n        assert(isSNumber(planetarySystemId),\r\n            'Argument 1 (planetarySystemId) must be a number:' ..\r\n            type(planetarySystemId))\r\n        assert(isSNumber(bodyId),\r\n            'Argument 2 (bodyId) must be a number:' .. type(bodyId))\r\n        assert(isSNumber(surfaceArea),\r\n            'Argument 3 (surfaceArea) must be a number:' .. type(surfaceArea))\r\n        assert(isTable(aPosition),\r\n            'Argument 4 (aPosition) must be an array or vec3:' ..\r\n            type(aPosition))\r\n        assert(isTable(verticalAtPosition),\r\n            'Argument 5 (verticalAtPosition) must be an array or vec3:' ..\r\n            type(verticalAtPosition))\r\n        assert(isSNumber(altitudeAtPosition),\r\n            'Argument 6 (altitude) must be in meters:' ..\r\n            type(altitudeAtPosition))\r\n        assert(isSNumber(gravityAtPosition),\r\n            'Argument 7 (gravityAtPosition) must be number:' ..\r\n            type(gravityAtPosition))\r\n        local radius   = math.sqrt(surfaceArea/4/math.pi)\r\n        local distance = radius + altitudeAtPosition\r\n        local center   = vec3(aPosition) + distance*vec3(verticalAtPosition)\r\n        local GM       = gravityAtPosition * distance * distance\r\n        return mkBodyParameters(planetarySystemId, bodyId, radius, center, GM)\r\n    end\r\n    PlanetaryReference.isMapPosition  = isMapPosition\r\n    function PlanetaryReference:getPlanetarySystem(overload)\r\n        if self.galaxyAtlas then\r\n            local planetarySystemId = overload\r\n\r\n            if isMapPosition(overload) then\r\n                planetarySystemId = overload.systemId\r\n            end\r\n\r\n            if type(planetarySystemId) == 'number' then\r\n                local system = self.galaxyAtlas[planetarySystemId]\r\n                if system then\r\n                    if getmetatable(system) ~= PlanetarySystem then\r\n                        system = mkPlanetarySystem(system)\r\n                    end\r\n                    return system\r\n                end\r\n            end\r\n        end\r\n        return nil\r\n    end\r\n\r\n    function PlanetarySystem:castIntersections(origin,\r\n                                            direction,\r\n                                            sizeCalculator,\r\n                                            bodyIds)\r\n        local sizeCalculator = sizeCalculator or \r\n                                function (body) return 1.05*body.radius end\r\n        local candidates = {}\r\n\r\n        if bodyIds then\r\n            for _,i in ipairs(bodyIds) do candidates[i] = self[i] end\r\n        else\r\n            bodyIds = {}\r\n            for k,body in pairs(self) do\r\n                table.insert(bodyIds, k)\r\n                candidates[k] = body\r\n            end\r\n        end\r\n        local function compare(b1,b2)\r\n            local v1 = candidates[b1].center - origin\r\n            local v2 = candidates[b2].center - origin\r\n            return v1:len() < v2:len()\r\n        end\r\n        table.sort(bodyIds, compare)\r\n        local dir = direction:normalize()\r\n\r\n        for i, id in ipairs(bodyIds) do\r\n            local body   = candidates[id]\r\n            local c_oV3  = body.center - origin\r\n            local radius = sizeCalculator(body)\r\n            local dot    = c_oV3:dot(dir)\r\n            local desc   = dot^2 - (c_oV3:len2() - radius^2)\r\n\r\n            if desc >= 0 then\r\n                local root     = math.sqrt(desc)\r\n                local farSide  = dot + root\r\n                local nearSide = dot - root\r\n                if nearSide > 0 then\r\n                    return body, farSide, nearSide\r\n                elseif farSide > 0 then\r\n                    return body, farSide, nil\r\n                end\r\n            end\r\n        end\r\n        return nil, nil, nil\r\n    end\r\n\r\n    function PlanetarySystem:closestBody(coordinates)\r\n        assert(type(coordinates) == 'table', 'Invalid coordinates.')\r\n        local minDistance2, body\r\n        local coord = vec3(coordinates)\r\n\r\n        for _,params in pairs(self) do\r\n            local distance2 = (params.center - coord):len2()\r\n            if not body or distance2 < minDistance2 then\r\n                body         = params\r\n                minDistance2 = distance2\r\n            end\r\n        end\r\n        return body\r\n    end\r\n\r\n    function PlanetarySystem:convertToBodyIdAndWorldCoordinates(overload)\r\n        local mapPosition = overload\r\n        if isString(overload) then\r\n            mapPosition = mkMapPosition(overload)\r\n        end\r\n\r\n        if mapPosition.bodyId == 0 then\r\n            return 0, vec3(mapPosition.latitude,\r\n                        mapPosition.longitude,\r\n                        mapPosition.altitude)\r\n        end\r\n        local params = self:getBodyParameters(mapPosition)\r\n\r\n        if params then\r\n            return mapPosition.bodyId,\r\n                params:convertToWorldCoordinates(mapPosition)\r\n        end\r\n    end\r\n\r\n    function PlanetarySystem:getBodyParameters(overload)\r\n        local bodyId = overload\r\n\r\n        if isMapPosition(overload) then\r\n            bodyId = overload.bodyId\r\n        end\r\n        assert(isSNumber(bodyId),\r\n                'Argument 1 (bodyId) must be a number:' .. type(bodyId))\r\n\r\n        return self[bodyId]\r\n    end\r\n\r\n    function PlanetarySystem:getPlanetarySystemId()\r\n        local k, v = next(self)\r\n        return v and v.planetarySystemId\r\n    end\r\n\r\n    function PlanetarySystem:netGravity(coordinates)\r\n        assert(type(coordinates) == 'table', 'Invalid coordinates.')\r\n        local netGravity   = vec3()\r\n        local coord        = vec3(coordinates)\r\n        local maxG, body\r\n\r\n        for _,params in pairs(self) do\r\n            local radial   = params.center - coord\r\n            local len2     = radial:len2()\r\n            local g        = params.GM/len2\r\n            if not body or g > maxG then\r\n                body       = params\r\n                maxG       = g\r\n            end\r\n            netGravity = netGravity + g/math.sqrt(len2)*radial\r\n        end\r\n        return body, netGravity\r\n    end\r\n\r\n    function BodyParameters:convertToMapPosition(worldCoordinates)\r\n        assert(isTable(worldCoordinates),\r\n            'Argument 1 (worldCoordinates) must be an array or vec3:' ..\r\n            type(worldCoordinates))\r\n        local worldVec  = vec3(worldCoordinates) \r\n\r\n        if self.bodyId == 0 then\r\n            return setmetatable({latitude  = worldVec.x,\r\n                                longitude = worldVec.y,\r\n                                altitude  = worldVec.z,\r\n                                bodyId    = 0,\r\n                                systemId  = self.planetarySystemId}, MapPosition)\r\n        end\r\n        local coords    = worldVec - self.center\r\n        local distance  = coords:len()\r\n        local altitude  = distance - self.radius\r\n        local latitude  = 0\r\n        local longitude = 0\r\n\r\n        if not float_eq(distance, 0) then\r\n            local phi = math.atan(coords.y, coords.x)\r\n            longitude = phi >= 0 and phi or (2*math.pi + phi)\r\n            latitude  = math.pi/2 - math.acos(coords.z/distance)\r\n        end\r\n        return setmetatable({latitude  = latitude,\r\n                            longitude = longitude,\r\n                            altitude  = altitude,\r\n                            bodyId    = self.bodyId,\r\n                            systemId  = self.planetarySystemId}, MapPosition)\r\n    end\r\n\r\n    function BodyParameters:convertToWorldCoordinates(overload)\r\n        local mapPosition = isString(overload) and\r\n                                            mkMapPosition(overload) or overload\r\n        if mapPosition.bodyId == 0 then -- support deep space map position\r\n            return vec3(mapPosition.latitude,\r\n                        mapPosition.longitude,\r\n                        mapPosition.altitude)\r\n        end\r\n        assert(isMapPosition(mapPosition),\r\n            'Argument 1 (mapPosition) is not an instance of \"MapPosition\".')\r\n        assert(mapPosition.systemId == self.planetarySystemId,\r\n            'Argument 1 (mapPosition) has a different planetary system ID.')\r\n        assert(mapPosition.bodyId == self.bodyId,\r\n            'Argument 1 (mapPosition) has a different planetary body ID.')\r\n        local xproj = math.cos(mapPosition.latitude)\r\n        return self.center + (self.radius + mapPosition.altitude) *\r\n            vec3(xproj*math.cos(mapPosition.longitude),\r\n                    xproj*math.sin(mapPosition.longitude),\r\n                    math.sin(mapPosition.latitude))\r\n    end\r\n\r\n    function BodyParameters:getAltitude(worldCoordinates)\r\n        return (vec3(worldCoordinates) - self.center):len() - self.radius\r\n    end\r\n\r\n    function BodyParameters:getDistance(worldCoordinates)\r\n        return (vec3(worldCoordinates) - self.center):len()\r\n    end\r\n\r\n    function BodyParameters:getGravity(worldCoordinates)\r\n        local radial = self.center - vec3(worldCoordinates) -- directed towards body\r\n        local len2   = radial:len2()\r\n        return (self.GM/len2) * radial/math.sqrt(len2)\r\n    end\r\n\r\n    return setmetatable(PlanetaryReference,\r\n                        { __call = function(_,...)\r\n                                        return mkPlanetaryReference(...)\r\n                                end })\r\nend\r\n",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "2"
    },
    {
      "code": "--@class Kinematics\r\nfunction Kinematics()\r\n    local Kinematic = {} -- just a namespace\r\n\r\nlocal ITERATIONS = 100 -- iterations over engine \"warm-up\" period\r\n\r\n--\r\n-- computeAccelerationTime - solve vf = vi + a*t for t\r\n-- initial      [in]: initial (positive) speed in meters per second.\r\n-- acceleration [in]: constant acceleration until 'finalSpeed' is reached.\r\n-- final        [in]: the speed at the end of the time interval.\r\n-- return: the time in seconds to reach the \"final\" velocity\r\n--\r\nfunction Kinematic.computeAccelerationTime(initial, acceleration, final)\r\n    -- ans: t = (vf - vi)/a\r\n    return (final - initial)/acceleration\r\nend\r\n\r\n--\r\n-- computeDistanceAndTime - Return distance & time needed to reach final speed.\r\n-- initial[in]:     Initial speed in meters per second.\r\n-- final[in]:       Final speed in meters per second.\r\n-- mass[in]:        Mass of the construct in Kg.\r\n-- thrust[in]:      Engine's maximum thrust in Newtons.\r\n-- t50[in]:         (default: 0) Time interval to reach 50% thrust in seconds.\r\n-- brakeThrust[in]: (default: 0) Constant thrust term when braking.\r\n-- return: Distance (in meters), time (in seconds) required for change.\r\n--\r\nfunction Kinematic.computeDistanceAndTime(initial,\r\n                                          final,\r\n                                          mass,\r\n                                          thrust,\r\n                                          t50,\r\n                                          brakeThrust)\r\n    -- This function assumes that the applied thrust is colinear with the\r\n    -- velocity. Furthermore, it does not take into account the influence\r\n    -- of gravity, not just in terms of its impact on velocity, but also\r\n    -- its impact on the orientation of thrust relative to velocity.\r\n    -- These factors will introduce (usually) small errors which grow as\r\n    -- the length of the trip increases.\r\n    t50            = t50 or 0\r\n    brakeThrust    = brakeThrust or 0 -- usually zero when accelerating\r\n\r\n    local speedUp  = initial < final\r\n    local a0       = thrust / (speedUp and mass or -mass)\r\n    local b0       = -brakeThrust/mass\r\n    local totA     = a0+b0\r\n\r\n    if initial == final then\r\n        return 0, 0   -- trivial\r\n    elseif speedUp and totA <= 0 or not speedUp and totA >= 0 then\r\n        return -1, -1 -- no solution\r\n    end\r\n\r\n    local distanceToMax, timeToMax = 0, 0\r\n\r\n    -- If, the T50 time is set, then assume engine is at zero thrust and will\r\n    -- reach full thrust in 2*T50 seconds. Thrust curve is given by:\r\n    -- Thrust: F(z)=(m*a0*(1+sin(z))+2*m*b0)/2 where z=pi*(t/t50 - 1)/2\r\n    -- Acceleration is given by F(z)/m\r\n    -- or v(z)' = (a0*(1+sin(z))+2*b0)/2\r\n\r\n    if a0 ~= 0 and t50 > 0 then\r\n        -- Closed form solution for velocity exists (t <= 2*t50):\r\n        -- v(t) = a0*(t/2 - t50*sin(pi*(t/2)/t50)/pi)+b0*t)+c\r\n        -- @ t=0, v(0) = vi => c=vi\r\n\r\n        local c1  = math.pi/t50/2\r\n\r\n        local v = function(t)\r\n            return a0*(t/2 - t50*math.sin(c1*t)/math.pi) + b0*t + initial\r\n        end\r\n\r\n        local speedchk = speedUp and function(s) return s >= final end or\r\n                                     function(s) return s <= final end\r\n        timeToMax  = 2*t50\r\n\r\n        if speedchk(v(timeToMax)) then\r\n            local lasttime = 0\r\n\r\n            while math.abs(timeToMax - lasttime) > 0.25 do\r\n                local t = (timeToMax + lasttime)/2\r\n                if speedchk(v(t)) then\r\n                    timeToMax = t \r\n                else\r\n                    lasttime = t\r\n                end\r\n            end\r\n        end\r\n\r\n        -- Closed form solution for distance exists (t <= 2*t50):\r\n        local K       = 2*a0*t50^2/math.pi^2\r\n        distanceToMax = K*(math.cos(c1*timeToMax) - 1) +\r\n                        (a0+2*b0)*timeToMax^2/4 + initial*timeToMax\r\n\r\n        if timeToMax < 2*t50 then\r\n            return distanceToMax, timeToMax\r\n        end\r\n        initial = v(timeToMax)\r\n    end\r\n    -- At full thrust, motion follows Newton's formula:\r\n    local a = a0+b0\r\n    local t = Kinematic.computeAccelerationTime(initial, a, final)\r\n    local d = initial*t + a*t*t/2\r\n    return distanceToMax+d, timeToMax+t\r\nend\r\n\r\n--\r\n-- computeTravelTime - solve d=vi*t+a*t**2/2 for t\r\n-- initialSpeed [in]: initial (positive) speed in meters per second\r\n-- acceleration [in]: constant acceleration until 'distance' is traversed\r\n-- distance [in]: the distance traveled in meters\r\n-- return: the time in seconds spent in traversing the distance\r\n--\r\nfunction Kinematic.computeTravelTime(initial, acceleration, distance)\r\n    -- quadratic equation: t=(sqrt(2ad+v^2)-v)/a\r\n    if distance == 0 then return 0 end\r\n\r\n    if acceleration ~= 0 then\r\n        return (math.sqrt(2*acceleration*distance+initial^2) - initial)/\r\n                    acceleration\r\n    end\r\n    assert(initial > 0, 'Acceleration and initial speed are both zero.')\r\n    return distance/initial\r\nend\r\n\r\nreturn Kinematic\r\n\r\n\r\nend",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "3"
    },
    {
      "code": "--@class EventDelegate\r\nfunction EventDelegate()local a={}a.Delegates={}function a.Add(b)if type(b)~=\"function\"then error(\"[EventDelegate] Unable to add callback - not a function\")return end;for c=1,#a.Delegates do if a.Delegates[c]==b then return false end end;table.insert(a.Delegates,b)return true end;function a.Remove(b)if type(b)~=\"function\"then error(\"[EventDelegate] Unable to remove callback - not a function\")return end;for c=1,#a.Delegates do if a.Delegates[c]==b then table.remove(a.Delegates,c)return true end end;return false end;function a.Call(...)for c=1,#a.Delegates do a.Delegates[c](...)end end;function a.Count()return#a.Delegates end;setmetatable(a,{__call=function(d,...)a.Call(...)end,__add=function(e,f)if e==a then a.Add(f)return a end;if f==a then a.Add(e)return a end;return a end,__sub=function(e,f)if e==a then a.Remove(f)return a end;if f==a then a.Remove(e)return a end;return a end,__tostring=function()return\"EventDelegate(#\"..#a.Delegates..\")\"end})return a end;Events={Update=EventDelegate(),Flush=EventDelegate()}",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "4"
    },
    {
      "code": "--@class TaskManager\r\n--[[\r\n    Shadow Templar Task Manager\r\n    Version 1.04\r\n    (c) Copyright 2019 Shadow Templar <http://www.shadowtemplar.org>\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n]]\r\nTaskManager = (function()\r\n    local self = {}\r\n    self.Stack = {}\r\n\r\n    function self.Register(task)\r\n        if not task.Coroutine then error(\"[TaskManager] Trying to register a non-Task\") end\r\n        table.insert(self.Stack, task)\r\n    end\r\n\r\n    function self.Update()\r\n        for i=1,#self.Stack do\r\n            local task = self.Stack[i]\r\n            if task and task.Coroutine ~= nil then\r\n                if coroutine.status(task.Coroutine) ~= \"dead\" then\r\n                    local state, retn = coroutine.resume(task.Coroutine)\r\n                    task.Error = not state\r\n                    task.LastReturn = retn\r\n                else\r\n                    table.remove(self.Stack, i)\r\n                    if task.Error and task._Catch then \r\n                        task._Catch(task.LastReturn)\r\n                    elseif task._Then ~= nil then \r\n                        task._Then(task.LastReturn)\r\n                    end\r\n                    if task._Finally ~= nil then task._Finally() end\r\n                    task.Finished = true\r\n                end\r\n            end\r\n        end\r\n    end\r\n    return self\r\nend)()\r\n\r\n\r\nfunction Task(func)\r\n    local self = {}\r\n    self.LastReturn = nil\r\n    self.Error = nil\r\n    self.Finished = false\r\n    if type(func) ~= \"function\" then error(\"[Task] Not a function.\") end\r\n    self.Coroutine = coroutine.create(func)\r\n\r\n    function self.Then(func)\r\n        if type(func) ~= \"function\" then error(\"[Task] Then callback not a function.\") end\r\n        self._Then = func\r\n        return self\r\n    end\r\n\r\n    function self.Finally(func)\r\n        if type(func) ~= \"function\" then error(\"[Task] Finally callback not a function.\") end\r\n        self._Finally = func\r\n        return self\r\n    end\r\n\r\n    function self.Catch(func)\r\n        if type(func) ~= \"function\" then error(\"[Task] Catch callback not a function.\") end\r\n        self._Catch = func\r\n        return self\r\n    end\r\n    TaskManager.Register(self)\r\n    return self\r\nend\r\n\r\nfunction await(task)\r\n    if not task or not task.Coroutine then error(\"Trying to await non-task object\") end\r\n    while not task.Finished do\r\n       coroutine.yield()\r\n    end\r\n    return task.LastReturn\r\nend\r\n\r\n",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "5"
    },
    {
      "code": "--@class DynamicDocument\r\nfunction DynamicDocument(a)local self={}self.template=a or\"\"local b=\"\"local c={}self.tree={}local d={br=true,hr=true,img=true,embed=true,param=true,area=true,col=true,input=true,meta=true,link=true,base=true,basefont=true,iframe=true,isindex=true,circle=true,polygon=true,polyline=true,ellipse=true,path=true,line=true,rect=true,use=true}function table.indexOf(val,table)for e,f in ipairs(table)do if f==val then return e end end;return nil end;function self.makeFunc(string)local val=\"nil\"if c[string]==nil then local g,h=pcall(load(\"return function() return \"..string..\" end\",nil,\"t\",_ENV))if g then c[string]=h;val=h()if type(val)==\"function\"then c[string]=h()val=val()end end else val=c[string]()end;return val end;local function i(a)local j=0;local k={}local l={}l.dd={}table.insert(k,l)local node={}for m,n,o,p,q,r,val,s in string.gmatch(a,\"(<)(%/?!?)([%w:_-'\\\\\\\"%[]+)(.-)(%/?%-?)>([%s\\r\\n\\t]*)([^<]*)([%s\\r\\n\\t]*)\")do o=string.lower(o)if n==\"/\"then if j==0 then return l end;j=j-1;table.remove(k)else local function t(u)local v=\"dd-\"return u:sub(1,#v)==v end;j=j+1;node={}node.name=o;node.children={}node.attr={}if k[j-1]then node.parent=k[j-1][#k[j-1]]else node.parent=nil end;if p~=\"\"then for w,f in string.gmatch(p,\"%s([^%s=]+)=\\\"([^\\\"]+)\\\"\")do node.attr[w]=string.gsub(f,'\"','[^\\\\]\\\\\"')if t(w)then if not l.dd[w]then l.dd[w]={}end;table.insert(l.dd[w],node)end end;for w,f in string.gmatch(p,\"%s([^%s=]+)='([^']+)'\")do node.attr[w]=string.gsub(f,'\"','[^\\\\]\\\\\"')if t(w)then if not l.dd[w]then l.dd[w]={}end;table.insert(l.dd[w],node)end end end;if not k[j]then k[j]={}end;table.insert(k[j],node)if d[o]then if val~=\"\"then table.insert(k[j],{name=\"textNode\",value=val})end;node.children={}j=j-1 else if val~=\"\"then table.insert(node.children,{name=\"textNode\",value=val})end;table.insert(k,node.children)end end end;return l end;local function x(y,z)local k={y}local A=\"\"local function B(C)local D=0;for E in pairs(C)do D=D+1 end;return D end;if not z and B(y.dd)>0 then if y.dd[\"dd-repeat\"]then for F=#y.dd[\"dd-repeat\"],1,-1 do local node=y.dd[\"dd-repeat\"][F]var,array=string.match(node.attr[\"dd-repeat\"],\"(.*) in (.*)\")node.attr[\"dd-repeat\"]=nil;local G=x({node},true)local H=string.gmatch(G,\"{{([^}}]+)}}\")local I={}for J in H do if string.match(J,var)then table.insert(I,J)end end;local b=\"\"local K=self.makeFunc(array)for F=1,#K do _ENV[var]=K[F]local L=G;local M=i(L:gsub(\"^%s*(.-)%s*$\",\"%1\"))b=b..x(M)end;node.children={}node.name=\"textNode\"node.value=b end end;if y.dd[\"dd-if\"]then for F=#y.dd[\"dd-if\"],1,-1 do local node=y.dd[\"dd-if\"][F]local N=self.makeFunc(node.attr[\"dd-if\"])if N then node.attr[\"dd-if\"]=nil else local O=table.indexOf(node,node.parent.children)if O then table.remove(node.parent.children,O)end;node=nil;table.remove(y.dd[\"dd-if\"],F)y.dd[\"dd-if\"][F]=nil end end end;if y.dd[\"dd-init\"]then for F=#y.dd[\"dd-init\"],1,-1 do local node=y.dd[\"dd-init\"][F]pcall(load(node.attr[\"dd-init\"],nil,\"t\",_ENV))node.attr[\"dd-init\"]=nil end end end;while#k~=0 do node=k[#k][1]if not node then break end;if node.name==\"textNode\"then local val=node.value:gsub(\"^%s*(.-)%s*$\",\"%1\")if not z then val=self.transformClosures(val)end;A=A..val else A=A..\"\\n\"..string.rep(\" \",#k-1)A=A..\"<\"..node.name;if node.attr then for P,f in pairs(node.attr)do if not z then P=self.transformClosures(P)f=self.transformClosures(f)end;A=A..\" \"..P..'=\"'..f..'\"'end end;if d[node.name]then A=A..\"/>\"else A=A..\">\"end end;if node.children and#node.children>0 then table.insert(k,node.children)else table.remove(k[#k],1)if node.children and#node.children==0 and not d[node.name]and not node.name==\"textNode\"then A=A..\"</\"..node.name..\">\"end;while#k>0 and#k[#k]==0 do table.remove(k)if#k>0 then if#k[#k][1].children>1 then A=A..\"\\n\"..string.rep(\" \",#k-1)..\"</\"..k[#k][1].name..\">\"else A=A..\"</\"..k[#k][1].name..\">\"end;table.remove(k[#k],1)end end end end;return A:match\"^%s*(.-)%s*$\"end;function self.transformClosures(Q)local R={}local S=string.gmatch(Q,\"{{([^}}]+)}}\")for F in S do table.insert(R,F)end;if#R>0 then for F=1,#R do local T=R[F]val=self.makeFunc(T)Q=string.gsub(Q,self.literalize(\"{{\"..T..\"}}\"),tostring(val))end end;return Q end;function self.literalize(u)return u:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\",function(J)return\"%\"..J end)end;function self.Read()return x(i(self.template))end;return self end",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "6"
    },
    {
      "code": "--@class DUTTY\r\nDUTTY={}local a={}local b={}local function c(d,e)return d:sub(e,e)end;local function f(d)local g={}local h=false;local i=''local j=false;for k=1,#d do local l=c(d,k)if j==false and h and l==h then table.insert(g,i)h=false;i=''elseif j==false and#i==0 and(not h and(l=='\"'or l==\"'\"))then h=l elseif j==false and l==' 'and h==false then if#i>0 then table.insert(g,i)i=''end elseif j==false and l=='\\\\'then j=true else if j then j=false end;i=i..l end end;if#i>0 then table.insert(g,i)end;return g end;function DUTTY.input(d)for k,m in pairs(a)do if'function'==type(m)then m(d)end end;local n=f(d)if#n>0 then local o=''local p={}for k,d in pairs(n)do if k==1 then o=d:lower()else table.insert(p,d)end end;if b[o]and'function'==type(b[o])then b[o](table.unpack(p))end end end;function DUTTY.onInput(m)if not'function'==type(m)then error('Event handler must be of type function')end;table.insert(a,m)end;function DUTTY.onCommand(g,m)if not'function'==type(m)then error('Event handler must be of type function')end;b[g:lower()]=m end",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "7"
    },
    {
      "code": "--@class CSS_SHUD\r\n\r\nCSS_SHUD = [[\r\n#horizon {\r\n  left: 0;\r\n  top: 0;\r\n  position: fixed;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: radial-gradient(ellipse 27vw 11vw at 50% 51vw, rgba(1,5,8,0.6) 50%,rgba(1,5,8,0) 90%);\r\n  font-family: Verdana;\r\n\r\n}\r\n#artificialHorizon\r\n{\r\n  position: absolute;\r\n  display: block;\r\n  left: 50%;\r\n  top: 50%;\r\n  height: 50vw;\r\n  width: 50vw;\r\n  transform: translate(-50%, -50%);\r\n  filter: drop-shadow(0px 3px 4px #000000);\r\n}\r\n\r\n#artificialHorizon > svg {\r\n  width: 100%;\r\n}\r\n\r\n#speedometer::before {\r\n  display: block;\r\n  position: absolute;\r\n  content: ' ';\r\n  top: 0.25vh;\r\n  bottom: -17vh;\r\n  left: 50%;\r\n  width: 31vw;\r\n  border: 10px solid #]]..primaryColor..[[;\r\n  border-bottom: 0;\r\n  border-right: 0;\r\n  border-left: 0;\r\n  border-radius: 100%;\r\n  transform: translateX(-50%);\r\n  background-color: transparent;\r\n  filter: blur(100vw);\r\n}\r\n\r\n#speedometerBar {\r\n  display: block;\r\n  position: fixed;\r\n  left: 50%;\r\n  top: 77.2vh;\r\n  width: 30vw;\r\n  height: 24.5vh;\r\n  transform: translate(-50%);\r\n  content: ' ';\r\n  border: 10px solid #]]..primaryColor..[[;\r\n  border-bottom: 0;\r\n  border-right: 0;\r\n  border-left: 0;\r\n  border-radius: 100%;\r\n  background-size: contain;\r\n  background-color: transparent;\r\n  filter: blur(0.1vw);\r\n}\r\n\r\n#speedometer {\r\n  font-family: 'Verdana';\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  position: fixed;\r\n  left: 50%;\r\n  bottom: 13vh;\r\n  font-size: 2vw;\r\n  transform: translate(-50%);\r\n  background-color: transparent;\r\n  width: 30vw;\r\n  height: 10vh;\r\n  text-align: center;\r\n}\r\n\r\n#speedometer .display {\r\n  position: absolute;\r\n  top: calc(50% + 1vh);\r\n  left: calc(50% + 0.25em);\r\n  transform: translate(-50%, -50%);\r\n  text-shadow: 0 0 0.75vw #]]..textShadow..[[;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 2.8vw;\r\n}\r\n\r\n#speedometer .display .minor, #speedometer .unit {\r\n  position: relative;\r\n  left: -0.5em;\r\n  vertical-align: super;\r\n  font-size: 40%;\r\n}\r\n\r\n#speedometer .unit {\r\n  vertical-align: 50%;\r\n  font-size: 23%;\r\n  left: -1.33em;\r\n}\r\n\r\n#speedometer .accel {\r\n  font-size: 1.2vw;\r\n  text-shadow: 0 0 0.15vw #000000;\r\n  position: absolute;\r\n  left: 12.5%;\r\n  bottom: 0;\r\n  opacity: 0.75;\r\n}\r\n\r\n#speedometer .accel .major::before {\r\n  content: 'Δ';\r\n  font-size: 40%;\r\n}\r\n\r\n#speedometer .accel .unit {\r\n  left: -0.66em;\r\n}\r\n\r\n#speedometer .alt {\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: -0.65vh;\r\n  transform: translateX(-50%);\r\n  font-size: 0.65vw;\r\n  text-align: center;\r\n}\r\n\r\n#speedometer .misc {\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: -1.5vh;\r\n  transform: translateX(-50%);\r\n  font-size: 0.4vw;\r\n  text-align: center;\r\n}\r\n\r\n#speedometer .throttle {\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: -4.3vh;\r\n  transform: translateX(-50%);\r\n  font-size: 0.7vw;\r\n  text-align: center;\r\n}\r\n\r\n#speedometer .vertical {\r\n  font-size: 1.3vw;\r\n  text-shadow: 0 0 0.15vw #000000;\r\n  position: absolute;\r\n  right: 12.5%;\r\n  bottom: 0;\r\n  opacity: 0.75;\r\n  text-align: right;\r\n}\r\n\r\n#speedometer .vertical::after {\r\n  content: '↕ m/s';\r\n  vertical-align: 50%;\r\n  font-size: 33%;\r\n}\r\n\r\n#speedometer::after {\r\n  display: block;\r\n  font-size: 0;\r\n  background-size: contain;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 0.5vh;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  z-index: 666;\r\n  opacity: 0.5;\r\n}\r\n\r\n#horizon-menu {\r\n  text-transform: uppercase;\r\n  font-family: 'Verdana';\r\n  font-size: ]] .. displaySize .. [[vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: fixed;\r\n  bottom: 35%;\r\n  left: 2vw;\r\n  width: 18vw;\r\n  padding: 1vw;\r\n  transform: perspective(50vw) rotateY(35deg);\r\n  text-shadow: 0.1vw 0 0.25vw #000000;\r\n}\r\n#horizon-menu .item {\r\n  color: #fff;\r\n  padding: 0.2vw 0.5vw;\r\n  z-index: 99999;\r\n}\r\n#horizon-menu .item .right {\r\n  float: right;\r\n}\r\n#horizon-menu .item .red {\r\n  color: #]]..secondaryColor..[[;\r\n}\r\n#horizon-menu .item.active {\r\n  position: relative;\r\n  text-shadow: 0 0 0.75vw #]]..secondaryColor..[[;\r\n  transform: translateZ(0.33vw);\r\n  font-size: 1.15em;\r\n  transform-style: preserve-3d;\r\n}\r\n\r\n#horizon-menu .item.active::before {\r\n  display: block;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 15%;\r\n  bottom: 15%;\r\n  left: 0.1vw;\r\n  right: 0.1vw;\r\n  background: #]]..secondaryColor..[[aa;\r\n  z-index: -50;\r\n  filter: blur(1vw);\r\n  opacity: 0.2;\r\n}\r\n\r\n#horizon-menu .item.active::after {\r\n  display: block;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 20%;\r\n  bottom: 40%;\r\n  left: 0.1vw;\r\n  right: 0.1vw;\r\n  background: #]]..secondaryColor..[[aa;\r\n  z-index: -50;\r\n  filter: blur(0.2vw);\r\n  opacity: 0.3;\r\n}\r\n#horizon-menu .item.locked {\r\n  padding-left: 0.4vw;\r\n}\r\n#horizon-menu .item.locked::before {\r\n  display: block;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 15%;\r\n  bottom: 15%;\r\n  left: 0.1vw;\r\n  right: 0.1vw;\r\n  background: #]]..primaryColor..[[aa;\r\n  z-index: -50;\r\n  filter: blur(1vw);\r\n  opacity: 0.2;\r\n}\r\n#horizon-menu .item.locked::after {\r\n  display: block;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 20%;\r\n  bottom: 40%;\r\n  left: 0.1vw;\r\n  right: 0.1vw;\r\n  background: #]]..primaryColor..[[aa;\r\n  z-index: -50;\r\n  filter: blur(0.2vw);\r\n  opacity: 0.6;\r\n}\r\n\r\n#horizon-menu::after {\r\n  content: ' ';\r\n  filter: blur(1vw);\r\n  display: block;\r\n  border-top-left-radius: 1vw;\r\n  border-top-right-radius: 1vw;\r\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\r\n  background: linear-gradient(to bottom, rgba(0,0,0,0.65) 50%,rgba(0,0,0,0) 100%);\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: -99;\r\n}\r\n\r\n#horizon-menu::before {\r\n  content: ' ';\r\n  filter: blur(0.05vw);\r\n  display: block;\r\n  border-top-left-radius: 1vw;\r\n  border-top-right-radius: 1vw;\r\n  border-top: 0.25vw solid #]]..primaryColor..[[;\r\n  border-left: 0.25vw solid #]]..primaryColor..[[;\r\n  border-right: 0.25vw solid #]]..primaryColor..[[;\r\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\r\n  background: radial-gradient(ellipse at top, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: -100;\r\n}\r\n\r\n#fuelTanks {\r\n  position: absolute;\r\n  top: 2%;\r\n  left: 2%;\r\n  width: 12vw;\r\n\r\n  color: #1b1b1b;\r\n  font-family: Verdana;\r\n  font-size: 0.8vh;\r\n  text-align: center;\r\n}\r\n#fuelTanks .fuel-meter {\r\n  display: block;\r\n  position: relative;\r\n  z-index: 1;\r\n  border-radius: 0.5em;\r\n  background: #c6c6c6;\r\n  padding: 0.5em 1em;\r\n  margin-bottom: 0.5em;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n}\r\n#fuelTanks .fuel-meter .fuel-level {\r\n  display: block;\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  bottom: 0px;\r\n  z-index: -1;\r\n  border: 0px none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#fuelTanks .fuel-meter.fuel-type-atmo .fuel-level { background: #1dd1f9; }\r\n#fuelTanks .fuel-meter.fuel-type-space .fuel-level { background: #fac31e; }\r\n#fuelTanks .fuel-meter.fuel-type-rocket .fuel-level { background: #bfa6ff; }\r\n\r\n\r\n]]\r\n--system.print([[Shadow Templar Mining Chair H1R3<style>#custom_screen_click_layer{ display: none !important; }</style>]])",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "8"
    },
    {
      "code": "--@class FuelTankHelper\r\n\r\nfuelTanks = {}\r\nFuelMass = {}\r\nFuelTime = {}\r\nfuelTypes = {\r\n  atmo = {\r\n    density = 4.000,\r\n  },\r\n  space = {\r\n    density = 6.000,\r\n  },\r\n  rocket = {\r\n    density = 0.800,\r\n  },\r\n}\r\nlocal function calcAtmoVolume(baseCap)\r\n  if fuelTankHandlingAtmo > 0 then\r\n    return baseCap + (baseCap * (fuelTankHandlingAtmo * 0.2))\r\n  else\r\n    return baseCap\r\n  end\r\nend\r\nlocal function calcSpaceVolume(baseCap)\r\n  if fuelTankHandlingSpace > 0 then\r\n    return baseCap + (baseCap * (fuelTankHandlingSpace * 0.2))\r\n  else\r\n    return baseCap\r\n  end\r\nend\r\nlocal function calcMaxMass(cap, type)\r\n  local maxMass = cap * fuelTypes[type].density\r\n\r\n  local adjustedMaxMass = maxMass\r\n  if ContainerOptimization > 0 then adjustedMaxMass = maxMass - (maxMass * ContainerOptimization * 0.05) end\r\n  if FuelTankOptimization > 0 then adjustedMaxMass = adjustedMaxMass - (maxMass * FuelTankOptimization * 0.05) end\r\n\r\n  return adjustedMaxMass\r\nend\r\nfunction normalizeHp(type,hp)\r\n  local adjHp = 0\r\n\r\n  if type == \"atmo\" then\r\n    if hp >= 50 and hp < 163 then adjHp = 50\r\n    elseif hp >= 163 and hp < 1315 then adjHp = 163\r\n    elseif hp >= 1315 and hp < 10461 then adjHp = 1315\r\n    elseif hp >= 10461 then adjHp = 10461 end\r\n  elseif type == \"space\" then\r\n    if hp >= 50 and hp < 187 then adjHp = 50\r\n    elseif hp >= 187 and hp < 1496 then adjHp = 187\r\n    elseif hp >= 1496 and hp < 15933 then adjHp = 1496\r\n    elseif hp >= 15933 then adjHp = 15933 end\r\n  elseif type == \"rocket\" then\r\n    if hp >= 366 and hp < 736 then adjHp = 366\r\n    elseif hp >= 736 and hp < 6231 then adjHp = 736\r\n    elseif hp >= 6231 and hp < 68824 then adjHp = 6231\r\n    elseif hp >= 68824 then adjHp = 68824 end\r\n  end\r\n\r\n  return adjHp\r\nend\r\nfunction normalizeHpAtmo(hp)\r\n\r\nend\r\nfunction normalizeHpSpace(hp)\r\n  -- 187\r\n  -- 1496\r\n  -- 15933\r\n\r\nend\r\nfunction normalizeHpRocket(hp)\r\n  -- 366\r\n  -- 736\r\n  -- 6231\r\n  -- 68824\r\n\r\nend\r\nfuelTankSpecsByMaxHP = {\r\n  -- Atmo Tanks\r\n  atmo = {\r\n    _50 = {\r\n      type = \"atmo\",\r\n      size = \"XS\",\r\n      capacity = function() return calcAtmoVolume(100) end,\r\n      baseWeight = 35.030,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(100),\"atmo\") end,\r\n    },\r\n    _163 = {\r\n      type = \"atmo\",\r\n      size = \"S\",\r\n      capacity = function() return calcAtmoVolume(400) end,\r\n      baseWeight = 182.670,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(400),\"atmo\") end,\r\n    },\r\n    _1315 = {\r\n      type = \"atmo\",\r\n      size = \"M\",\r\n      capacity = function() return calcAtmoVolume(1600) end,\r\n      baseWeight = 988.670,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(1600),\"atmo\") end,\r\n    },\r\n    _10461 = {\r\n      type = \"atmo\",\r\n      size = \"L\",\r\n      capacity = function() return calcAtmoVolume(12800) end,\r\n      baseWeight = 5480.000,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(12800),\"atmo\") end,\r\n    },\r\n  },\r\n\r\n  -- Space Tanks\r\n  space = {\r\n    _50 = {\r\n      type = \"space\",\r\n      size = \"XS\",\r\n      capacity = function() return calcAtmoVolume(100) end,\r\n      baseWeight = 35.030,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(100),\"space\") end,\r\n    },\r\n    _187 = {\r\n      type = \"space\",\r\n      size = \"S\",\r\n      capacity = function() return calcSpaceVolume(400) end,\r\n      baseWeight = 182.670,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(400),\"space\") end,\r\n    },\r\n    _1496 = {\r\n      type = \"space\",\r\n      size = \"M\",\r\n      capacity = function() return calcSpaceVolume(1600) end,\r\n      baseWeight = 988.670,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(1600),\"space\") end,\r\n    },\r\n    _15933 = {\r\n      type = \"space\",\r\n      size = \"L\",\r\n      capacity = function() return calcSpaceVolume(12800) end,\r\n      baseWeight = 5480.000,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(12800),\"space\") end,\r\n    },\r\n  },\r\n\r\n  -- Rocket Tanks\r\n  rocket = {\r\n    _366 = {\r\n      type = \"rocket\",\r\n      size = \"XS\",\r\n      capacity = function() return 400 end,\r\n      baseWeight = 173.420,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(400),\"rocket\") end,\r\n    },\r\n    _736 = {\r\n      type = \"rocket\",\r\n      size = \"S\",\r\n      capacity = function() return 800 end,\r\n      baseWeight = 886.720,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(800),\"rocket\") end,\r\n    },\r\n    _6231 = {\r\n      type = \"rocket\",\r\n      size = \"M\",\r\n      capacity = function() return 6400 end,\r\n      baseWeight = 4720.000,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(6400),\"rocket\") end,\r\n    },\r\n    _68824 = {\r\n      type = \"rocket\",\r\n      size = \"L\",\r\n      capacity = function() return 50000 end,\r\n      baseWeight = 25740.000,\r\n      maxWeight = function() return calcMaxMass(calcAtmoVolume(50000),\"rocket\") end,\r\n    },\r\n  },\r\n}\r\n\r\nlocal function isINF(value)\r\n  return value == math.huge or value == -math.huge\r\nend\r\n\r\nlocal function isNAN(value)\r\n  return value ~= value\r\nend\r\n\r\nfunction disp_time(time)\r\n  if isINF(time) or isNAN(time) then return \"inf\" end\r\n  local days = math.floor(time/86400)\r\n  local hours = math.floor(math.fmod(time, 86400)/3600)\r\n  local minutes = math.floor(math.fmod(time,3600)/60)\r\n  local seconds = math.floor(math.fmod(time,60))\r\n  if time >= 86400 then\r\n      return string.format(\"%dd:%02dh\",days,hours)\r\n  elseif time < 86400 and time > 3600 then\r\n      return string.format(\"%02dh:%02dm:%02ds\",hours,minutes,seconds)\r\n  elseif time < 3600 and time > 60 then\r\n      return string.format(\"%02dm:%02ds\",minutes,seconds)\r\n  else\r\n      return string.format(\"%02ds\",seconds)\r\n  end\r\nend\r\n\r\nlocal unpack = table.unpack\r\n\r\nfunction fuelUsed(period)\r\n\tlocal t = {}\r\n\tfunction sum(a, ...)\r\n\t\tif a then\r\n            return a-sum(...)\r\n        else\r\n            return 0\r\n        end\r\n\tend\r\n\tfunction average(n)\r\n\t\tif #t == period then table.remove(t, 1) end\r\n\t\tif n ~= 0 and n ~= nil then t[#t + 1] = n end\r\n\t\treturn sum(unpack(t))\r\n\tend\r\n\treturn average\r\nend\r\n\r\nfunction getFuelSituation()\r\n  local tanks = {\r\n    atmo = {},\r\n    space = {},\r\n    rocket = {},\r\n  }\r\n\r\n  for id, specs in pairs(fuelTanks) do\r\n    table.insert(tanks[specs.type], {\r\n      name = core.getElementNameById(id),\r\n      level = getFuelTankLevel(id),\r\n      time = getFuelTime(id),\r\n      specs = specs,\r\n    })\r\n  end\r\n\r\n  return tanks\r\nend\r\n\r\nfunction getFuelTankSpecs(fuelTankType, fuelTankId)\r\n  local maxHP = math.floor(core.getElementMaxHitPointsById(fuelTankId))\r\n--   system.print(fuelTankType..\"........\"..maxHP)\r\n  return fuelTankSpecsByMaxHP[fuelTankType]['_' .. normalizeHp(fuelTankType,maxHP)]\r\nend\r\n\r\nfunction getFuelTankLiters(fuelTankId)\r\n  local fuelTankSpecs = fuelTanks[fuelTankId]\r\n  local massTotal = core.getElementMassById(fuelTankId)\r\n  local massContents = massTotal - fuelTankSpecs.baseWeight\r\n  return massContents\r\nend\r\n--vanillaMaxVolume = vanillaMaxVolume - (vanillaMaxVolume * ContainerOptimization * 0.05)\r\nfunction getFuelTankLevel(fuelTankId)\r\n  local fuelTankSpecs = fuelTanks[fuelTankId]\r\n  local adjustedMaxMass = fuelTankSpecs.maxWeight()\r\n  return getFuelTankLiters(fuelTankId) / adjustedMaxMass\r\nend\r\n\r\nfunction getFuelTime(fuelTankId)\r\n  local fuelTankSpecs = fuelTanks[fuelTankId]\r\n  local lastUpdate = FuelTime[fuelTankId] or system.getArkTime()\r\n  local deltaTime = math.max(system.getArkTime() - lastUpdate, 0.001)\r\n  local massTotal = core.getElementMassById(fuelTankId)\r\n  local minMass = fuelTankSpecs.baseWeight\r\n  local fuelUsed = FuelMass[fuelTankId](massTotal)\r\n  local fuelTime = (deltaTime / fuelUsed) * (massTotal - minMass)\r\n  local fuelTimeFormatted = disp_time(fuelTime)\r\n  FuelTime[fuelTankId] = system.getArkTime()\r\n  return fuelTimeFormatted\r\n\r\nend\r\n\r\nfunction getFuelTanks()\r\n  local elementIds = core.getElementIdList()\r\n  for k, elementId in pairs(elementIds) do\r\n    local elementType = core.getElementDisplayNameById(elementId)\r\n    -- Fuel tank configuration routine\r\n    if elementType == \"Atmospheric Fuel Tank\" then\r\n      --system.print(elementType..\"_\"..elementId)\r\n      local tank = getFuelTankSpecs(\"atmo\", elementId)\r\n      fuelTanks[elementId] = tank\r\n      FuelMass[elementId] = fuelUsed(2)\r\n    elseif elementType == \"Space Fuel Tank\" then\r\n      fuelTanks[elementId] = getFuelTankSpecs(\"space\", elementId)\r\n      FuelMass[elementId] = fuelUsed(2)\r\n    elseif elementType == \"Rocket Fuel Tank\" then\r\n      fuelTanks[elementId] = getFuelTankSpecs(\"rocket\", elementId)\r\n      FuelMass[elementId] = fuelUsed(2)\r\n    end\r\n  end\r\n\r\n--   for _, v in ipairs(fuelTankSpecsByMaxHP) do\r\n--     --system.print(\"Fuel Tank: \"..v)\r\n--     for k,t in ipairs(v) do\r\n--       for x,y in pairs(t) do\r\n--         --system.print(\"Capacity: \"..y.capacity())\r\n--       end\r\n--     end\r\n--   end\r\nend\r\n\r\ngetFuelTanks()\r\n",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "9"
    },
    {
      "code": "--@class TagManager\r\n--[[\r\n    Shadow Templar Tag Manager\r\n    Version 1.02\r\n\t\r\n\tusage:\r\n\t\texampleGroup = TagManager(\"all,vertical\")\r\n\t\texampleGroup.Add(\"booster\")\r\n\t\texampleGroup.Remove(\"vertical\")\r\n\t\tengines.tags = exampleGroup \r\n]]\r\n\r\nfunction TagManager(tagString)\r\n\tself = {}\r\n\tlocal tagArray = {}\r\n\tlocal tags = \"\"\r\n\r\n\tlocal function explode(div,str)\r\n\t\tif (div=='') then return false end\r\n\t\tlocal pos,arr = 0,{}\r\n\t\tfor st,sp in function() return string.find(str,div,pos,true) end do\r\n\t\t  table.insert(arr,string.sub(str,pos,st-1))\r\n\t\t  pos = sp + 1\r\n\t\tend\r\n\t\ttable.insert(arr,string.sub(str,pos))\r\n\t\treturn arr\r\n\tend\r\n\t\r\n\tfunction self.tagsToString()\r\n\t\tif #tagArray == 0 then\r\n\t\t\ttags = \"all\"\r\n\t\telse\r\n\t\t\ttags = table.concat(tagArray,\",\")\r\n\t\tend\r\n\tend\r\n\t\r\n\tfunction self.Remove(s)\r\n\t\tif type(s) ~= \"string\" then error(\"[TagManager] Unable to remove a tag - Not a string\") end\r\n\t\tfor k,v in pairs(tagArray) do\r\n\t\t\tif s == v then\r\n\t\t\t\ttable.remove(tagArray,k)\r\n\t\t\tend\r\n\t\tend\r\n\t\tself.tagsToString()\r\n\tend\r\n\t\r\n\tfunction self.Add(s)\r\n\t\tif type(s) ~= \"string\" then error(\"[TagManager] Unable to add a tag - Not a string\") end\r\n\t\tfor k,v in pairs(tagArray) do\r\n\t\t\tif s == v then\r\n\t\t\t\treturn\r\n\t\t\tend\r\n\t\tend\r\n\t\ttable.insert(tagArray,s)\r\n\t\tself.tagsToString()\r\n\tend\r\n\t\r\n\tif (tagString ~= nil and type(tagString) == \"string\") then\r\n\t\tfor k,v in pairs(explode(\",\",tagString)) do\r\n\t\t\tself.Add(v)\r\n\t\tend\r\n\telse\r\n\t\tself.Add(\"all\")\r\n\tend\r\n\t\r\n\tsetmetatable (self, { __tostring = function (self) return tags end })\r\n\treturn self\r\nend\r\n\r\n\r\n",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "10"
    },
    {
      "code": "--@class KeybindController\r\n--[[\r\n\tShadow Templar Keybind Controller\r\n\tVersion 1.24\r\n\t(c) Copyright 2019 Shadow Templar <http://www.shadowtemplar.org>\r\n\r\n\tPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\tThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n]]\r\nfunction Keybind(key)\r\n\tlocal self = {}\r\n\tself.Key = key\r\n\tlocal bindings = {}\r\n\r\n\tfunction self.Add(f, keybindName)\r\n\t\tif type(f) ~= \"function\" then error(\"[Keybind] Unable to add callback - not a function\") end\r\n\t\ttable.insert(bindings, {Function = f, Name = keybindName})\r\n\tend\r\n\r\n\tfunction self.Remove(f)\r\n\t\tif type(f) ~= \"function\" then error(\"[Keybind] Unable to remove callback - not a function\") end\r\n\t\tlocal reverse = {}\r\n\t\tfor k,v in pairs(bindings) do reverse[v.Function]=k end\r\n\t\tfor k,v in pairs(reverse) do if k == f then bindings[v]=nil end end\r\n\tend\r\n\r\n\tfunction self.GetNames()\r\n\t\tlocal out = {}\r\n\t\tfor _,v in pairs(bindings) do if v.Name then table.insert(out, v.Name) end end\r\n\t\treturn out\r\n\tend\r\n\r\n\tfunction self.Call() for _,v in pairs(bindings) do v.Function(self.Key) end end\r\n\treturn self\r\nend\r\n\r\nfunction KeybindController()\r\n\tlocal self = {}\r\n\tlocal keyList = {\r\n\t\t\"forward\", \"backward\", \"left\", \"right\", \"yawleft\", \"yawright\", \"up\", \"down\", \"gear\", \"light\", \"landing\", \"brake\",\r\n\t\t\"option1\", \"option2\", \"option3\", \"option4\", \"option5\", \"option6\", \"option7\", \"option8\", \"option9\",\r\n\t\t\"stopengines\", \"speedup\", \"speeddown\", \"antigravity\", \"booster\",\"lshift\",\"lalt\",\"lalt\",\"strafeleft\",\"straferight\"\r\n\t}\r\n\tself.keyUp = {}\r\n\tself.keyDown = {}\r\n\tself.keyLoop = {}\r\n\r\n\tfunction self.Call(action, type)\r\n\t\tif type == \"up\" then\r\n\t\t\tif self.keyUp[action] then self.keyUp[action].Call(action) end\r\n\t\telseif type == \"down\" then\r\n\t\t\tif self.keyDown[action] then self.keyDown[action].Call(action) end\r\n\t\telse\r\n\t\t\tif self.keyLoop[action] then self.keyDown[action].Call(action) end\r\n\t\tend\r\n\tend\r\n\r\n\tfunction self.GetNamedKeybinds()\r\n\t\tlocal out = {}\r\n\t\tfor k,v in pairs(self.keyUp) do\r\n\t\t\tlocal names = v.GetNames()\r\n\t\t\tif #names > 0 then for i=1,#names do table.insert(out, { Key = v.Key, Name = names[i]}) end end\r\n\t\tend\r\n\t\tfor k,v in pairs(self.keyDown) do\r\n\t\t\tlocal names = v.GetNames()\r\n\t\t\tif #names > 0 then for i=1,#names do table.insert(out, { Key = v.Key, Name = names[i]}) end end\r\n\t\tend\r\n\t\tfor k,v in pairs(self.keyLoop) do\r\n\t\t\tlocal names = v.GetNames()\r\n\t\t\tif #names > 0 then for i=1,#names do table.insert(out, { Key = v.Key, Name = names[i]}) end end\r\n\t\tend\r\n\t\ttable.sort(out, function(a,b) return a.Key < b.Key end)\r\n\t\treturn out\r\n\tend\r\n\r\n\tself.Init = function() end\r\n\r\n\tlocal function init()\r\n\t\tfor i=1,#keyList do\r\n\t\t\tself.keyUp[keyList[i]] = Keybind(keyList[i])\r\n\t\t\tself.keyDown[keyList[i]] = Keybind(keyList[i])\r\n\t\t\tself.keyLoop[keyList[i]] = Keybind(keyList[i])\r\n\t\tend\r\n\tend\r\n\tinit()\r\n\treturn self\r\nend\r\n\r\nkeybindPresets = {}\r\n",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "11"
    },
    {
      "code": "--@class STEC\r\n--[[\r\n    Shadow Templar Engine Control\r\n    Version: 1.17\r\n\r\n    Setup:\r\n        - Put this file in system.start\r\n        - Replace system.flush with: engines.apply()\r\n        - Replace all controls with the appropriate STEC equivalent:\r\n            - ship.direction.x - left/right\r\n            - ship.direction.y - forward/back\r\n            - ship.direction.z - forward/back\r\n            - ship.rotation.x - pitch\r\n            - ship.rotation.y - roll\r\n            - ship.rotation.z - yaw\r\n        - See comments for additional functionality\r\n]]\r\nlocal atlas = require('atlas')\r\nplanetaryReference = PlanetRef()\r\ngalaxyReference = planetaryReference(atlas)\r\nhelios = galaxyReference[0]\r\n\r\nkinematics = Kinematics()\r\nlocal json = require(\"dkjson\")\r\nlocal jdecode = json.decode\r\nlocal atlas = require('atlas')\r\nlocal find = string.find\r\nfunction getJsonNum (json, key, init)\r\n  local pattern = [[\"]] .. key .. [[\"%s*:%s*(-?[0-9.e-]+)]]\r\n  local startIndex, endIndex, valueStr = find(json, pattern, init)\r\n  return tonumber(valueStr), startIndex, endIndex\r\nend\r\n\r\nfunction round(val, decimal)\r\n  if (decimal) then\r\n    return math.floor((val * 10 ^ decimal) + 0.5) / (10 ^ decimal)\r\n  else\r\n    return math.floor(val + 0.5)\r\n  end\r\nend\r\n\r\n--function getBrakingInfo()\r\n--    local curVelMs = vec3(construct.getWorldVelocity()):len()\r\n--    local cMass = construct.getMass()\r\n--    local brakingForce = getJsonNum(unit.getWidgetData(), \"maxBrake\")\r\n--    local brakeInfo = {}\r\n--    if brakingForce == 0 then\r\n--        brakeInfo.time = \"BF: 0\"\r\n--        brakeInfo.dist = 1\r\n--        return brakeInfo\r\n--    end\r\n--\r\n--    local brakeForce = math.floor(brakingForce)\r\n--    local rA = brakeForce / cMass\r\n--    local c = 30000000 / 3600\r\n--    local c2 = c * c\r\n--    local cA = c * math.asin(curVelMs / c)\r\n--    local cC = c2 * math.cos(cA / c) / rA\r\n--\r\n--    local t = (c - cA) / rA\r\n--    local d = cC - c2 * math.cos((rA * t + cA) / c) / rA\r\n--\r\n--    local min = math.floor(t / 60)\r\n--    t = t - (60 * min)\r\n--    local sec = round(t, 0)\r\n--\r\n--    local tms = string.format(\"%02dm:%02ds\", min, sec)\r\n--\r\n--    local km = round(d / 1000, 2)\r\n--\r\n--    brakeInfo.time = tms\r\n--    brakeInfo.dist = km\r\n--\r\n--    return brakeInfo\r\n--end\r\n\r\nfunction STEC(core, control, Cd)\r\n    local self = {}\r\n    self.core = core\r\n    self.construct = construct\r\n    self.constructMaxSpeed = construct.getMaxSpeed() * 3.6\r\n    self.control = control\r\n    self.nearestPlanet = helios:closestBody(construct.getWorldPosition())\r\n    self.world = {\r\n        up = vec3(construct.getWorldOrientationUp()),\r\n        down = -vec3(construct.getWorldOrientationUp()),\r\n        left = -vec3(construct.getWorldOrientationRight()),\r\n        right = vec3(construct.getWorldOrientationRight()),\r\n        forward = vec3(construct.getWorldOrientationForward()),\r\n        back = -vec3(construct.getWorldOrientationForward()),\r\n        velocity = vec3(construct.getWorldVelocity()),\r\n        acceleration = vec3(construct.getWorldAcceleration()),\r\n        position = vec3(construct.getWorldPosition()),\r\n        gravity = vec3(core.getWorldGravity()),\r\n        vertical = vec3(core.getWorldVertical()),\r\n        atmosphericDensity = control.getAtmosphereDensity(),\r\n        nearPlanet = unit.getClosestPlanetInfluence() > 0,\r\n        atlasAltitude = self.nearestPlanet:getAltitude(construct.getWorldPosition()),\r\n        --nearestPlanetGravity = vec3(self.nearestPlanet.getGravity(construct.getWorldPosition()))\r\n\r\n    }\r\n    if antigrav and antigrav.getState() == 1 then\r\n        self.world.gravity = self.nearestPlanet:getGravity(construct.getWorldPosition())\r\n    end\r\n    self.target = {\r\n        prograde = function() return self.world.velocity:normalize() end,\r\n        retrograde = function() return -self.world.velocity:normalize() end,\r\n        radial = function() return self.nearestPlanet:getGravity(construct.getWorldPosition()):normalize() end,\r\n        antiradial = function() return -self.nearestPlanet:getGravity(construct.getWorldPosition()):normalize() end,\r\n        normal = function() return self.world.velocity:cross(self.world.right):normalize() end,\r\n        antinormal = function() return self.world.velocity:cross(self.world.left):normalize() end,\r\n    }\r\n    self.planets = generatePlanetTable()\r\n    -- self.planets = {\r\n    --     sancuary = function() return helios[26]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     madis = function() return helios[1]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     thades = function() return helios[3]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     alioth = function() return helios[2]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     feli = function() return helios[5]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     ion = function() return helios[120]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     jago = function() return helios[9]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     lacobus = function() return helios[100]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     sicari = function() return helios[6]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     sinnen = function() return helios[7]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     symeon = function() return helios[110]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     talemai = function() return helios[4]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    --     teoma = function() return helios[8]:getGravity(construct.getWorldPosition()):normalize() end,\r\n    -- }\r\n\r\n    function generatePlanetTable()\r\n        local planets = {}\r\n        local atlas = require('atlas')\r\n        for _, planet in ipairs(atlas[0]) do\r\n            planets[planet.name[0]] = function()\r\n                return helios[planet.id]:getGravity(construct.getWorldPosition()):normalize()\r\n            end\r\n        end\r\n        return planets\r\n    end\r\n\r\n    -- Construct id\r\n    self.id = construct.getId()\r\n    self.forwardThrust = 0\r\n    self.atmoThrust = 0\r\n    self.spaceThrust = 0\r\n    -- Control Mode - Travel (0) or Cruise (1)\r\n    self.controlMode = unit.getControlMode()\r\n    -- Alternate Control Mode for remote control\r\n    self.alternateCM = false\r\n    -- Placeholder for throttle value when switching control modes\r\n    self.tempThrottle = 0\r\n    -- Placeholder for cruise value when switching control modes\r\n    self.tempCruise = 0\r\n    -- Active engine tags\r\n    self.tags = TagManager(\"all\")\r\n    -- Target vector to face if non-0. Can take in a vec3 or function which returns a vec3\r\n    self.targetVector = nil\r\n    -- Whether the target vector should unlock automatically if the ship is rotated by the pilot\r\n    self.targetVectorAutoUnlock = true\r\n    -- Roid AP\r\n    self.targetGoTo = nil\r\n    -- Current altitude\r\n    self.altitude = 0\r\n    -- Current mass of the vessel, in kilograms\r\n    self.mass = self.construct.getMass()\r\n    -- Amount of thrust to apply in world space, in Newton. Stacks with {{direction}}\r\n    self.thrust = vec3(0, 0, 0)\r\n    -- Amount of thrust to apply in local space, in percentage of fMax 0-1\r\n    self.direction = vec3(0, 0, 0)\r\n    -- Amount of rotation to apply in local space\r\n    self.rotation = vec3(0, 0, 0)\r\n    -- Speed scale factor for rotations\r\n    self.rotationSpeed = 2\r\n    -- Starting speed for auto-scaling rotation\r\n    self.rotationSpeedMin = 0.01\r\n    -- Maximum speed for auto-scaling rotation\r\n    self.rotationSpeedMax = 5\r\n    -- Step for increasing the rotation speed\r\n    self.rotationStep = 0.03\r\n    -- Breaking speed multiplier\r\n    self.brakingFactor = 10\r\n    -- Amount of angular thrust to apply, in world space\r\n    self.angularThrust = vec3(0, 0, 0)\r\n    -- Whether or not the vessel should attempt to cancel out its current velocity in directions that are not being accelerated towards\r\n    self.inertialDampening = false\r\n    self.IDIntensity = 5\r\n    -- Whether or not the vessel should attempt to completely cancel out its current velocity\r\n    self.brake = false\r\n    -- Whether or not the vessel should attempt to counter gravity influence\r\n    self.counterGravity = true\r\n    -- Whether or not the vessel should attempt to face perpendicular to the gravity vector\r\n    self.followGravity = false\r\n    -- Aggressiveness of the gravity follow adjustment\r\n    self.gravityFollowSpeed = 4\r\n    -- Amount of throttle to apply. 0-1 range\r\n    self.throttle = 1\r\n    -- Maximum thrust which the vessel is capable of producing\r\n    --self.fMax = 0\r\n    self.pocket = pocket\r\n    -- Altitude which the vessel should attempt to hold\r\n    self.altitudeHold = 0\r\n    -- Speed which the vessel should attempt to maintain\r\n    self.cruiseSpeed = 0\r\n    -- Whether or not to ignore throttle for vertical thrust calculations\r\n    self.ignoreVerticalThrottle = false\r\n    -- Whether or not to ignore throttle for horizontal thrust calculations\r\n    self.ignoreHorizontalThrottle = true\r\n    -- Local velocity\r\n    self.localVelocity = vec3(construct.getVelocity())\r\n    -- Roll Degrees\r\n    self.rollDegrees = self.world.vertical:angle_between(self.world.left) / math.pi * 180 - 90\r\n    if self.world.vertical:dot(self.world.up) > 0 then self.rollDegrees = 180 - self.rollDegrees end\r\n    -- Pitch\r\n    self.pitchRatio = self.world.vertical:angle_between(self.world.forward) / math.pi - 0.5\r\n    self.vtolPriority = true\r\n    self.disableVtol = false\r\n    self.disabledTags = \"\"\r\n    local lastUpdate = system.getArkTime()\r\n    self.thrustVec = vec3(0,0,0)\r\n    self.trajectoryDiff = 0\r\n    self.ETA = 0\r\n    self.simulationPos = vec3(0,0,0)\r\n\r\n    self.priorityTags1 = \"airfoil,torque,ground\"\r\n    self.priorityTags2 = \"atmospheric_engine,space_engine\"\r\n    self.priorityTags3 = \"brake,vertical\"\r\n    self.brakeDistance = 0\r\n    self.accelTime = 0\r\n    self.targetDist = 0\r\n    self.inertialMass = 0\r\n    self.maxBrake = jdecode(unit.getWidgetData()).maxBrake\r\n    self.debug = vec3(0,0,0)\r\n    self.deviationAngle = 0\r\n    self.stopping = false\r\n\r\n    function getAngle(a,b,c)\r\n        if a + c < b then b = a end\r\n        return math.deg(math.acos((a^2+b^2-c^2)/(2*(a*b))))\r\n    end\r\n    function getGapFromAngle(a,b,angle)\r\n        return math.sqrt((a^2 + b^2) - (2*(b*a)*math.cos(angle)))\r\n    end\r\n    function errHandler(x)\r\n        system.print(\"Error: \" .. x)\r\n        return \"ERROR\"\r\n    end\r\n    function simulateAhead(simLength, timeStep)\r\n        local sv = self.world.velocity:clone()\r\n        local sp = self.world.position:clone()\r\n        local sa = self.world.acceleration:clone()\r\n        local cutoff = simLength / timeStep\r\n\r\n        for step = 0,cutoff do\r\n            --system.print(\"Start simulate\")\r\n            local stepResult = simulate(timeStep, sp, sv, sa)\r\n            sv = stepResult.velocity\r\n            sp = stepResult.position\r\n            --system.print(tostring(vec3(sp)))\r\n            if stepResult.collision ~= nil then\r\n                stepResult.time = step * timeStep\r\n                --stepResult.time = step / timeStep\r\n                return stepResult\r\n            end\r\n        end\r\n        return {\r\n            [\"position\"] = sp,\r\n            [\"velocity\"] = sv,\r\n            [\"collision\"] = nil\r\n        }\r\n    end\r\n\r\n    function simulate(stepSize, sPos, sVel, sAcc)\r\n        local G = 6.6740831 * 10^-11\r\n        local closest = nil\r\n        local vFinal = 0\r\n        local velocity = sVel\r\n        local collided = nil\r\n        local position = sPos\r\n        for i = 1, #atlas[0] do\r\n            local body = atlas[0][i]\r\n            local bPos = vec3(body.center[1], body.center[2], body.center[3])\r\n            local dir = (sPos - bPos):normalize()\r\n            local dist = (sPos - bPos):len()\r\n\r\n            if dist < body.radius or collided ~= nil then\r\n                if collided == nil then\r\n                    collided = body\r\n                    closest = body\r\n                end\r\n                return {\r\n                    [\"position\"] = position,\r\n                    [\"velocity\"] = vec3(0,0,0),\r\n                    [\"collision\"] = collided\r\n                }\r\n            end\r\n\r\n            local Fg = G * (ship.mass * body.GM) / dist^2\r\n            local dirMul = dir * ((Fg / ship.mass) * -stepSize)\r\n            velocity = velocity + dirMul\r\n            if closest == nil or ((dist - body.radius) / Fg < ((sPos - vec3(closest.center[1], closest.center[2], closest.center[3])):len() - closest.radius) / Fg) then\r\n                closest = body\r\n            end\r\n\r\n            if velocity:len() > vFinal then\r\n                vFinal = velocity:len()\r\n            end\r\n\r\n        end\r\n\r\n        if collided == nil and stepSize > 0 then\r\n            if closest ~= nil then\r\n\r\n            end\r\n\r\n             velocity = velocity + (sAcc * stepSize)\r\n             if velocity:len() > 8333.333333 then\r\n                velocity = velocity:normalize() * 8333.333333\r\n             end\r\n             position = position + (velocity * stepSize)\r\n        end\r\n        return {\r\n            [\"position\"] = position,\r\n            [\"velocity\"] = velocity,\r\n            [\"collision\"] = collided\r\n        }\r\n    end\r\n\r\n    function sMovingAverage(period)\r\n        local t = {}\r\n        function _sum(a, ...)\r\n            if a then return a+_sum(...) else return 0 end\r\n        end\r\n        function _average(n)\r\n            if #t == period then table.remove(t, 1) end\r\n            t[#t + 1] = n\r\n            return _sum(table.unpack(t)) / #t\r\n        end\r\n        return _average\r\n    end\r\n\r\n    -- local sMovingAverage5 = sMovingAverage(5)\r\n    -- local sMovingAverage10 = sMovingAverage(10)\r\n    -- local sMovingAverage15 = sMovingAverage(15)\r\n    local sMovingAverage25 = sMovingAverage(25)\r\n\r\n    function self.updateWorld()\r\n        self.world = {\r\n            up = vec3(construct.getWorldOrientationUp()),\r\n            down = -vec3(construct.getWorldOrientationUp()),\r\n            left = -vec3(construct.getWorldOrientationRight()),\r\n            right = vec3(construct.getWorldOrientationRight()),\r\n            forward = vec3(construct.getWorldOrientationForward()),\r\n            back = -vec3(construct.getWorldOrientationForward()),\r\n            velocity = vec3(construct.getWorldVelocity()),\r\n            acceleration = vec3(construct.getWorldAcceleration()),\r\n            position = vec3(construct.getWorldPosition()),\r\n            gravity = vec3(core.getWorldGravity()),\r\n            vertical = vec3(core.getWorldVertical()),\r\n            atmosphericDensity = control.getAtmosphereDensity(),\r\n            nearPlanet = unit.getClosestPlanetInfluence() > 0,\r\n            atlasAltitude = self.nearestPlanet:getAltitude(construct.getWorldPosition()),\r\n            --nearestPlanetGravity = vec3(self.nearestPlanet.getGravity(construct.getWorldPosition()))\r\n        }\r\n\r\n        self.nearestPlanet = helios:closestBody(construct.getWorldPosition())\r\n        if antigrav and antigrav.getState() == 1 then\r\n            self.world.gravity = self.nearestPlanet:getGravity(construct.getWorldPosition())\r\n        end\r\n\t   -- Roll Degrees\r\n        self.rollDegrees = self.world.vertical:angle_between(self.world.left) / math.pi * 180 - 90\r\n        if self.world.vertical:dot(self.world.up) > 0 then self.rollDegrees = 180 - self.rollDegrees end\r\n        -- Pitch\r\n        self.pitchRatio = self.world.vertical:angle_between(self.world.forward) / math.pi - 0.5\r\n\r\n        self.AngularVelocity = vec3(construct.getWorldAngularVelocity())\r\n        self.AngularAcceleration = vec3(construct.getWorldAngularAcceleration())\r\n        self.AngularAirFriction = vec3(construct.getWorldAirFrictionAngularAcceleration())\r\n\r\n\t\tself.airFriction = vec3(construct.getWorldAirFrictionAcceleration())\r\n\r\n        self.mass = self.construct.getMass()\r\n        self.altitude = self.nearestPlanet:getAltitude(construct.getWorldPosition())\r\n        self.localVelocity = vec3(construct.getVelocity())\r\n\r\n        if self.vtolPriority then\r\n            self.priorityTags1 = \"brake,airfoil,torque,vertical,lateral,longitudinal\"\r\n            self.priorityTags2 = \"atmospheric_engine,space_engine\"\r\n            self.priorityTags3 = \"\"\r\n        else\r\n            self.priorityTags1 = \"brake,airfoil,torque,lateral,longitudinal\"\r\n            self.priorityTags2 = \"atmospheric_engine,space_engine\"\r\n            self.priorityTags3 = \"vertical\"\r\n        end\r\n\r\n        local tkForward = construct.getMaxThrustAlongAxis(\"all\", {vec3(0, 1, 0):unpack()})\r\n        local tkUp = construct.getMaxThrustAlongAxis(\"all\", {vec3(0, 0, 1):unpack()})\r\n        local tkRight = construct.getMaxThrustAlongAxis(\"all\", {vec3(1, 0, 0):unpack()})\r\n\r\n        local tkOffset = 0\r\n        if self.world.atmosphericDensity < 0.1 then\r\n            tkOffset = 2\r\n        end\r\n\r\n        virtualGravityEngine =\r\n            vec3(\r\n            library.systemResolution3(\r\n                {self.world.right:unpack()},\r\n                {self.world.forward:unpack()},\r\n                {self.world.up:unpack()},\r\n               {(self.world.gravity * self.mass):unpack()}\r\n            )\r\n        )\r\n\r\n        self.MaxKinematics = {\r\n            Forward = math.abs(tkForward[1 + tkOffset] + virtualGravityEngine.y),\r\n            Backward = math.abs(tkForward[2 + tkOffset] - virtualGravityEngine.y),\r\n            Up = math.abs(tkUp[1 + tkOffset] + virtualGravityEngine.z),\r\n            Down = math.abs(tkUp[2 + tkOffset] - virtualGravityEngine.z),\r\n            Right = math.abs(tkRight[1 + tkOffset] + virtualGravityEngine.x),\r\n            Left = math.abs(tkRight[2 + tkOffset] - virtualGravityEngine.x)\r\n        }\r\n        if self.world.atmosphericDensity > 0.01 and self.world.atmosphericDensity < 0.1 then\r\n            self.MaxKinematics.Forward = math.abs((tkForward[1] + tkForward[3]) + virtualGravityEngine.y)\r\n        end\r\n        self.maxBrake = jdecode(unit.getWidgetData()).maxBrake\r\n        local c = 50000000 / 3600\r\n        local v = self.world.velocity:len()\r\n        local y = 1/math.sqrt(1-((v*v)/(c*c)))\r\n        self.inertialMass = utils.clamp(self.mass * y, self.mass, self.mass * 1.5)\r\n\r\n\r\n\r\n    end\r\n    function self.calculateAccelerationForce(acceleration, time)\r\n        return self.mass * (acceleration / time)\r\n    end\r\n\r\n    function clamp(n, min, max)\r\n        return math.min(max, math.max(n, min))\r\n    end\r\n    function round(num, numDecimalPlaces)\r\n        local mult = 10^(numDecimalPlaces or 0)\r\n        return math.floor(num * mult + 0.5) / mult\r\n    end\r\n\r\n    function math.sign(v)\r\n        return (v >= 0 and 1) or -1\r\n    end\r\n    function math.round(v, bracket)\r\n        bracket = bracket or 1\r\n        return math.floor(v/bracket + math.sign(v) * 0.5) * bracket\r\n    end\r\n\r\n    function self.throttleUp()\r\n        self.throttle = clamp(self.throttle + 0.05, 0, 1)\r\n    end\r\n\r\n    function self.throttleDown()\r\n        self.throttle = clamp(self.throttle - 0.05, 0, 1)\r\n    end\r\n\r\n    function self.scaleRotation()\r\n        if self.rotationSpeed <= self.rotationSpeedMax then self.rotationSpeed = self.rotationSpeed + self.rotationStep end\r\n    end\r\n\r\n    function self.worldToLocal(vector)\r\n        return vec3(\r\n            library.systemResolution3(\r\n                {self.world.right:unpack()},\r\n                {self.world.forward:unpack()},\r\n                {self.world.up:unpack()},\r\n                {vector:unpack()}\r\n            )\r\n        )\r\n    end\r\n\r\n    function self.localToRelative(pos, up, right, forward)\r\n        -- this is horrible, can optimize?\r\n        local rightX, rightY, rightZ = right:unpack()\r\n        local forwardX, forwardY, forwardZ = forward:unpack()\r\n        local upX, upY, upZ = up:unpack()\r\n        local rfuX, rfuY, rfuZ = pos:unpack()\r\n        local relX = rfuX * rightX + rfuY * forwardX + rfuZ * upX\r\n        local relY = rfuX * rightY + rfuY * forwardY + rfuZ * upY\r\n        local relZ = rfuX * rightZ + rfuY * forwardZ + rfuZ * upZ\r\n        return vec3(relX, relY, relZ)\r\n    end\r\n\r\n    function self.localToWorld(vector)\r\n        vector = {vector:unpack()}\r\n        local rightX, rightY, rightZ = self.world.right:unpack()\r\n        local forwardX, forwardY, forwardZ = self.world.forward:unpack()\r\n        local upX, upY, upZ = self.world.up:unpack()\r\n        local rfuX, rfuY, rfuZ = vector:unpack()\r\n        local relX = rfuX * rightX + rfuY * forwardX + rfuZ * upX\r\n        local relY = rfuX * rightY + rfuY * forwardY + rfuZ * upY\r\n        local relZ = rfuX * rightZ + rfuY * forwardZ + rfuZ * upZ\r\n        return vec3(relX, relY, relZ)\r\n    end\r\n\r\n\r\n    function moveWaypointZ(vector, altitude)\r\n        return (vector - (self.nearestPlanet:getGravity(vector)):normalize() * (altitude))\r\n    end\r\n    function moveWaypointY(altitude, distance)\r\n        local z = moveWaypointZ(self.world.position, altitude - self.altitude)\r\n        return z - (self.world.right:cross(self.nearestPlanet:getGravity(self.world.position)):normalize()) * -distance\r\n    end\r\n\r\n    function moveWaypoint(origin, intersect, distance)\r\n        return origin + ((origin - intersect):normalize() * distance)\r\n    end\r\n\r\n    function self.getTrajectory(distance)\r\n        distance = distance or 1\r\n        local v = self.world.position + (self.world.velocity + self.world.gravity):normalize()\r\n        --local v = self.simulationPos\r\n        return self.world.position - ((self.world.position - v):normalize() * distance)\r\n    end\r\n\r\n\r\n\r\n    function self.apply()\r\n        local deltaTime = math.max(system.getArkTime() - lastUpdate, 0.001) --If delta is below 0.001 then something went wrong in game engine.\r\n        self.updateWorld()\r\n        local tmp = self.thrust\r\n        local atmp = self.angularThrust\r\n        --Thrust\r\n        --Lateral\r\n        local gravityCorrection = false\r\n        local fMax = construct.getMaxThrustAlongAxis(\"all\", {vec3(0,1,0):unpack()})\r\n        local vMaxUp = construct.getMaxThrustAlongAxis(\"all\", {vec3(0,0,1):unpack()})\r\n        local vMaxDown = construct.getMaxThrustAlongAxis(\"all\", {vec3(0,0,-1):unpack()})\r\n        local hMax = construct.getMaxThrustAlongAxis(\"all\", {vec3(1,0,0):unpack()})\r\n        self.forwardThrust = self.MaxKinematics.Forward\r\n\r\n\r\n        if self.direction.x > 0 then\r\n            tmp = tmp  + (self.world.right * self.MaxKinematics.Right) * self.throttle\r\n        end\r\n        if self.direction.x < 0 then\r\n            tmp = tmp  - (self.world.right * self.MaxKinematics.Right) * self.throttle\r\n        end\r\n        --Forward\r\n        if self.direction.y > 0 then\r\n            --if self.world.atmosphericDensity < 0.1 then boost = 10000 end\r\n            --tmp = tmp + (((self.world.forward * self.direction.y) * self.fMax) * self.throttle)\r\n            tmp = tmp  + (self.world.forward * self.MaxKinematics.Forward) * self.throttle\r\n        end\r\n        if self.direction.y < 0 then\r\n            tmp = tmp  - (self.world.forward * self.MaxKinematics.Backward) * self.throttle\r\n        end\r\n        --Vertical\r\n        if self.direction.z > 0 then\r\n            tmp = tmp + self.world.up * self.MaxKinematics.Up\r\n            if not self.ignoreVerticalThrottle then tmp = tmp * self.throttle end\r\n        end\r\n        if self.direction.z < 0 then\r\n            tmp = tmp + -self.world.up * self.MaxKinematics.Down\r\n            if not self.ignoreVerticalThrottle then tmp = tmp * self.throttle end\r\n        end\r\n        --Rotation\r\n        if self.rotation.x ~= 0 then\r\n            self.scaleRotation()\r\n            atmp = atmp + ((self.world.forward:cross(self.world.up) * self.rotation.x) * self.rotationSpeed)\r\n            if self.targetVectorAutoUnlock then\r\n                self.targetVector = nil\r\n                self.followGravity = false\r\n                self.altitudeHold = 0\r\n            end\r\n        end\r\n        if self.rotation.y ~= 0 then\r\n            self.scaleRotation()\r\n            atmp = atmp + ((self.world.up:cross(self.world.right) * self.rotation.y) * self.rotationSpeed)\r\n        end\r\n        if self.rotation.z ~= 0 then\r\n            self.scaleRotation()\r\n            atmp = atmp + ((self.world.forward:cross(self.world.right) * self.rotation.z) * self.rotationSpeed)\r\n            --if self.targetVectorAutoUnlock then\r\n            --    self.targetVector = nil\r\n            --    self.altitudeHold = 0\r\n            --end\r\n        end\r\n        if self.followGravity and self.rotation.x == 0 then\r\n\r\n            --system.print(tostring(self.direction))\r\n              --local current = self.localVelocity:len() * self.mass\r\n              --local scale = nil\r\n              --if ship.localVelocity:len() > 10 then\r\n              --    scale = self.gravityFollowSpeed * math.min(math.max(current / self.fMax, 0.1), 1) * 10\r\n              --else\r\n              --    scale = self.gravityFollowSpeed\r\n              --end\r\n              --local gFollow = (self.world.up:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())))\r\n              --local gFollow = (self.world.up:cross(-self.world.gravity))\r\n              local gFollow = (self.world.up:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())))\r\n              local scale = 1\r\n              if self.pocket then\r\n                  if self.direction.x < 0  then\r\n                      scale = 0.25\r\n                      gFollow = gFollow + ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition()) * 0.25)\r\n                      --gFollow = gFollow + ship.world.right:cross(-self.world.gravity * 0.25)\r\n                  elseif self.direction.x > 0  then\r\n                      scale = 0.25\r\n                      gFollow = gFollow - ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition()) * 0.25)\r\n                      --gFollow = gFollow - ship.world.right:cross(-self.world.gravity * 0.25)\r\n                  elseif self.direction.y < 0  then\r\n                      gFollow = gFollow + ship.world.forward:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition()) * 0.25)\r\n                      --gFollow = gFollow + ship.world.forward:cross(-self.world.gravity * 0.25)\r\n                  end\r\n              end\r\n              gFollow = gFollow * scale\r\n              atmp = atmp + gFollow\r\n          end\r\n\r\n\r\n\t\tif self.altitudeHold ~= 0 then\r\n            local deltaAltitude =  self.altitudeHold - self.altitude\r\n            local waypoint = moveWaypointY(self.altitudeHold, (self.world.velocity:len() * 3) + 50)\r\n            self.targetVector = (waypoint - self.world.position ):normalize()\r\n            atmp = atmp - (self.world.right:cross(self.world.forward:cross(self.world.gravity:normalize())) * self.rotationSpeed * 9) - ((self.AngularVelocity * 3) - (self.AngularAirFriction * 3))\r\n            tmp = tmp - ((self.nearestPlanet:getGravity(construct.getWorldPosition()) * self.mass) * deltaAltitude)\r\n        end\r\n        if self.targetVector == nil then self.gotoLock = nil end\r\n        if self.gotoLock ~= nil then\r\n\r\n            local targetRadius = ap_stop_distance\r\n            if not self.inertialDampening then self.inertialDampening = true end\r\n            self.direction.y = 0\r\n            self.vtolPriority = true\r\n            local speed = self.constructMaxSpeed\r\n\r\n            local dest = (self.world.position - self.gotoLock):normalize()\r\n\r\n            self.targetDist = math.abs((self.world.position - self.gotoLock):len() - targetRadius)\r\n            --local v = self.getTrajectory(self.targetDist)\r\n            local v = self.simulationPos\r\n            --local v = self.world.position - ((self.world.position - self.world.velocity):normalize() * self.targetDist)\r\n            self.trajectoryDiff = sMovingAverage25((v - self.gotoLock):len())\r\n\r\n            local force = tmp:dot(self.world.position - self.gotoLock)\r\n\r\n            self.brakeDistance, self.accelTime = kinematics.computeDistanceAndTime((self.world.velocity + self.world.gravity):len(), 0, self.inertialMass, force, 0, self.maxBrake)\r\n\r\n            if self.brakeDistance >= (self.targetDist - targetRadius) or self.targetDist <= targetRadius then\r\n                speed = self.targetDist - self.brakeDistance\r\n                self.stopping = true\r\n            end\r\n            if self.trajectoryDiff > 10 and self.world.velocity:len() > 250 / 3.6 and not self.stopping then\r\n            --    self.inertialDampening = false\r\n--\r\n            --    local a = self.targetDist\r\n            --    local b = (self.world.position - v):len()\r\n            --    local c = (self.gotoLock - v):len()\r\n--\r\n            --    self.deviationAngle = utils.clamp(math.deg(self.world.forward:angle_between(v)),0,45)\r\n--\r\n            --    local tri = getGapFromAngle(a,b,0)\r\n            --    if utils.round(self.deviationAngle) ~= 0 and a > c and b > c then\r\n            --        --system.print(\"adjust...\")\r\n            --        tri = getGapFromAngle(a,b,self.deviationAngle)\r\n            --    end\r\n            --\r\n            --    --local aa = moveWaypoint(self.world.position, v, self.targetDist)\r\n            --    --local ab = moveWaypoint(self.gotoLock, aa, -c)\r\n--\r\n            --    --self.debug = ab\r\n            --    self.debug = moveWaypoint(self.gotoLock,v,tri)\r\n            --    dest = (self.world.position - self.debug):normalize()\r\n            --    self.targetVector = -(self.world.position - self.debug):normalize()\r\n            --else\r\n            --    dest = (self.world.position - self.gotoLock):normalize()\r\n            --    self.targetVector = -dest\r\n            end\r\n            dest = (self.world.position - self.gotoLock):normalize()\r\n            self.targetVector = -dest\r\n            if self.targetDist < 1 then\r\n                speed = 0\r\n                self.gotoLock = nil\r\n                self.targetVector = nil\r\n                self.stopping = false\r\n            end\r\n            --self.ETA = math.sqrt((2*self.targetDist + targetRadius)/sMovingAverage15(self.world.acceleration:len()))\r\n            self.ETA = (self.targetDist / self.world.velocity:len()) + self.accelTime\r\n            tmp = tmp - dest * self.mass * utils.clamp(self.targetDist * 3.6,0.3,((math.abs(speed)/3.6) * self.IDIntensity))\r\n        end\r\n\r\n        if self.alternateCM then\r\n          local speed = (self.cruiseSpeed / 3.6)\r\n          local dot = self.world.forward:dot(self.airFriction)\r\n          --system.print(tostring(vec3(self.world.forward)))\r\n          local modifiedVelocity = (speed - dot)\r\n          local desired = self.world.forward * modifiedVelocity\r\n          local delta = (desired - self.world.velocity)\r\n          --system.print(tostring(vec3(self.world.acceleration)))\r\n          tmp = tmp + (delta * self.mass)\r\n        end\r\n        if self.inertialDampening then\r\n            local currentShipMomentum = self.localVelocity\r\n            local delta = vec3(0,0,0)\r\n            local moveDirection = self.direction or vec3(0,0,0)\r\n\r\n            if moveDirection.x == 0 then delta.x = currentShipMomentum.x end\r\n            if moveDirection.y == 0 then delta.y = currentShipMomentum.y end\r\n            if moveDirection.z == 0 then delta.z = currentShipMomentum.z end\r\n\r\n            delta = self.localToRelative(delta, self.world.up, self.world.right, self.world.forward)\r\n            tmp = tmp - (delta * (self.mass * self.IDIntensity))\r\n\r\n        end\r\n\r\n        if self.brake then\r\n            local velocityLen = self.world.velocity:len()\r\n            tmp =\r\n                -self.world.velocity * self.mass *\r\n                math.max(self.brakingFactor * math.max(1, velocityLen * 0.5), velocityLen * velocityLen)\r\n        end\r\n        if self.targetVector ~= nil then\r\n            local vec = vec3(self.world.forward.x, self.world.forward.y, self.world.forward.z)\r\n            if type(self.targetVector) == \"function\" then\r\n                vec = self.targetVector()\r\n            elseif type(self.targetVector) == \"table\" then\r\n                vec = self.targetVector\r\n            end\r\n\r\n            local damp = self.mass * 0.000001 * 2 + 4\r\n            atmp = atmp + (self.world.forward:cross(vec) * self.rotationSpeedMax) - ((self.AngularVelocity * damp) - (self.AngularAirFriction * damp))\r\n        end\r\n\r\n        -- must be applied last\r\n        if self.counterGravity then\r\n            if self.direction.z >= 0 then\r\n                tmp = tmp - self.nearestPlanet:getGravity(construct.getWorldPosition()) * self.mass\r\n            end\r\n        end\r\n\r\n        atmp = atmp - ((self.AngularVelocity * 2) - (self.AngularAirFriction * 2))\r\n        tmp = tmp / self.mass\r\n\r\n        if self.controlMode ~= unit.getControlMode() then\r\n            self.controlMode = unit.getControlMode()\r\n            if unit.getControlMode() == 0 then\r\n                self.tempCruise = self.cruiseSpeed\r\n                self.cruiseSpeed = 0\r\n                self.throttle = self.tempThrottle\r\n                self.alternateCM = false\r\n            end\r\n            if unit.getControlMode() == 1 then\r\n                self.tempThrottle = self.throttle\r\n                self.throttle = 0\r\n                --system.print(\"Velocity = \"..tostring(math.round(self.world.velocity:len(), 100)))\r\n                --self.cruiseSpeed = math.round(self.world.velocity:len() * 3.6, 100)\r\n                self.alternateCM = true\r\n            end\r\n        end\r\n\r\n        if self.disableVtol then\r\n            self.disabledTags = \"vtol\"\r\n        else\r\n            self.disabledTags = \"\"\r\n        end\r\n\r\n        self.control.setEngineCommand(\"all\",\r\n                                        {tmp:unpack()}, {atmp:unpack()}, false, false,\r\n                                        self.priorityTags1,\r\n                                        self.priorityTags2,\r\n                                        self.priorityTags3)\r\n        self.control.setEngineCommand(self.disabledTags)\r\n        self.thrustVec = self.worldToLocal(tmp)\r\n        atmp = vec3(0, 0, 0)\r\n        tmp = vec3(0, 0, 0)\r\n        lastUpdate = system.getArkTime()\r\n    end\r\n\r\n    return self\r\nend\r\n\r\nship = STEC(core, unit)",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "12"
    },
    {
      "code": "--@class SHUD\r\nvec2 = require('cpml/vec2')\r\nmat4 = require(\"cpml/mat4\")\r\n -- For AGG\r\nlocal format = string.format\r\n\r\nfunction round2(num, numDecimalPlaces)\r\n    if num ~= nil then\r\n    return tonumber(string.format(\"%.\" .. (numDecimalPlaces or 0) .. \"f\", num))\r\n        end\r\nend\r\n\r\nfunction SpeedConvert(value)\r\n    if not value or value == 0 then return {0,\"00\",\"km/h\"} end\r\n    if value > 5000 then\r\n        local ending = tonumber(tostring(round2(value/55.55, 2)):match(\"%.(%d+)\"))\r\n        ending = string.format(\"%02d\",ending)\r\n        return {round2(value/55.55),ending,\"su/h\"}\r\n    end\r\n    local ending = tonumber(tostring(round2(value/3.6, 2)):match(\"%.(%d+)\"))\r\n    ending = string.format(\"%02d\",ending)\r\n    return {round2(value*3.6),ending,\"km/h\"}\r\nend\r\n\r\nfunction CruiseControl(value)\r\n    local appliedCruise = 0\r\n\r\n\r\n    if ship.cruiseSpeed < 500 then appliedCruise = value * 10\r\n    elseif ship.cruiseSpeed >= 500 and ship.cruiseSpeed <= 1999 then appliedCruise = value * 50\r\n    elseif ship.cruiseSpeed >= 2000 and ship.cruiseSpeed <= 9999 then appliedCruise = value * 100\r\n    elseif ship.cruiseSpeed >= 10000 then appliedCruise = value * 1000 end\r\n\r\n    local max = construct.getMaxSpeed()\r\n    ship.cruiseSpeed = utils.clamp(ship.cruiseSpeed + appliedCruise,-max*3.6,max*3.6)\r\nend\r\n\r\nfunction getControlMode()\r\n    if ship.alternateCM then\r\n        return \"Cruise\"\r\n    else\r\n        return \"Travel\"\r\n    end\r\nend\r\n\r\nfunction SHUDMenuItem(content, action, update)\r\n    local self = {}\r\n    self.Enabled = true\r\n    self.Active = false\r\n    self.Content = content\r\n    self.Class = \"\"\r\n    self.Action = action or function(system, unit, self) end\r\n    self.Update = update or function(system, unit, self) end\r\n\r\n    function self.Disable()\r\n        self.Enabled = false\r\n        return self\r\n    end\r\n\r\n    function self.Enable()\r\n        self.True = false\r\n        return self\r\n    end\r\n\r\n    function self.Lock()\r\n        SHUD.ScrollLock = true\r\n        self.Active = true\r\n        self.Class = \"locked\"\r\n        return self\r\n    end\r\n\r\n    function self.Unlock()\r\n        SHUD.ScrollLock = false\r\n        self.Active = false\r\n        self.Class = \"\"\r\n        return self\r\n    end\r\n\r\n    return self\r\nend\r\n\r\n\r\n\r\nSHUD =\r\n(function()\r\n    local self = {}\r\n    self.Enabled = false\r\n    self.FreezeUpdate = false\r\n    self.IntroPassed = false\r\n    self.FOV = system.getCameraHorizontalFov()\r\n    self.ScreenW = system.getScreenWidth()\r\n    self.ScreenH = system.getScreenHeight()\r\n    self.Resolution = vec2(self.ScreenW, self.ScreenH)\r\n    self.Opacity = 1\r\n\r\n    self.SvgMinX = -round((self.ScreenW / 4) / 2,0)\r\n    self.SvgMinY = -round((self.ScreenH / 4) / 2,0)\r\n    self.SvgWidth = round(self.ScreenW / 4,0)\r\n    self.SvgHeight = round(self.ScreenH / 4,0)\r\n\r\n    self.Markers = {}\r\n\r\n    self.MarkerBuffer = {}\r\n\r\n    function self.worldToScreen(pos)\r\n        local P = mat4():perspective(self.FOV, self.ScreenW/self.ScreenH, 0.1, 100000)\r\n        local adjustedPos = ship.world.position - vec3(player.getWorldPosition())\r\n        local V = mat4():look_at(adjustedPos, adjustedPos + ship.world.forward, ship.world.up)\r\n\r\n        local pos = V * P * { pos.x, pos.y, pos.z, 1 }\r\n\r\n        pos[1] = pos[1] / pos[4] * 0.5 + 0.5\r\n        pos[2] = pos[2] / pos[4] * 0.5 + 0.5\r\n\r\n        pos[1] = pos[1] * 100\r\n        pos[2] = pos[2] * 100\r\n\r\n        return vec3(pos[1], pos[2], pos[3])\r\n    end\r\n\r\n    local SMI = SHUDMenuItem\r\n    local DD = DynamicDocument\r\n\r\n    function self.UpdateMarkers()\r\n        self.MarkerBuffer = {}\r\n        for i=1,#self.Markers do\r\n            local m = self.Markers[i]\r\n            local marker = {}\r\n            local p = vec3(0,0,0)\r\n            if type(m.Position) == \"function\" then marker.pos = m.Position() p = m.Position() else marker.pos = m.Position p = m.Position end\r\n            marker.pos = self.worldToScreen(marker.pos)\r\n            marker.class = m.Class\r\n            marker.content = '&nbsp;'\r\n            if m.Name then marker.content = [[<div class=\"name\">]] .. m.Name .. [[</div>]] end\r\n            if m.ShowDistance then marker.content = marker.content .. [[<div class=\"distance\">]] .. round2((ship.world.position - p):len()) .. [[m</div>]] end\r\n            if marker.pos.z > 0 then self.MarkerBuffer[#self.MarkerBuffer + 1] = marker end\r\n        end\r\n    end\r\n\r\n    local function esc(x)\r\n        return (x:gsub(\"%%\", \"%%%%\"))\r\n    end\r\n\r\n    -- Begin Anti-Grav Stuff\r\n    if antigrav ~= nil then\r\n        antiGravState = false\r\n        antiGravBaseAlt = antigrav.getBaseAltitude()\r\n        antiGravSetPoint = antigrav.getBaseAltitude()\r\n        targetAlt = antigrav.getBaseAltitude()\r\n        antiGravAdjMultiplier = 100\r\n\r\n\r\n        function updateAGGState()\r\n            if antigrav.getState() == 1 then\r\n                antiGravState = true\r\n\r\n            else\r\n                antiGravState = false\r\n            end\r\n        end\r\n       antiGravSetPoint = 1000\r\n\r\n\r\n       function updateAGGBaseAlt()\r\n            antiGravBaseAlt = antigrav.getBaseAltitude()\r\n        end\r\n\r\n       function readAGGState()\r\n          local agjson = antigrav.getWidgetData()\r\n          local obj, pos, err = json.decode (agjson, 1, nil)\r\n          gvCurrentBaseAltitude = 0\r\n          gvCurrentAntiGPower = 0\r\n          gvCurrentAntiGravityField = 0\r\n\r\n          if err then\r\n            debugp (\"Error:\" .. err)\r\n          else\r\n            if type(obj) ==\"table\" then\r\n              gvCurrentBaseAltitude = math.floor(obj.baseAltitude)\r\n              gvCurrentAntiGPower = math.floor(obj.antiGPower * 100)\r\n              gvCurrentAntiGravityField = math.floor(obj.antiGravityField * 100)\r\n            end\r\n          end\r\n        end\r\n\r\n        showAG = false\r\n        function showAGToggle()\r\n           if showAG then\r\n               antigrav.showWidget()\r\n           else\r\n               antigrav.hideWidget()\r\n           end\r\n        end\r\n    end\r\n    -- End Anti-Grav Stuff\r\n\r\n    function self.MakeBooleanIndicator(varName)\r\n        local tmpl = [[<span class=\"right\">\r\n            <i dd-if=\"varName == true\">✓&nbsp;</i>\r\n            <i dd-if=\"varName == false\">✘&nbsp;</i>\r\n        </span>]]\r\n        return tmpl:gsub(\"varName\", esc(varName))\r\n    end\r\n\r\n    function self.MakeSliderIndicator(varName, suffix)\r\n        suffix = suffix or \"\"\r\n        local tmpl = [[<span class=\"right\">{{varName}}{{suffix}}<i>&udarr;&nbsp;</i></span>]]\r\n        return tmpl:gsub(\"varName\", esc(varName)):gsub(\"{{suffix}}\", esc(suffix))\r\n    end\r\n\r\n    function self.GenerateMenuLink(text, link)\r\n        return SMI(text..self.MenuIcon,  function() self.SelectMenu(link) end)\r\n    end\r\n\r\n    self.MenuIcon = [[<span class=\"right\"><i>&gt;&nbsp;</i></span>]]\r\n    self.BackButton = SMI([[<i>&lt;&nbsp;</i>&nbsp;]]..\"Back\", function() SHUD.Menu = SHUD.MenuList.prev SHUD.CurrentIndex = 1 end)\r\n    if antigrav ~= nil then\r\n        self.Menu = {\r\n            SMI(DD([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\", \"%\")),\r\n                function(_, _, w) if w.Active then w.Unlock() else w.Lock() end end,\r\n                function(system, _ , w) ship.throttle = utils.clamp(ship.throttle + (system.getMouseWheel() * 0.05),-1,1) end),\r\n            SMI(DD(\"<span>Mouse Steering<span>\" .. self.MakeBooleanIndicator(\"mouse.enabled\")),\r\n                function() mouse.enabled = not mouse.enabled if mouse.enabled then mouse.lock() else mouse.unlock() end end),\r\n            self.GenerateMenuLink(\"Flight Mode\", \"flightMode\"),\r\n            self.GenerateMenuLink(\"Anti-Gravity\", \"antigravity\"),\r\n            self.GenerateMenuLink(\"Stability Assist\", \"stability\"),\r\n            self.GenerateMenuLink(\"Vector Locking\", \"vectorLock\"),\r\n            self.GenerateMenuLink(\"Ship Stats\", \"shipStats\"),\r\n            SMI([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon, function() self.SelectMenu(\"hotkeys\") end)\r\n        }\r\n    else\r\n        self.Menu = {\r\n            SMI(DD([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\", \"%\")),\r\n                function(_, _, w) if w.Active then w.Unlock() else w.Lock() end end,\r\n                function(system, _ , w) ship.throttle = utils.clamp(ship.throttle + (system.getMouseWheel() * 0.05),-1,1) end),\r\n            SMI(DD(\"<span>Mouse Steering<span>\" .. self.MakeBooleanIndicator(\"mouse.enabled\")),\r\n                function() mouse.enabled = not mouse.enabled if mouse.enabled then mouse.lock() else mouse.unlock() end end),\r\n            self.GenerateMenuLink(\"Flight Mode\", \"flightMode\"),\r\n            self.GenerateMenuLink(\"Stability Assist\", \"stability\"),\r\n            self.GenerateMenuLink(\"Vector Locking\", \"vectorLock\"),\r\n            self.GenerateMenuLink(\"Planetary V-Lock\", \"planetaryVLock\"),\r\n            self.GenerateMenuLink(\"Ship Stats\", \"shipStats\"),\r\n            SMI([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon, function() self.SelectMenu(\"hotkeys\") end)\r\n    }\r\n    end\r\n    self.MenuList = {}\r\n    self.MenuList.flightMode = {}\r\n    self.MenuList.shipStats = {\r\n        SMI(DD([[<span>Core ID:</span><span class=\"right\">{{ship.id}}</span>]])).Disable(),\r\n        SMI(DD([[<span>Mass:</span><span class=\"right\">{{round2(ship.mass/1000,2)}} Ton</span>]])).Disable(),\r\n        SMI(DD([[<span>FMax:</span><span class=\"right\">{{round2(ship.fMax/1000,2)}} KN</span>]])).Disable(),\r\n        SMI(DD([[<span>Pos X:</span><span class=\"right\">{{round2(ship.world.position.x)}}</span>]])).Disable(),\r\n        SMI(DD([[<span>Pos Y:</span><span class=\"right\">{{round2(ship.world.position.y)}}</span>]])).Disable(),\r\n        SMI(DD([[<span>Pos Z:</span><span class=\"right\">{{round2(ship.world.position.z)}}</span>]])).Disable(),\r\n    }\r\n    if antigrav ~= nil then\r\n       self.MenuList.antigravity = {\r\n           SMI(DD(\"<span>AGG Toggle<span>\" .. self.MakeBooleanIndicator(\"antiGravState\")), function() antigrav.toggle() end),\r\n           SMI(DD([[<span>Multiplier<span>]]..self.MakeSliderIndicator(\"antiGravAdjMultiplier\", \"\")),\r\n               function(_, _, w) if w.Active then w.Unlock() else w.Lock() end end,\r\n               function(system, _ , w) antiGravAdjMultiplier = utils.clamp(antiGravAdjMultiplier + (system.getMouseWheel() * 10),1,500) end),\r\n           SMI(DD([[<span>Alt Setpoint<span>]]..self.MakeSliderIndicator(\"round2(targetAlt,0)\", \"m\")),\r\n               function(_, _, w) if w.Active then w.Unlock() else w.Lock() end end,\r\n               function(system, _ , w) targetAlt = utils.clamp(targetAlt + (system.getMouseWheel() * antiGravAdjMultiplier),1000,100000) antigrav.setBaseAltitude(targetAlt) end),\r\n           SMI(DD([[<span>Base Altitude:</span><span class=\"right\">{{round2(gvCurrentBaseAltitude,0)}}</span>]])).Disable(),\r\n           SMI(DD([[<span>HOLD:</span><span class=\"right\">{{gvCurrentAntiGPower}}%</span>]])).Disable(),\r\n           SMI(DD([[<span>AG Field:</span><span class=\"right\">{{gvCurrentAntiGravityField}}Es</span>]])).Disable(),\r\n           SMI(DD(\"<span>Show AG Widget<span>\" .. self.MakeBooleanIndicator(\"showAG\")), function() showAG = not showAG showAGToggle() end),\r\n       }\r\n         end\r\n\r\n    self.MenuList.stability = {\r\n        SMI(DD(\"<span>Gravity Suppression<span>\" .. self.MakeBooleanIndicator(\"ship.counterGravity\")), function() ship.counterGravity = not ship.counterGravity end),\r\n        SMI(DD(\"<span>Gravity Follow</span>\" .. self.MakeBooleanIndicator(\"ship.followGravity\")), function()  ship.targetVector = nil ship.followGravity = not ship.followGravity end),\r\n        SMI(DD(\"<span>Inertial Dampening<span>\" .. self.MakeBooleanIndicator(\"ship.inertialDampening\")), function() ship.inertialDampening = not ship.inertialDampening end),\r\n    }\r\n    self.MenuList.vectorLock = {\r\n        SMI(DD(\"<span>Auto Unlock<span>\" .. self.MakeBooleanIndicator(\"ship.targetVectorAutoUnlock\")), function() ship.targetVectorAutoUnlock = not ship.targetVectorAutoUnlock end),\r\n        SMI(\"Unlock\", function() ship.followGravity = false ship.targetVector = nil end),\r\n        SMI(\"Lock Prograde\", function() ship.followGravity = false ship.targetVector = ship.target.prograde end),\r\n        SMI(\"Lock Retrograde\", function() ship.followGravity = false ship.targetVector = ship.target.retrograde end),\r\n        SMI(\"Lock Radial\", function() ship.followGravity = false ship.targetVector = ship.target.radial end),\r\n        SMI(\"Lock Anti-Radial\", function() ship.followGravity = false ship.targetVector = ship.target.antiradial end),\r\n        SMI(\"Lock Normal\", function() ship.followGravity = false ship.targetVector = ship.target.normal end),\r\n        SMI(\"Lock Anti-Normal\", function() ship.followGravity = false ship.targetVector = ship.target.antinormal end)\r\n    }\r\n    self.MenuList.planetaryVLock = {\r\n        SMI(\"Lock Sancuary\", function() ship.followGravity = false ship.targetVector = ship.planets.sancuary end),\r\n        SMI(\"Lock Madis\", function() ship.followGravity = false ship.targetVector = ship.planets.madis end),\r\n        SMI(\"Lock Thades\", function() ship.followGravity = false ship.targetVector = ship.planets.thades end),\r\n        SMI(\"Lock Alioth\", function() ship.followGravity = false ship.targetVector = ship.planets.alioth end),\r\n        -- SMI(\"Lock Feli\", function() ship.followGravity = false ship.targetVector = ship.planets.feli end),\r\n        -- SMI(\"Lock Ion\", function() ship.followGravity = false ship.targetVector = ship.planets.ion end),\r\n        SMI(\"Lock Jago\", function() ship.followGravity = false ship.targetVector = ship.planets.jago end),\r\n        -- SMI(\"Lock Lacobus\", function() ship.followGravity = false ship.targetVector = ship.planets.lacobus end),\r\n        SMI(\"Lock Sicari\", function() ship.followGravity = false ship.targetVector = ship.planets.sicari end),\r\n        SMI(\"Lock Sinnen\", function() ship.followGravity = false ship.targetVector = ship.planets.sinnen end),\r\n        -- SMI(\"Lock Symeon\", function() ship.followGravity = false ship.targetVector = ship.planets.symeon end),\r\n        SMI(\"Lock Talemai\", function() ship.followGravity = false ship.targetVector = ship.planets.talemai end),\r\n        SMI(\"Lock Teoma\", function() ship.followGravity = false ship.targetVector = ship.planets.teoma end),\r\n    }\r\n    self.MenuList.hotkeys = {}\r\n\r\n    local fa = \"<style>\" .. CSS_SHUD .. \"</style>\"\r\n    self.fuel = nil\r\n    function getFuelRenderedHtml()\r\n        self.fuel = getFuelSituation()\r\n        local fuelHtml = \"\"\r\n\r\n        local mkTankHtml = (function (type, tank)\r\n            local tankLevel = 100 * tank.level\r\n            local tankLiters = tank.level * tank.specs.capacity()\r\n\r\n            -- return '<div class=\"fuel-meter fuel-type-' .. type .. '\"><hr class=\"fuel-level\" style=\"width:50%;\" />' .. tank.name .. '</div>'\r\n            --return '<div class=\"fuel-meter fuel-type-' .. type .. '\"><hr class=\"fuel-level\" style=\"width:' .. tankLevel .. '%%;\" />' .. tank.time .. ' (' .. math.ceil(tankLevel) .. '%%,)</div>'\r\n            return '<div class=\"fuel-meter fuel-type-' .. type .. '\"><hr class=\"fuel-level\" style=\"width:' .. tankLevel .. '%%;\" />' .. tank.time .. ' (' .. math.floor(tankLevel) .. '%%, ' .. math.floor(tankLiters) .. 'L)</div>'\r\n        end)\r\n\r\n        for _, tank in pairs(self.fuel.atmo) do fuelHtml = fuelHtml .. mkTankHtml(\"atmo\", tank) end\r\n        for _, tank in pairs(self.fuel.space) do fuelHtml = fuelHtml .. mkTankHtml(\"space\", tank) end\r\n        for _, tank in pairs(self.fuel.rocket) do fuelHtml = fuelHtml .. mkTankHtml(\"rocket\", tank) end\r\n\r\n        self.SHUDFuelHtml = fuelHtml\r\n    end\r\n\r\n\r\n    local fa = \"<style>\" .. CSS_SHUD .. \"</style>\"\r\n\r\n     --   <div style=\"position: absolute; display: block; left: {{SHUD.worldToScreen(SHUD.Markers[1].Position()).x}}%; top: 50%; height: 50vw; width: 50vw; transform: translate(-50%, -{{SHUD.worldToScreen(SHUD.Markers[1].Position()).y}}%); filter: drop-shadow(0px 3px 4px #000000);\">\r\n     --       <svg id=\"svg-1\" height=\"100%\" width=\"100%\" viewBox=\"{{SHUD.SvgMinX}} {{SHUD.SvgMinY}} {{SHUD.SvgWidth}} {{SHUD.SvgHeight}}\">\r\n     --           <ellipse ry=\"7\" rx=\"7\" id=\"svg-1\" cy=\"0\" cx=\"0\" fill-opacity=\"null\" stroke-width=\"1\" stroke=\"#]]..primaryColor..[[\" fill=\"none\"/>\r\n     --           <polyline points=\"0,7 0,12\" fill=\"none\" stroke=\"#]]..primaryColor..[[\" stroke-width=\"1.5px\" />\r\n     --           <polyline points=\"0,-7 0,-12\" fill=\"none\" stroke=\"#]]..primaryColor..[[\" stroke-width=\"1.5px\" />\r\n     --           <polyline points=\"7,0 12,0\" fill=\"none\" stroke=\"#]]..primaryColor..[[\" stroke-width=\"1.5px\" />\r\n     --           <polyline points=\"-7,0 -12,0\" fill=\"none\" stroke=\"#]]..primaryColor..[[\" stroke-width=\"1.5px\" />\r\n     --       </svg>\r\n     --   </div>\r\n\r\n\r\n\r\n    local template = DD(fa..[[\r\n    <div id=\"horizon\" style=\"opacity: {{SHUD.Opacity}};\">\r\n        <div id=\"artificialHorizon\">\r\n            <svg height=\"100%\" width=\"100%\" viewBox=\"{{SHUD.SvgMinX}} {{SHUD.SvgMinY}} {{SHUD.SvgWidth}} {{SHUD.SvgHeight}}\">\r\n                <g dd-if=\"ship.world.nearPlanet\" transform=\"translate(0,{{ ship.pitchRatio * 1200 }})\">\r\n                  <path dd-if=\"ship.world.nearPlanet\" d=\"M -150 0 Q -165 0 -170 10 M -150 0 -95 0\" stroke=\"#]]..primaryColor..[[\" fill=\"transparent\" stroke-width=\"1.5px\" />\r\n                  <path dd-if=\"ship.world.nearPlanet\" d=\"M 150 0 Q 165 0 170 10 M 150 0 95 0\" stroke=\"#]]..primaryColor..[[\" fill=\"transparent\" stroke-width=\"1.5px\" />\r\n                </g dd-if=\"ship.world.nearPlanet\">\r\n                <g dd-if=\"ship.world.nearPlanet\" transform=\"rotate({{ ship.rollDegrees * -1 }} 0,0)\">\r\n                   <polyline dd-if=\"ship.world.nearPlanet\" points=\"-95,0 -65,0\" fill=\"none\" stroke=\"#]]..primaryColor..[[\" stroke-width=\"1.5px\" />\r\n                   <polyline dd-if=\"ship.world.nearPlanet\" points=\"95,0 65,0\" fill=\"none\" stroke=\"#]]..primaryColor..[[\" stroke-width=\"1.5px\" />\r\n                </g dd-if=\"ship.world.nearPlanet\">\r\n              <path d=\"M -65 0 Q -50 0, -45 5 T -30 10 M -30 10 -10 10\" stroke=\"#]]..primaryColor..[[\" fill=\"transparent\" stroke-width=\"1.5px\" />\r\n              <path d=\"M 65 0 Q 50 0, 45 5 T 30 10 M 30 10 10 10\" stroke=\"#]]..primaryColor..[[\" fill=\"transparent\" stroke-width=\"1.5px\" />\r\n            </svg>\r\n        </div>\r\n\r\n\r\n        <div id=\"speedometerBar\">&nbsp;</div>\r\n           <div id=\"speedometer\">\r\n               <span class=\"display\">\r\n               \t<span class=\"major\">{{SpeedConvert(ship.world.velocity:len())[1]}}</span>\r\n               \t<span class=\"minor\">{{SpeedConvert(ship.world.velocity:len())[2]}}</span>\r\n               \t<span class=\"unit\">{{SpeedConvert(ship.world.velocity:len())[3]}}</span>\r\n               </span>\r\n               <span class=\"accel\">\r\n               \t<span class=\"major\">{{round2(ship.world.acceleration:len(), 1)}}</span>\r\n               \t<span class=\"unit\">m/s</span>\r\n               </span>\r\n               <span class=\"vertical\">\r\n               \t{{round2(ship.world.velocity:dot(-ship.world.gravity:normalize()), 1)}}\r\n               </span>\r\n               <span class=\"alt\">\r\n               \t{{round2(ship.altitude)}}m\r\n               </span>\r\n\r\n               <span class=\"misc\">ATM {{round2(ship.world.atmosphericDensity, 2)}} | G {{round2(ship.world.gravity:len(), 2)}}m/s</span>\r\n               <span dd-if=\"not ship.alternateCM\" class=\"throttle\">Throttle {{round2(ship.throttle * 100)}}%</span>\r\n\t\t     <span dd-if=\"ship.alternateCM\" class=\"throttle\">Cruise {{round2(ship.cruiseSpeed)}} km/h</span>\r\n            </div>\r\n\r\n            <div id=\"horizon-menu\">\r\n                {{_SHUDBUFFER}}\r\n            </div>\r\n\r\n            </div>\r\n        <div id=\"fuelTanks\">{{ SHUD.SHUDFuelHtml }}</div>\r\n\r\n    </div>\r\n\r\n    ]])\r\n    local itemTemplate = [[<div class=\"item {{class}}\">{{content}}</div>]]\r\n    function self.SelectMenu(menuName)\r\n        if not SHUD.MenuList[menuName] then error(\"[SHUD] Undefined menu: \" .. menuName) end\r\n        SHUD.MenuList.prev = SHUD.Menu\r\n        SHUD.Menu = SHUD.MenuList[menuName]\r\n        SHUD.CurrentIndex = 1\r\n        if SHUD.Menu[#SHUD.Menu] ~= SHUD.BackButton then table.insert(SHUD.Menu, SHUD.BackButton) end\r\n    end\r\n\r\n    function self.Select()\r\n        if not self.Enabled then return end\r\n        if #self.Menu < 1 then\r\n            return\r\n        end\r\n        self.Menu[self.CurrentIndex].Action(self.system, self.unit, self.Menu[self.CurrentIndex])\r\n    end\r\n\r\n    function self.Render()\r\n        local buffer = \"\"\r\n        local altHoldDisplay\r\n\r\n        if ship.altitudeHold ~= 0 then\r\n            altHoldDisplay = ship.altitudeHold\r\n        else\r\n            altHoldDisplay = \"OFF\"\r\n        end\r\n        if self.Enabled then\r\n            for i = 1, #self.Menu do\r\n                local item = self.Menu[i]\r\n                if item.Active then item.Update(self.system, self.unit, item) end\r\n                local lb = itemTemplate\r\n                local cls = \"\"\r\n                local content = item.Content\r\n                if content.Read then\r\n                    content = content.Read()\r\n                end\r\n                content = esc(content)\r\n                if self.CurrentIndex == i then\r\n                    cls = \"active\"\r\n                end\r\n                if not item.Enabled then cls = cls .. \" disabled\" end\r\n                lb = lb:gsub(\"{{class}}\", cls .. \" \" .. item.Class)\r\n                lb = lb:gsub(\"{{content}}\", content)\r\n                buffer = buffer .. lb\r\n            end\r\n            _ENV[\"_SHUDBUFFER\"] = esc(buffer)\r\n        else\r\n            ship.frozen = not player.isFrozen()\r\n            if unit.isRemoteControlled() then\r\n            \t_ENV[\"_SHUDBUFFER\"] = DD([[<div class=\"item helpText\">Press ]] .. \"[\" .. self.system.getActionKeyName(\"speedup\") .. \"]\" .. [[ to  toggle menu</div>[[\r\n                        <div class=\"item helpText\"><span>Altitude Hold: </span><span class=\"right\">]] .. altHoldDisplay .. [[</span></div>\r\n            \t        <div class=\"item helpText\"><span>Character movement:</span>]].. self.MakeBooleanIndicator(\"ship.frozen\") .. [[</div>\r\n            \t        <div class=\"item helpText\"><span>Inertial Dampening:</span>]].. self.MakeBooleanIndicator(\"ship.inertialDampening\") .. [[</div>\r\n                        <div class=\"item helpText\"><span>VTOL Priority:</span>]].. self.MakeBooleanIndicator(\"ship.vtolPriority\") .. [[</div>\r\n            \t        <div class=\"item helpText\"><span>Gravity Follow:</span>]].. self.MakeBooleanIndicator(\"ship.followGravity\") .. [[</div>\r\n            \t        <div class=\"item helpText\"><span>Gravity Supression:</span>]].. self.MakeBooleanIndicator(\"ship.counterGravity\") .. [[</div>\r\n            \t        <div class=\"item helpText\"><span>Control Mode:</span><span class=\"right\">{{keybindPreset}}</span></div>\r\n            \t        ]]).Read()\r\n            else\r\n                _ENV[\"_SHUDBUFFER\"] = DD([[<div class=\"item helpText\">Press ]] .. \"[\" .. self.system.getActionKeyName(\"speedup\") .. \"]\" .. [[ to  toggle menu</div>[[\r\n                        <div class=\"item helpText\"><span>Altitude Hold: </span><span class=\"right\">]] .. altHoldDisplay .. [[</span></div>\r\n            \t        <div class=\"item helpText\"><span>Inertial Dampening:</span>]].. self.MakeBooleanIndicator(\"ship.inertialDampening\") .. [[</div>\r\n                        <div class=\"item helpText\"><span>VTOL Priority:</span>]].. self.MakeBooleanIndicator(\"ship.vtolPriority\") .. [[</div>\r\n            \t        <div class=\"item helpText\"><span>Gravity Follow:</span>]].. self.MakeBooleanIndicator(\"ship.followGravity\") .. [[</div>\r\n            \t        <div class=\"item helpText\"><span>Gravity Supression:</span>]].. self.MakeBooleanIndicator(\"ship.counterGravity\") .. [[</div>\r\n            \t        <div class=\"item helpText\"><span>Control Mode:</span><span class=\"right\">{{keybindPreset}}</span></div>\r\n            \t        ]]).Read()\r\n             end\r\n        end\r\n        if not self.FreezeUpdate then self.system.setScreen(template.Read()) end\r\n    end\r\n\r\n    function self.Update()\r\n        if unit.isRemoteControlled() then\r\n            if player.isFrozen() or self.Enabled then\r\n                self.Opacity = 1\r\n            else\r\n                self.Opacity = 0.5\r\n            end\r\n        end\r\n        if not self.ScrollLock and self.Enabled then\r\n            local wheel = system.getMouseWheel()\r\n            if wheel ~= 0 then\r\n                self.CurrentIndex = self.CurrentIndex - wheel\r\n                if self.CurrentIndex > #self.Menu then self.CurrentIndex = 1\r\n                elseif self.CurrentIndex < 1 then self.CurrentIndex = #self.Menu end\r\n            end\r\n        elseif not self.Enabled then\r\n            --if ship.controlMode == 0 or not ship.alternateCM then\r\n            --if player.isFrozen() then\r\n            local mw = system.getMouseWheel()\r\n            if ship.direction.y == 0 and mw ~= 0 then ship.direction.y = 1 end\r\n            if not ship.alternateCM then\r\n                ship.throttle = utils.clamp(ship.throttle + (mw * 0.05),-1,1)\r\n            elseif ship.alternateCM then\r\n                --ship.cruiseSpeed = utils.clamp(ship.cruiseSpeed + (system.getMouseWheel() * 10),-29999,29999)\r\n                CruiseControl(mw)\r\n            end\r\n            --end\r\n        end\r\n        self.UpdateMarkers()\r\n    end\r\n\r\n    function self.Init(system, unit, keybinds)\r\n        self.system = system\r\n        self.unit = unit\r\n        self.CurrentIndex = 1\r\n        self.ScrollLock = false\r\n        system.showScreen(true)\r\n        unit.hideWidget()\r\n        local keys = keybinds.GetNamedKeybinds()\r\n        self.MenuList.hotkeys = {}\r\n        for i=1,#keys do\r\n            local key = keys[i]\r\n            table.insert(self.MenuList.hotkeys, SMI([[<span>]]..key.Name..[[</span><span class=\"right\">]]..self.system.getActionKeyName(key.Key)..[[</span>]]).Disable())\r\n        end\r\n\r\n        self.MenuList.flightMode = {}\r\n        for k,v in pairs(keybindPresets) do\r\n            table.insert(self.MenuList.flightMode,\r\n            SMI(string.lower(k), function()\r\n                self.Init(self.system, self.unit, v)\r\n                keybindPreset = k\r\n                keybindPresets[keybindPreset].Init()\r\n            end))\r\n        end\r\n\r\n        keybinds.Init()\r\n    end\r\n\r\n    return self\r\nend)()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "13"
    },
    {
      "code": "--@class MouseMovement\r\n--[[\r\n    Shadow Templar Mouse Movement\r\n    Version 1.2\r\n\r\n    Requires: STEC\r\n    Note: Always apply() before STEC.apply() !\r\n]]\r\n\r\nfunction STMM(stec, system)\r\n    local self = {}\r\n    self.enabled = true\r\n    self.enableX = true\r\n    self.enableY = true\r\n    self.sensitivity = 0.005\r\n    self.threshold = 0.2\r\n    self.deltaClamp = 3000\r\n    self.recenterSpeed = 20\r\n    self.deltaPos = vec3(0, 0, 0)\r\n    self.system = system\r\n\r\n    local isLocked = false\r\n\r\n    function self.lock()\r\n        isLocked = true\r\n        system.lockView(true)\r\n    end\r\n\r\n    function self.unlock()\r\n        isLocked = false\r\n        system.lockView(false)\r\n    end\r\n\r\n    function self.isLocked()\r\n        return isLocked\r\n    end\r\n\r\n    function self.toggleLock()\r\n        if self.isLocked() then self.unlock() else self.lock() end\r\n    end\r\n\r\n    function clamp(n, min, max)\r\n        return math.min(max, math.max(n, min))\r\n    end\r\n\r\n    function withinThreshold(n ,threshold)\r\n        return (n > threshold and n > 0) or (n < -threshold and n < 0)\r\n    end\r\n\r\n    function self.apply()\r\n        if not self.enabled then return end\r\n        self.deltaPos = ( self.deltaPos - ( self.deltaPos / self.recenterSpeed )) - vec3(self.system.getMouseDeltaX() * self.sensitivity, self.system.getMouseDeltaY() * self.sensitivity, 0)\r\n        self.deltaPos = vec3(clamp(self.deltaPos.x, -self.deltaClamp, self.deltaClamp), clamp(self.deltaPos.y, -self.deltaClamp, self.deltaClamp), 0)\r\n        if withinThreshold(self.deltaPos.x, self.threshold) then\r\n             if self.enableX then stec.rotation.z = -self.deltaPos.x end\r\n        else\r\n            if self.enableX then stec.rotation.z = 0 end\r\n        end\r\n        if withinThreshold(self.deltaPos.y, self.threshold) then\r\n            if self.enableY then stec.rotation.x = self.deltaPos.y end\r\n        else\r\n            if self.enableY then stec.rotation.x = 0 end\r\n        end\r\n    end\r\n    self.lock()\r\n    return self\r\nend\r\n\r\nmouse = STMM(ship, system)\r\n",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "14"
    },
    {
      "code": "--@class STEC_Config\r\n\r\nship.inertialDampening = inertialDampening\r\nship.followGravity = followGravity\r\nship.counterGravity = counterGravity\r\nship.rotationSpeed = rotationMin\r\nship.rotationSpeedMin = rotationMin\r\nship.rotationSpeedMax = rotationMax\r\nship.rotationStep = rotationStep\r\n\r\nlocal landing = false\r\nlocal shiftLock = false\r\n\r\nfunction softLanding()\r\n    if landing then\r\n        ship.counterGravity = false\r\n        ship.inertialDampening = true\r\n        ship.followGravity = true\r\n        ship.direction.y = 0\r\n        ship.direction.x = 0\r\n        unit.extendLandingGears()\r\n        ship.throttle = 0\r\n        if unit.getControlMode() == 1 then\r\n            unit.cancelCurrentControlMasterMode()\r\n        end\r\n    else\r\n        ship.counterGravity = true\r\n        ship.inertialDampening = false\r\n        unit.retractLandingGears()\r\n    end\r\nend\r\n\r\nsoftLanding()\r\n\r\nfunction holdAlt()\r\n    if ship.altitudeHold == 0 then\r\n        ship.altitudeHold = round2(ship.altitude,0)\r\n        --ship.inertialDampening = true\r\n        system.print(\"altitudeHold: \"..round2(ship.altitudeHold,0))\r\n\r\n    else\r\n        ship.targetVector = nil\r\n        ship.altitudeHold = 0\r\n        --ship.inertialDampening = false\r\n        system.print(\"Altitude Hold OFF\")\r\n    end\r\nend\r\n\r\nfunction goButton()\r\n    ship.direction.y = 1\r\n    if not ship.alternateCM then\r\n        -- Set throttle to 100% or 0\r\n        if ship.throttle ~= 0 then\r\n            ship.throttle = 0\r\n        else\r\n            ship.throttle = 1\r\n        end\r\n    else\r\n        -- Set cruise speed to preset or 0\r\n        if ship.cruiseSpeed ~= goButtonSpeed then\r\n            ship.cruiseSpeed = goButtonSpeed\r\n        elseif ship.cruiseSpeed == goButtonSpeed then\r\n            ship.cruiseSpeed = 0\r\n        end\r\n    end\r\nend\r\n\r\nfunction switchFlightMode(flightMode)\r\n    SHUD.Init(system, unit, keybindPresets[flightMode])\r\n    keybindPreset = flightMode\r\n    if flightModeDb then flightModeDb.setStringValue(\"flightMode\",flightMode) end\r\nend\r\n\r\nfunction math.sign(v)\r\n    return (v >= 0 and 1) or -1\r\nend\r\nfunction math.round(v, bracket)\r\n    bracket = bracket or 1\r\n    return math.floor(v/bracket + math.sign(v) * 0.5) * bracket\r\nend\r\n\r\nfunction switchControlMode()\r\n    if ship.alternateCM == false then\r\n        ship.tempThrottle = ship.throttle\r\n        ship.throttle = 0\r\n        ship.cruiseSpeed = math.round(ship.world.velocity:len() * 3.6, 100)\r\n        ship.alternateCM = true\r\n\r\n    else\r\n        ship.tempCruise = ship.cruiseSpeed\r\n        ship.cruiseSpeed = 0\r\n        ship.throttle = ship.tempThrottle\r\n        ship.alternateCM = false\r\n    end\r\nend\r\n-- ::pos{0,2,40.4608,92.2665,4.3205}\r\n-- function gotoLock(a)\r\n--     --::pos{0,0,-17729.2293,198268.4583,43236.0477}\r\n--     if a ~= nil then\r\n--         if string.find(a, \"::pos\") ~= nil then\r\n--             x, y = helios:convertToBodyIdAndWorldCoordinates(a)\r\n--             local target = y\r\n--             --local target = helios:closestBody(a):convertToWorldCoordinates(a)\r\n--             system.print(tostring(vec3(target)))\r\n--             ship.followGravity = false\r\n--             ship.targetVector = (target - ship.world.position):normalize()\r\n--             ship.gotoLock = target\r\n--             ship.stopping = false\r\n--             system.print(\"Target lock: \"..a)\r\n--             system.setWaypoint(a)\r\n--         end\r\n--     else\r\n--         local target = ship.nearestPlanet:convertToWorldCoordinates(\"::pos{0,0,-17729.2293,198268.4583,43236.0477}\")\r\n--         system.print(tostring(vec3(target)))\r\n--         ship.followGravity = false\r\n--         ship.targetVector = (target - ship.world.position):normalize()\r\n--         ship.gotoLock = target\r\n--         ship.stopping = false\r\n--         system.print(\"Target lock: ::pos{0,0,-17729.2293,198268.4583,43236.0477}\")\r\n--         system.setWaypoint(\"::pos{0,0,-17729.2293,198268.4583,43236.0477}\")\r\n--     end\r\n-- end\r\n\r\n-- ::pos{0,2,40.4652,92.2361,101.1699}\r\n-- local tty = DUTTY\r\n-- tty.onCommand('goto', function(a)\r\n--     gotoLock(a)\r\n-- end)\r\n-- Testing commands to be removed\r\n-- tty.onCommand('goto1', function()\r\n--     gotoLock(\"::pos{0,0,41351.6719,205839.2344,51086.4180}\")\r\n-- end)\r\n-- tty.onCommand('goto2', function()\r\n--     gotoLock(\"::pos{0,0,-17729.2293,198268.4583,43236.0477}\")\r\n-- end)\r\n-- tty.onCommand('goto5su', function()\r\n--     gotoLock(\"::pos{0,0,439874.4688,-363701.4062,749901.8750}\")\r\n-- end)\r\n-- tty.onCommand('goto10su', function()\r\n--     gotoLock(\"::pos{0,0,910554.2500,-951981.0625,1494420.1250}\")\r\n-- end)\r\n-- tty.onCommand('home', function()\r\n--     gotoLock(\"::pos{0,2,28.4911,76.0307,132054.2656}\")\r\n-- end)\r\n-- tty.onCommand('madis', function()\r\n--     gotoLock(\"::pos{0,0,17465536.0000,22665536.0000,-34464.0000}\")\r\n-- end)\r\n\r\n--keybindPresets[\"mouse\"] = KeybindController()\r\n--keybindPresets[\"mouse\"].Init = function()\r\n--    mouse.enabled = true\r\n--    mouse.lock()\r\n--    ship.ignoreVerticalThrottle = true\r\n--    ship.throttle = 1\r\n--    ship.direction.y = 0\r\n--end\r\n\r\nkeybindPresets[\"standard\"] = KeybindController()\r\nkeybindPresets[\"standard\"].Init = function()\r\n    mouse.enabled = false\r\n    mouse.unlock()\r\n    ship.ignoreVerticalThrottle = true\r\n    ship.ignoreHorizontalThrottle = true\r\n    ship.inertialDampening = false\r\n    ship.throttle = 0\r\n    ship.direction.y = 1\r\nend\r\n\r\nkeybindPresets[\"maneuver\"] = KeybindController()\r\nkeybindPresets[\"maneuver\"].Init = function()\r\n    keybindPreset = \"maneuver\"\r\n    mouse.enabled = false\r\n    mouse.unlock()\r\n    ship.ignoreVerticalThrottle = true\r\n    ship.inertialDampening = true\r\n    ship.followGravity = true\r\n    ship.throttle = 1\r\n    ship.direction.y = 0\r\nend\r\n\r\n-- Maneuver\r\nkeybindPresets[\"maneuver\"].keyDown.up.Add(function () ship.direction.z = 1 if not ship.counterGravity then ship.counterGravity = true end end) --space\r\nkeybindPresets[\"maneuver\"].keyUp.up.Add(function () ship.direction.z = 0 end) --space\r\nkeybindPresets[\"maneuver\"].keyDown.down.Add(function () ship.direction.z = -1 end) --c\r\nkeybindPresets[\"maneuver\"].keyUp.down.Add(function () ship.direction.z = 0 end) --c\r\n\r\nkeybindPresets[\"maneuver\"].keyDown.yawleft.Add(function () ship.rotation.z = -1 end) --a\r\nkeybindPresets[\"maneuver\"].keyUp.yawleft.Add(function () ship.rotation.z = 0 ship.rotationSpeed = ship.rotationSpeedMin end)--a\r\nkeybindPresets[\"maneuver\"].keyDown.yawright.Add(function () ship.rotation.z = 1 end) --d\r\nkeybindPresets[\"maneuver\"].keyUp.yawright.Add(function () ship.rotation.z = 0 ship.rotationSpeed = ship.rotationSpeedMin end) --d\r\n\r\nkeybindPresets[\"maneuver\"].keyDown.forward.Add(function () ship.direction.y = 1 end) --w\r\nkeybindPresets[\"maneuver\"].keyUp.forward.Add(function () ship.direction.y = 0 end) --w\r\n\r\n\r\nkeybindPresets[\"maneuver\"].keyDown.backward.Add(function () ship.direction.y = -1 end) --s\r\nkeybindPresets[\"maneuver\"].keyUp.backward.Add(function () ship.direction.y = 0 end) --s\r\n\r\nkeybindPresets[\"maneuver\"].keyDown.left.Add(function () ship.direction.x = -1  end) --q\r\nkeybindPresets[\"maneuver\"].keyUp.left.Add(function () ship.direction.x = 0  end) --q\r\nkeybindPresets[\"maneuver\"].keyDown.right.Add(function () ship.direction.x = 1  end) --e\r\nkeybindPresets[\"maneuver\"].keyUp.right.Add(function () ship.direction.x = 0      end) --e\r\n\r\nkeybindPresets[\"maneuver\"].keyDown.lshift.Add(function () shiftLock = true end,\"Shift Modifier\")\r\nkeybindPresets[\"maneuver\"].keyUp.lshift.Add(function () shiftLock = false end)\r\n\r\nkeybindPresets[\"maneuver\"].keyDown.brake.Add(function () ship.brake = true end)\r\nkeybindPresets[\"maneuver\"].keyUp.brake.Add(function () ship.brake = false end)\r\n\r\n--keybindPresets[\"maneuver\"].keyDown.stopengines.Add(function () if ship.direction.y == 1 then ship.direction.y = 0 else ship.direction.y = 1 end end, \"Cruise\")\r\nkeybindPresets[\"maneuver\"].keyUp.stopengines.Add(function () SHUD.Select() if not SHUD.Enabled then if ship.direction.y == 1 then ship.direction.y = 0 else ship.direction.y = 1 end end end, \"Cruise\")\r\n\r\nkeybindPresets[\"maneuver\"].keyUp.gear.Add(function () useGEAS = not useGEAS; updateGEAS() end)\r\nkeybindPresets[\"maneuver\"].keyUp.speedup.Add(function () SHUD.Enabled = not SHUD.Enabled end)\r\nkeybindPresets[\"maneuver\"].keyUp[\"option1\"].Add(function () ship.inertialDampening = not ship.inertialDampening end, \"Inertial Dampening\")\r\nkeybindPresets[\"maneuver\"].keyUp[\"option2\"].Add(function () ship.targetVector = nil ship.followGravity = not ship.followGravity end, \"Gravity Follow\")\r\nkeybindPresets[\"maneuver\"].keyUp[\"option3\"].Add(function () ship.followGravity = not ship.followGravity end, \"Gravity Follow\")\r\nkeybindPresets[\"maneuver\"].keyUp[\"option4\"].Add(function () ship.counterGravity = not ship.counterGravity end, \"Counter Gravity\")\r\nkeybindPresets[\"maneuver\"].keyUp[\"option5\"].Add(function () switchFlightMode(\"standard\") end, \"Switch Flight Mode\")\r\n\r\n-- Standard\r\nkeybindPresets[\"standard\"].keyDown.up.Add(function () ship.direction.z = 1 end)\r\nkeybindPresets[\"standard\"].keyUp.up.Add(function () ship.direction.z = 0 end)\r\nkeybindPresets[\"standard\"].keyDown.down.Add(function () ship.direction.z = -1 end)\r\nkeybindPresets[\"standard\"].keyUp.down.Add(function () ship.direction.z = 0 end)\r\n\r\nkeybindPresets[\"standard\"].keyDown.yawleft.Add(function () ship.rotation.z = -1 end)\r\nkeybindPresets[\"standard\"].keyUp.yawleft.Add(function () ship.rotation.z = 0 ship.rotationSpeed = ship.rotationSpeedMin end)\r\nkeybindPresets[\"standard\"].keyDown.yawright.Add(function () ship.rotation.z = 1 end)\r\nkeybindPresets[\"standard\"].keyUp.yawright.Add(function () ship.rotation.z = 0 ship.rotationSpeed = ship.rotationSpeedMin end)\r\n\r\nkeybindPresets[\"standard\"].keyDown.forward.Add(function () ship.rotation.x = -1 end)\r\nkeybindPresets[\"standard\"].keyUp.forward.Add(function () ship.rotation.x = 0 ship.rotationSpeed = ship.rotationSpeedMin end)\r\nkeybindPresets[\"standard\"].keyDown.backward.Add(function () ship.rotation.x = 1 end)\r\nkeybindPresets[\"standard\"].keyUp.backward.Add(function () ship.rotation.x = 0 ship.rotationSpeed = ship.rotationSpeedMin end)\r\n\r\nkeybindPresets[\"standard\"].keyDown.left.Add(function () ship.rotation.y = -1 end)\r\nkeybindPresets[\"standard\"].keyUp.left.Add(function () ship.rotation.y = 0 ship.rotationSpeed = ship.rotationSpeedMin end)\r\nkeybindPresets[\"standard\"].keyDown.right.Add(function () ship.rotation.y = 1 end)\r\nkeybindPresets[\"standard\"].keyUp.right.Add(function () ship.rotation.y = 0 ship.rotationSpeed = ship.rotationSpeedMin end)\r\n\r\nkeybindPresets[\"standard\"].keyDown.strafeleft.Add(function () ship.direction.x = -1 end)\r\nkeybindPresets[\"standard\"].keyUp.strafeleft.Add(function () ship.direction.x = 0 end)\r\nkeybindPresets[\"standard\"].keyDown.straferight.Add(function () ship.direction.x = 1 end)\r\nkeybindPresets[\"standard\"].keyUp.straferight.Add(function () ship.direction.x = 0 end)\r\n\r\n\r\nkeybindPresets[\"standard\"].keyDown.brake.Add(function () ship.brake = true ship.gotoLock = nil end)\r\nkeybindPresets[\"standard\"].keyUp.brake.Add(function () ship.brake = false end)\r\n\r\n--keybindPresets[\"standard\"].keyDown.stopengines.Add(function () if not SHUD.Enabled then mouse.unlock() mouse.enabled = false end end, \"Free Look\")\r\nkeybindPresets[\"standard\"].keyUp.stopengines.Add(function () SHUD.Select() if not SHUD.Enabled then goButton() end end, \"Go Button\")\r\n\r\nkeybindPresets[\"standard\"].keyUp.speedup.Add(function () SHUD.Enabled = not SHUD.Enabled end)\r\n\r\nkeybindPresets[\"standard\"].keyDown.lshift.Add(function () player.freeze(not player.isFrozen()) end,\"Freeze character\")\r\n\r\nkeybindPresets[\"standard\"].keyDown.lshift.Add(function () shiftLock = true end,\"Shift Modifier\")\r\nkeybindPresets[\"standard\"].keyUp.lshift.Add(function () shiftLock = false end)\r\n\r\nkeybindPresets[\"standard\"].keyUp[\"booster\"].Add(function () holdAlt() end, \"Altitude Hold\")\r\nkeybindPresets[\"standard\"].keyUp[\"gear\"].Add(function () landing = not landing; softLanding() end, \"Land\")\r\nkeybindPresets[\"standard\"].keyUp[\"option1\"].Add(function () ship.inertialDampening = not ship.inertialDampening end, \"Inertial Dampening\")\r\nkeybindPresets[\"standard\"].keyUp[\"option2\"].Add(function () ship.targetVector = nil ship.followGravity = not ship.followGravity end, \"Gravity Follow\")\r\nkeybindPresets[\"standard\"].keyUp[\"option3\"].Add(function () if ship.direction.y == 1 then ship.direction.y = 0 else ship.direction.y = 1 end end, \"Thrust on/off\")\r\nkeybindPresets[\"standard\"].keyUp[\"option4\"].Add(function () ship.counterGravity = not ship.counterGravity end, \"Counter Gravity\")\r\nkeybindPresets[\"standard\"].keyUp[\"option5\"].Add(function () switchFlightMode(\"maneuver\") end, \"Switch Flight Mode\")\r\nkeybindPresets[\"standard\"].keyUp[\"option6\"].Add(function () switchControlMode() end, \"Alternate Control Mode Switch\")\r\nkeybindPresets[\"standard\"].keyUp[\"option7\"].Add(function ()\r\n\tif shiftLock then\r\n\t\tship.disableVtol = not ship.disableVtol\r\n\telse\r\n\t\tship.vtolPriority = not ship.vtolPriority\r\n\tend\r\nend, \"VTOL Priority\")\r\nkeybindPresets[\"standard\"].keyUp[\"option8\"].Add(function () construct.setDockingMode(0); construct.undock() end,\"Undock\")\r\nkeybindPresets[\"standard\"].keyUp[\"option9\"].Add(function () flightModeDb.clear() system.print(\"DB Cleared\") end,\"Clear DB\")\r\n\r\n--[[ mouse\r\nkeybindPresets[\"mouse\"].keyDown.up.Add(function () landing = false softLanding() ship.direction.z = 1 end)\r\nkeybindPresets[\"mouse\"].keyUp.up.Add(function () ship.direction.z = 0 end)\r\nkeybindPresets[\"mouse\"].keyDown.down.Add(function () ship.direction.z = -1 end)\r\nkeybindPresets[\"mouse\"].keyUp.down.Add(function () ship.direction.z = 0 end)\r\n\r\nkeybindPresets[\"mouse\"].keyDown.yawleft.Add(function () ship.direction.x = -1 end)\r\nkeybindPresets[\"mouse\"].keyUp.yawleft.Add(function () ship.direction.x = 0 end)\r\nkeybindPresets[\"mouse\"].keyDown.yawright.Add(function () ship.direction.x = 1 end)\r\nkeybindPresets[\"mouse\"].keyUp.yawright.Add(function () ship.direction.x = 0 end)\r\n\r\nkeybindPresets[\"mouse\"].keyDown.forward.Add(function () ship.direction.y = 1 end)\r\nkeybindPresets[\"mouse\"].keyUp.forward.Add(function () ship.direction.y = 0 end)\r\nkeybindPresets[\"mouse\"].keyDown.backward.Add(function () ship.direction.y = -1 end)\r\nkeybindPresets[\"mouse\"].keyUp.backward.Add(function () ship.direction.y = 0 end)\r\n\r\nkeybindPresets[\"mouse\"].keyDown.left.Add(function () ship.rotation.y = -1 end)\r\nkeybindPresets[\"mouse\"].keyUp.left.Add(function () ship.rotation.y = 0 end)\r\nkeybindPresets[\"mouse\"].keyDown.right.Add(function () ship.rotation.y = 1 end)\r\nkeybindPresets[\"mouse\"].keyUp.right.Add(function () ship.rotation.y = 0 end)\r\n\r\nkeybindPresets[\"mouse\"].keyDown.brake.Add(function () ship.brake = true end)\r\nkeybindPresets[\"mouse\"].keyUp.brake.Add(function () ship.brake = false end)\r\n\r\n--keybindPresets[\"mouse\"].keyDown.stopengines.Add(function () if not SHUD.Enabled then mouse.unlock() mouse.enabled = false end end, \"Free Look\")\r\nkeybindPresets[\"mouse\"].keyUp.stopengines.Add(function () SHUD.Select() if not SHUD.Enabled then goButton() end end, \"Go Button\")\r\n\r\nkeybindPresets[\"mouse\"].keyUp.speedup.Add(function () SHUD.Enabled = not SHUD.Enabled end)\r\nkeybindPresets[\"mouse\"].keyUp.speeddown.Add(function () if mouse.enabled then mouse.unlock() mouse.enabled = false else mouse.lock() mouse.enabled = true end end, \"Mouse Steering\")\r\n\r\nkeybindPresets[\"mouse\"].keyDown.lshift.Add(function () player.freeze(not player.isFrozen()) end,\"Freeze character\")\r\n\r\nkeybindPresets[\"mouse\"].keyUp[\"booster\"].Add(function () holdAlt() end, \"Altitude Hold\")\r\nkeybindPresets[\"mouse\"].keyUp[\"gear\"].Add(function () landing = not landing; softLanding() end, \"Toggle Landing Gear\")\r\nkeybindPresets[\"mouse\"].keyUp[\"option1\"].Add(function () ship.inertialDampening = not ship.inertialDampening end, \"Inertial Dampening\")\r\nkeybindPresets[\"mouse\"].keyUp[\"option2\"].Add(function ()  ship.targetVector = nil ship.followGravity = not ship.followGravity end, \"Gravity Follow\")\r\nkeybindPresets[\"mouse\"].keyUp[\"option3\"].Add(function () if ship.direction.y == 1 then ship.direction.y = 0 else ship.direction.y = 1 end end, \"keyboard Control\")\r\nkeybindPresets[\"mouse\"].keyUp[\"option4\"].Add(function () ship.counterGravity = not ship.counterGravity end, \"Counter Gravity\")\r\nkeybindPresets[\"mouse\"].keyUp[\"option5\"].Add(function () switchFlightMode(\"standard\") end, \"Switch Flight Mode\")\r\nkeybindPresets[\"mouse\"].keyUp[\"option6\"].Add(function () switchControlMode() end, \"Alternate Control Mode Switch\")\r\n--]]\r\nkeybindPreset = \"standard\"\r\nif flightModeDb then\r\n\tif not flightModeDb.hasKey(\"flightMode\") then\r\n\t\tflightModeDb.setStringValue(\"flightMode\",\"standard\")\r\n\tend\r\n\tkeybindPreset = flightModeDb.getStringValue(\"flightMode\")\r\n\tif keybindPreset == \"keyboard\" then\r\n\t\tflightModeDb.clear()\r\n\t\tsystem.print(\"DB Cleared\")\r\n\t\tkeybindPreset = \"standard\"\r\n\tend\r\nelse\r\n\tsystem.print(\"No databank installed.\")\r\nend\r\n\r\nSHUD.Init(system, unit, keybindPresets[keybindPreset])\r\n\r\nTask(function()\r\n    coroutine.yield()\r\n    SHUD.FreezeUpdate = true\r\n    local endTime = system.getArkTime() + 2\r\n    while system.getArkTime() < endTime do\r\n        coroutine.yield()\r\n    end\r\n    SHUD.FreezeUpdate = false\r\n    SHUD.IntroPassed = true\r\nend)\r\n\r\nSHUD.Markers = {\r\n    {\r\n        Position = function() return ship.world.position + (ship.target.prograde() * 2) end,\r\n        Class = \"prograde\"\r\n    },\r\n    {\r\n        Position = function() return ship.world.position + (ship.target.retrograde() * 2) end,\r\n        Class = \"retrograde\"\r\n    },\r\n    {\r\n        Position = function() return ship.world.position + (ship.target.radial() * 2) end,\r\n        Class = \"radial\"\r\n    },\r\n    {\r\n        Position = function() return ship.world.position + (ship.target.antiradial() * 2) end,\r\n        Class = \"antiradial\"\r\n    },\r\n    -- {\r\n    --     Position = vec3(-15973, 106446, -60333),\r\n    --     Class = \"target\",\r\n    --     Name = \"Shadow Templar HQ\",\r\n    --     ShowDistance = true\r\n    -- }\r\n}\r\n\r\nplayer.freeze(true)\r\nship.frozen = false\r\nunit.deactivateGroundEngineAltitudeStabilization()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "15"
    },
    {
      "code": "--@require SimpleSlotDetector\r\n--@require ExportedVariables\r\n--@require PlanetRef\r\n--@require Kinematics\r\n--@require EventDelegate\r\n--@require TaskManager\r\n--@require DynamicDocument\r\n--@require DUTTY\r\n--@require CSS_SHUD\r\n--@require FuelTankHelper\r\n--@require TagManager\r\n--@require KeybindController\r\n--@require STEC\r\n--@require SHUD\r\n--@require MouseMovement\r\n--@require STEC_Config\r\n--@timer SHUDRender\r\n--@timer FuelStatus\r\n--@timer KeplerSim\r\n--@timer WaypointTest\r\n--@timer Debug\r\n--@class Main\r\n--@outFilename Horizon1.json\r\n\r\n_G.BuildUnit = {}\r\nlocal Unit = _G.BuildUnit\r\n_G.BuildSystem = {}\r\nlocal System = _G.BuildSystem\r\n\r\nfunction Unit.onStart()\r\n\tEvents.Flush.Add(mouse.apply)\r\n\tEvents.Flush.Add(ship.apply)\r\n\tEvents.Update.Add(SHUD.Update)\r\n\tif flightModeDb then\r\n\t\tif flightModeDb.hasKey(\"controlMode\") == 0 then flightModeDb.setIntValue(\"controlMode\", unit.getControlMode()) end\r\n\t\tlocal controlMode = flightModeDb.getIntValue(\"controlMode\")\r\n\t\tif controlMode ~= unit.getControlMode() then\r\n\t\t\tunit.cancelCurrentControlMasterMode()\r\n\t\tend\r\n\tend\r\n\r\n\tif flightModeDb ~= nil then getFuelRenderedHtml() end\r\n\tunit.setTimer(\"SHUDRender\", 0.02)\r\n\tunit.setTimer(\"FuelStatus\", 3)\r\n\tunit.setTimer(\"KeplerSim\", 0.1)\r\n\t--unit.setTimer(\"Debug\", 2)\r\n\t-- unit.setTimer(\"WaypointTest\", 1)\r\n\tsystem.print([[Horizon 1.1.1.9]])\r\n\r\n\tif showDockingWidget then\r\n\t\tparentingPanelId = system.createWidgetPanel(\"Docking\")\r\n\t\tparentingWidgetId = system.createWidget(parentingPanelId,\"parenting\")\r\n\t\tsystem.addDataToWidget(unit.getWidgetDataId(),parentingWidgetId)\r\n\tend\r\n\tif system.showHelper then system.showHelper(0) end\r\n\t--local fMax = construct.getMaxThrustAlongAxis(\"all\", {vec3(0,1,0):unpack()})\r\n\t--local vMax = construct.getMaxThrustAlongAxis(\"all\", {vec3(0,0,1):unpack()})\r\n\r\n\t--system.print(string.format( \"fMax: %f, %f, %f, %f\",fMax[1],fMax[2],fMax[3],fMax[4]))\r\n\t--system.print(string.format( \"vMax: %f, %f, %f, %f\",vMax[1],vMax[2],vMax[3],vMax[4]))\r\nend\r\n\r\nfunction dump(o)\r\n\tif type(o) == 'table' then\r\n\t   local s = '{ '\r\n\t   for k,v in pairs(o) do\r\n\t\t  if type(k) ~= 'number' then k = '\"'..k..'\"' end\r\n\t\t  s = s .. '['..k..'] = ' .. dump(v) .. ','\r\n\t   end\r\n\t   return s .. '} '\r\n\telse\r\n\t   return tostring(o)\r\n\tend\r\nend\r\nfunction format_int(number)\r\n\tnumber = round2(number,0)\r\n\tlocal i, j, minus, int, fraction = tostring(number):find('([-]?)(%d+)([.]?%d*)')\r\n\r\n\t-- reverse the int-string and append a comma to all blocks of 3 digits\r\n\tint = int:reverse():gsub(\"(%d%d%d)\", \"%1,\")\r\n\r\n\t-- reverse the int-string back remove an optional comma and put the\r\n\t-- optional minus and fractional part back\r\n\treturn minus .. int:reverse():gsub(\"^,\", \"\") .. fraction\r\nend\r\n\r\nfunction Unit.onStop()\r\n\tif flightModeDb then\r\n\t\tflightModeDb.setIntValue(\"controlMode\", unit.getControlMode())\r\n\tend\r\n\tsystem.showScreen(false)\r\nend\r\n\r\nlocal switch = false\r\nfunction Unit.onTimer(timer)\r\n\tif timer == \"SHUDRender\" then\r\n\t\tif SHUD then SHUD.Render() end\r\n\t\tif antigrav ~= nil then\r\n\t\t\tupdateAGGBaseAlt()\r\n\t\t\treadAGGState()\r\n\t\t\tupdateAGGState()\r\n\t\tend\r\n\tend\r\n\t-- if timer == \"Debug\" then\r\n\t-- \t--system.print(\"ship.direction.x: \"..ship.direction.x)\r\n\t-- \t--system.print(\"ship.direction.y: \"..ship.direction.y)\r\n\t-- \t--system.print(\"ship.direction.z: \"..ship.direction.z)\r\n\t-- \t--system.print(\"ship.rotationSpeedz: \"..ship.rotationSpeed)\r\n\t-- \t--system.print(\"ship.world.atmosphericDensity: \"..ship.world.atmosphericDensity)\r\n\t-- \t--system.print(\"ship.target.prograde(): \"..tostring(vec3(ship.world.prograde())))\r\n\t-- \tsystem.print(\"prograde.x: \"..(ship.world.position + (ship.target.prograde() * 2)).x)\r\n\r\n\t-- \tsystem.print(\"prograde.y: \"..(ship.world.position + (ship.target.prograde() * 2)).y)\r\n\r\n\t-- \tlocal x = ship.nearestPlanet:convertToMapPosition(ship.world.position + (ship.target.prograde() * 2))\r\n\t-- \tsystem.print(x)\r\n\t-- \tsystem.setWaypoint(x)\r\n\t-- \t--system.print(\"ship.forwardThrust: \"..format_int(ship.forwardThrust))\r\n\t-- end\r\n\tif timer == \"FuelStatus\" then\r\n\t\tgetFuelRenderedHtml()\r\n\t\t--local msa = construct.getMaxSpeedPerAxis()\r\n\t\t--system.print(dump(msa))\r\n\tend\r\n\tif timer == \"KeplerSim\" then\r\n\t\tif ship.gotoLock ~= nil then\r\n\t\t\tTask(function()\r\n\t\t\t\tlocal t = ship.ETA - ship.accelTime\r\n\t\t\t\tif ship.ETA == 0 then t = 30 end\r\n\t\t\t\tlocal f = simulateAhead(t,t * 0.1)\r\n\t\t\t\tship.simulationPos = f.position\r\n\t\t\tend)\r\n\t\tend\r\n\tend\r\n\r\n\tif timer == \"WaypointTest\" then\r\n\t\t-- if ship.gotoLock ~= nil then\r\n\t\t-- \tsystem.print(\"[----------------------------------------------]\")\r\n\t\t-- \tsystem.print(\"Deviation angle: \"..ship.deviationAngle..\"°\")\r\n\t\t-- \tsystem.print(\"Target Dist: \"..ship.targetDist)\r\n\t\t-- \tsystem.print(\"Brake Dist: \"..ship.brakeDistance)\r\n\t\t-- \tsystem.print(\"Stopping: \"..tostring(ship.stopping))\r\n\t\t-- \tsystem.print(\"Brake Diff: \"..(ship.targetDist - ship.brakeDistance))\r\n\t\t-- \tsystem.print(\"Trajectory Diff: \"..ship.trajectoryDiff)\r\n\t\t-- \tsystem.print(\"Mass (tons): \"..ship.mass / 1000)\r\n\t\t-- \tsystem.print(\"Max Speed: \"..ship.constructMaxSpeed)\r\n\t\t-- \tsystem.print(\"ETA: \"..disp_time(ship.ETA))\r\n\t\t-- \tsystem.print(\"[----------------------------------------------]\")\r\n\t\t-- end\r\n\r\n\t\t-- if switch then\r\n\t\t-- \tlocal waypointString = ship.nearestPlanet:convertToMapPosition(ship.simulationPos)\r\n\t\t-- \tsystem.setWaypoint(tostring(waypointString))\r\n\t\t-- else\r\n\t\t-- \tif ship.gotoLock ~= nil then\r\n\t\t-- \t\tlocal waypointString = ship.nearestPlanet:convertToMapPosition(ship.gotoLock)\r\n\t\t-- \t\tsystem.setWaypoint(tostring(waypointString))\r\n\t\t-- \tend\r\n\t\t-- end\r\n\t\t-- switch = not switch\r\n\tend\r\nend\r\n\r\nfunction System.onActionStart(action)\r\n\tkeybindPresets[keybindPreset].Call(action, \"down\")\r\nend\r\n\r\nfunction System.onActionStop(action)\r\n\tkeybindPresets[keybindPreset].Call(action, \"up\")\r\nend\r\n\r\nfunction System.onInputText(action)\r\n\tif DUTTY then DUTTY.input(action) end\r\nend\r\n\r\nfunction System.onActionLoop(action)\r\nend\r\n\r\nfunction System.onUpdate()\r\n\tif Events then Events.Update() end\r\n\tif TaskManager then TaskManager.Update() end\r\nend\r\n\r\nfunction System.onFlush()\r\n\tif Events then Events.Flush() end\r\nend",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "16"
    },
    {
      "code": "_G.BuildUnit.onStart()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "17"
    },
    {
      "code": "_G.BuildUnit.onStop()",
      "filter": {
        "args": [],
        "signature": "onStop",
        "slotKey": "-1"
      },
      "key": "18"
    },
    {
      "code": "_G.BuildSystem.onActionStart(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStart(action)",
        "slotKey": "-2"
      },
      "key": "19"
    },
    {
      "code": "_G.BuildSystem.onActionStop(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStop(action)",
        "slotKey": "-2"
      },
      "key": "20"
    },
    {
      "code": "_G.BuildSystem.onInputText(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onInputText(action)",
        "slotKey": "-2"
      },
      "key": "21"
    },
    {
      "code": "_G.BuildSystem.onUpdate()",
      "filter": {
        "args": [],
        "signature": "onUpdate",
        "slotKey": "-2"
      },
      "key": "22"
    },
    {
      "code": "_G.BuildSystem.onFlush()",
      "filter": {
        "args": [],
        "signature": "onFlush",
        "slotKey": "-2"
      },
      "key": "23"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"SHUDRender\")",
      "filter": {
        "args": [
          {
            "variable": "SHUDRender"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "24"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"FuelStatus\")",
      "filter": {
        "args": [
          {
            "variable": "FuelStatus"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "25"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"KeplerSim\")",
      "filter": {
        "args": [
          {
            "variable": "KeplerSim"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "26"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"WaypointTest\")",
      "filter": {
        "args": [
          {
            "variable": "WaypointTest"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "27"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"Debug\")",
      "filter": {
        "args": [
          {
            "variable": "Debug"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "28"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "0"
      },
      "key": "29"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "0"
      },
      "key": "30"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "0"
      },
      "key": "31"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "0"
      },
      "key": "32"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "1"
      },
      "key": "33"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "1"
      },
      "key": "34"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "1"
      },
      "key": "35"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "1"
      },
      "key": "36"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "2"
      },
      "key": "37"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "2"
      },
      "key": "38"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "2"
      },
      "key": "39"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "2"
      },
      "key": "40"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "3"
      },
      "key": "41"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "3"
      },
      "key": "42"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "3"
      },
      "key": "43"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "3"
      },
      "key": "44"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "4"
      },
      "key": "45"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "4"
      },
      "key": "46"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "4"
      },
      "key": "47"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "4"
      },
      "key": "48"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "5"
      },
      "key": "49"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "5"
      },
      "key": "50"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "5"
      },
      "key": "51"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "5"
      },
      "key": "52"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "6"
      },
      "key": "53"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "6"
      },
      "key": "54"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "6"
      },
      "key": "55"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "6"
      },
      "key": "56"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "7"
      },
      "key": "57"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "7"
      },
      "key": "58"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "7"
      },
      "key": "59"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "7"
      },
      "key": "60"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "8"
      },
      "key": "61"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "8"
      },
      "key": "62"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "8"
      },
      "key": "63"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "8"
      },
      "key": "64"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "9"
      },
      "key": "65"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "9"
      },
      "key": "66"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "9"
      },
      "key": "67"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "9"
      },
      "key": "68"
    },
    {
      "code": "_G._ModuleIndex={}\r\n_G._ModuleIndex[0]='SimpleSlotDetector.lua';_G._ModuleIndex[1]='ExportedVariables.lua';_G._ModuleIndex[2]='PlanetRef.lua';_G._ModuleIndex[3]='Kinematics.lua';_G._ModuleIndex[4]='EventDelegate.lua';_G._ModuleIndex[5]='TaskManager.lua';_G._ModuleIndex[6]='DynamicDocument.lua';_G._ModuleIndex[7]='DUTTY.lua';_G._ModuleIndex[8]='shud2.lua';_G._ModuleIndex[9]='FuelTankHelper.lua';_G._ModuleIndex[10]='TagManager.lua';_G._ModuleIndex[11]='KeybindController.lua';_G._ModuleIndex[12]='STEC.lua';_G._ModuleIndex[13]='SHUD.lua';_G._ModuleIndex[14]='STMM.lua';_G._ModuleIndex[15]='STEC_config.lua';_G._ModuleIndex[16]='main.lua';",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-3"
      },
      "key": "1"
    }
  ],
  "methods": [],
  "events": []
}