{
  "slots": {
    "0": {
      "name": "slot1",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "1": {
      "name": "slot2",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "2": {
      "name": "slot3",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "3": {
      "name": "slot4",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "4": {
      "name": "slot5",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "5": {
      "name": "slot6",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "6": {
      "name": "slot7",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "7": {
      "name": "slot8",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "8": {
      "name": "slot9",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "9": {
      "name": "slot10",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "10": {
      "name": "slot11",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "11": {
      "name": "slot12",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "12": {
      "name": "slot13",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "13": {
      "name": "slot14",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "14": {
      "name": "slot15",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "15": {
      "name": "slot16",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "16": {
      "name": "slot17",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "17": {
      "name": "slot18",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "18": {
      "name": "slot19",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "19": {
      "name": "slot20",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "20": {
      "name": "slot21",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-3": {
      "name": "library",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-2": {
      "name": "system",
      "type": {
        "events": [],
        "methods": []
      }
    },
    "-1": {
      "name": "unit",
      "type": {
        "events": [],
        "methods": []
      }
    }
  },
  "handlers": [
    {
      "code": "core=nil;antigrav=nil;warpDrive=nil;radarUnit=nil;flightModeDb=nil;manualSwitches={}forceFields={}screen=nil;function getElements()for a,var in pairs(_G)do if type(var)==\"table\"and var[\"getClass\"]then local b=var[\"getClass\"]()if b==\"CoreUnitDynamic\"or b==\"CoreUnitStatic\"or b==\"CoreUnitSpace\"then core=var end;if b==\"AtmoFuelContainer\"or b==\"SpaceFuelContainer\"then var.showWidget()end;if b==\"WarpDriveUnit\"then warpDrive=var;var.showWidget()end;if b==\"RadarPvPAtmospheric\"or b==\"RadarPVPSpaceSmallGroup\"then radarUnit=var;var.showWidget()end;if b==\"DataBankUnit\"then flightModeDb=var end;if b==\"AntiGravityGeneratorUnit\"then antigrav=var end;if b==\"ManualSwitchUnit\"then table.insert(manualSwitches,var)end;if b==\"ForceFieldUnit\"then table.insert(forceFields,var)end;if b==\"ScreenUnit\"then screen=var end end end end;getElements()goButtonSpeed=1050;inertialDampening=false;followGravity=true;counterGravity=false;rotationMin=0.2;rotationMax=5;rotationStep=0.1;showDockingWidget=true;dockingMode=3;vtolShip=true;displaySize=0.65;primaryColor=\"b80000\"secondaryColor=\"e30000\"textShadow=\"e81313\"ContainerOptimization=5;FuelTankOptimization=5;fuelTankHandlingAtmo=5;fuelTankHandlingSpace=5;ap_stop_distance=200000;activateFFonStart=false;setactivateFFonStart=false;pocket=false;setpocket=false;bool_to_number={[true]=1,[false]=0}number_to_bool={[1]=true,[0]=false}if flightModeDb.hasKey(\"activateFFonStart\")==0 or updateSettings then flightModeDb.setIntValue(\"activateFFonStart\",bool_to_number[setactivateFFonStart])activateFFonStart=setactivateFFonStart else activateFFonStart=number_to_bool[flightModeDb.getIntValue(\"activateFFonStart\")]end;if flightModeDb.hasKey(\"pocket\")==0 or updateSettings then flightModeDb.setIntValue(\"pocket\",bool_to_number[setpocket])pocket=setpocket else pocket=number_to_bool[flightModeDb.getIntValue(\"pocket\")]end;function PlanetRef()local function c(d)return type(d)=='number'end;local function e(d)return type(tonumber(d))=='number'end;local function f(g)return type(g)=='table'end;local function h(i)return type(i)=='string'end;local function j(k)return f(k)and c(k.x and k.y and k.z)end;local function l(m)return f(m)and c(m.latitude and m.longitude and m.altitude and m.bodyId and m.systemId)end;local n=math.pi/180;local o=180/math.pi;local p=1e-10;local q=' *([+-]?%d+%.?%d*e?[+-]?%d*)'local r='::pos{'..q..','..q..','..q..','..q..','..q..'}'local utils=require('cpml.utils')local vec3=require('cpml.vec3')local clamp=utils.clamp;local function s(t,u)if t==0 then return math.abs(u)<1e-09 end;if u==0 then return math.abs(t)<1e-09 end;return math.abs(t-u)<math.max(math.abs(t),math.abs(u))*p end;local function v(d)local w=string.gsub(string.reverse(string.format('%.4f',d)),'^0*%.?','')return w==''and'0'or string.reverse(w)end;local function x(y)if j(y)then return string.format('{x=%.3f,y=%.3f,z=%.3f}',y.x,y.y,y.z)end;if f(y)and not getmetatable(y)then local z={}local A=next(y)if type(A)=='nil'or A==1 then for B,t in ipairs(y)do z[B]=x(t)end else for a,k in pairs(y)do local C=x(k)if type(a)=='number'then table.insert(z,string.format('[%s]=%s',a,C))else table.insert(z,string.format('%s=%s',a,C))end end end;return string.format('{%s}',table.concat(z,','))end;if h(y)then return string.format(\"[[%s]]\",y)end;return tostring(y)end;local D={}D.__index=D;D.__tostring=function(y,E)local F={}for a in pairs(y)do table.insert(F,a)end;table.sort(F)local z={}for G,a in ipairs(F)do local C=x(y[a])if type(a)=='number'then table.insert(z,string.format('[%s]=%s',a,C))else table.insert(z,string.format('%s=%s',a,C))end end;if E then return string.format('%s%s',E,table.concat(z,',\\n'..E))end;return string.format('{%s}',table.concat(z,','))end;D.__eq=function(H,I)return H.planetarySystemId==I.planetarySystemId and H.bodyId==I.bodyId and s(H.radius,I.radius)and s(H.center.x,I.center.x)and s(H.center.y,I.center.y)and s(H.center.z,I.center.z)and s(H.GM,I.GM)end;local function J(K,L,M,N,O)assert(e(K),'Argument 1 (planetarySystemId) must be a number:'..type(K))assert(e(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(e(M),'Argument 3 (radius) must be a number:'..type(M))assert(f(N),'Argument 4 (worldCoordinates) must be a array or vec3.'..type(N))assert(e(O),'Argument 5 (GM) must be a number:'..type(O))return setmetatable({planetarySystemId=tonumber(K),bodyId=tonumber(L),radius=tonumber(M),center=vec3(N),GM=tonumber(O)},D)end;local P={}P.__index=P;P.__tostring=function(Q)return string.format('::pos{%d,%d,%s,%s,%s}',Q.systemId,Q.bodyId,v(Q.latitude*o),v(Q.longitude*o),v(Q.altitude))end;P.__eq=function(H,I)return H.bodyId==I.bodyId and H.systemId==I.systemId and s(H.latitude,I.latitude)and s(H.altitude,I.altitude)and(s(H.longitude,I.longitude)or s(H.latitude,math.pi/2)or s(H.latitude,-math.pi/2))end;local function R(S,L,T,U,V)local K=S;if h(S)and not U and not V and not L and not T then K,L,T,U,V=string.match(S,r)assert(K,'Argument 1 (position string) is malformed.')else assert(e(K),'Argument 1 (systemId) must be a number:'..type(K))assert(e(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(e(T),'Argument 3 (latitude) must be in degrees:'..type(T))assert(e(U),'Argument 4 (longitude) must be in degrees:'..type(U))assert(e(V),'Argument 5 (altitude) must be in meters:'..type(V))end;K=tonumber(K)L=tonumber(L)T=tonumber(T)U=tonumber(U)V=tonumber(V)if L==0 then return setmetatable({latitude=T,longitude=U,altitude=V,bodyId=L,systemId=K},P)end;return setmetatable({latitude=n*clamp(T,-90,90),longitude=n*(U%360),altitude=V,bodyId=L,systemId=K},P)end;local W={}W.__index=W;W.__tostring=function(y,E)local X=E and E..'  'local Y={}local F={}for a in pairs(y)do table.insert(F,a)end;table.sort(F)for G,Z in ipairs(F)do bdy=y[Z]local _=D.__tostring(bdy,X)if E then table.insert(Y,string.format('[%s]={\\n%s\\n%s}',Z,_,E))else table.insert(Y,string.format('  [%s]=%s',Z,_))end end;if E then return string.format('\\n%s%s%s',E,table.concat(Y,',\\n'..E),E)end;return string.format('{\\n%s\\n}',table.concat(Y,',\\n'))end;local function a0(a1)local a2={}local a3;for G,k in pairs(a1)do local a4=k.planetarySystemId;if a4==nil then a4=0;k.planetarySystemId=a4 end;if type(a4)~='number'then error('Invalid planetary system ID: '..tostring(a4))elseif a3 and a4~=a3 then error('Mismatch planetary system IDs: '..a4 ..' and '..a3)end;local a5=k.bodyId;if a5==nil then a5=k.id;k.bodyId=a5 end;if type(a5)~='number'then error('Invalid body ID: '..tostring(a5))elseif a2[a5]then error('Duplicate body ID: '..tostring(a5))end;k.center=vec3(k.center)a2[a5]=setmetatable(k,D)a3=a4 end;return setmetatable(a2,W)end;PlanetaryReference={}local function a6(a7)return setmetatable({galaxyAtlas=a7 or{}},PlanetaryReference)end;PlanetaryReference.__index=function(g,B)if type(B)=='number'then local system=g.galaxyAtlas[B]return a0(system)end;return rawget(PlanetaryReference,B)end;PlanetaryReference.__pairs=function(y)return function(g,a)local a8,a9=next(g,a)return a8,a9 and a0(a9)end,y.galaxyAtlas,nil end;PlanetaryReference.__tostring=function(y)local aa={}for G,ab in pairs(y or{})do local ac=ab:getPlanetarySystemId()local ad=W.__tostring(ab,'    ')table.insert(aa,string.format('  [%s]={%s\\n  }',ac,ad))end;return string.format('{\\n%s\\n}\\n',table.concat(aa,',\\n'))end;PlanetaryReference.BodyParameters=J;PlanetaryReference.MapPosition=R;PlanetaryReference.PlanetarySystem=a0;function PlanetaryReference.createBodyParameters(ae,L,af,ag,ah,ai,aj)assert(e(ae),'Argument 1 (planetarySystemId) must be a number:'..type(ae))assert(e(L),'Argument 2 (bodyId) must be a number:'..type(L))assert(e(af),'Argument 3 (surfaceArea) must be a number:'..type(af))assert(f(ag),'Argument 4 (aPosition) must be an array or vec3:'..type(ag))assert(f(ah),'Argument 5 (verticalAtPosition) must be an array or vec3:'..type(ah))assert(e(ai),'Argument 6 (altitude) must be in meters:'..type(ai))assert(e(aj),'Argument 7 (gravityAtPosition) must be number:'..type(aj))local M=math.sqrt(af/4/math.pi)local ak=M+ai;local al=vec3(ag)+ak*vec3(ah)local O=aj*ak*ak;return J(ae,L,M,al,O)end;PlanetaryReference.isMapPosition=l;function PlanetaryReference:getPlanetarySystem(S)if self.galaxyAtlas then local ae=S;if l(S)then ae=S.systemId end;if type(ae)=='number'then local system=self.galaxyAtlas[ae]if system then if getmetatable(system)~=W then system=a0(system)end;return system end end end;return nil end;function W:castIntersections(am,an,ao,ap)local ao=ao or function(aq)return 1.05*aq.radius end;local ar={}if ap then for G,B in ipairs(ap)do ar[B]=self[B]end else ap={}for a,aq in pairs(self)do table.insert(ap,a)ar[a]=aq end end;local function as(at,au)local av=ar[at].center-am;local aw=ar[au].center-am;return av:len()<aw:len()end;table.sort(ap,as)local ax=an:normalize()for B,a4 in ipairs(ap)do local aq=ar[a4]local ay=aq.center-am;local M=ao(aq)local az=ay:dot(ax)local aA=az^2-(ay:len2()-M^2)if aA>=0 then local aB=math.sqrt(aA)local aC=az+aB;local aD=az-aB;if aD>0 then return aq,aC,aD elseif aC>0 then return aq,aC,nil end end end;return nil,nil,nil end;function W:closestBody(aE)assert(type(aE)=='table','Invalid coordinates.')local aF,aq;local aG=vec3(aE)for G,aH in pairs(self)do local aI=aH.center-aG:len2()if not aq or aI<aF then aq=aH;aF=aI end end;return aq end;function W:convertToBodyIdAndWorldCoordinates(S)local aJ=S;if h(S)then aJ=R(S)end;if aJ.bodyId==0 then return 0,vec3(aJ.latitude,aJ.longitude,aJ.altitude)end;local aH=self:getBodyParameters(aJ)if aH then return aJ.bodyId,aH:convertToWorldCoordinates(aJ)end end;function W:getBodyParameters(S)local L=S;if l(S)then L=S.bodyId end;assert(e(L),'Argument 1 (bodyId) must be a number:'..type(L))return self[L]end;function W:getPlanetarySystemId()local a,k=next(self)return k and k.planetarySystemId end;function W:netGravity(aE)assert(type(aE)=='table','Invalid coordinates.')local aK=vec3()local aG=vec3(aE)local aL,aq;for G,aH in pairs(self)do local aM=aH.center-aG;local aN=aM:len2()local aO=aH.GM/aN;if not aq or aO>aL then aq=aH;aL=aO end;aK=aK+aO/math.sqrt(aN)*aM end;return aq,aK end;function D:convertToMapPosition(N)assert(f(N),'Argument 1 (worldCoordinates) must be an array or vec3:'..type(N))local aP=vec3(N)if self.bodyId==0 then return setmetatable({latitude=aP.x,longitude=aP.y,altitude=aP.z,bodyId=0,systemId=self.planetarySystemId},P)end;local aQ=aP-self.center;local ak=aQ:len()local V=ak-self.radius;local T=0;local U=0;if not s(ak,0)then local aR=math.atan(aQ.y,aQ.x)U=aR>=0 and aR or 2*math.pi+aR;T=math.pi/2-math.acos(aQ.z/ak)end;return setmetatable({latitude=T,longitude=U,altitude=V,bodyId=self.bodyId,systemId=self.planetarySystemId},P)end;function D:convertToWorldCoordinates(S)local aJ=h(S)and R(S)or S;if aJ.bodyId==0 then return vec3(aJ.latitude,aJ.longitude,aJ.altitude)end;assert(l(aJ),'Argument 1 (mapPosition) is not an instance of \"MapPosition\".')assert(aJ.systemId==self.planetarySystemId,'Argument 1 (mapPosition) has a different planetary system ID.')assert(aJ.bodyId==self.bodyId,'Argument 1 (mapPosition) has a different planetary body ID.')local aS=math.cos(aJ.latitude)return self.center+(self.radius+aJ.altitude)*vec3(aS*math.cos(aJ.longitude),aS*math.sin(aJ.longitude),math.sin(aJ.latitude))end;function D:getAltitude(N)return vec3(N)-self.center:len()-self.radius end;function D:getDistance(N)return vec3(N)-self.center:len()end;function D:getGravity(N)local aM=self.center-vec3(N)local aN=aM:len2()return self.GM/aN*aM/math.sqrt(aN)end;return setmetatable(PlanetaryReference,{__call=function(G,...)return a6(...)end})end;function Kinematics()local aT={}local aU=100;function aT.computeAccelerationTime(aV,aW,aX)return(aX-aV)/aW end;function aT.computeDistanceAndTime(aV,aX,aY,aZ,a_,b0)a_=a_ or 0;b0=b0 or 0;local b1=aV<aX;local b2=aZ/(b1 and aY or-aY)local b3=-b0/aY;local b4=b2+b3;if aV==aX then return 0,0 elseif b1 and b4<=0 or not b1 and b4>=0 then return-1,-1 end;local b5,b6=0,0;if b2~=0 and a_>0 then local b7=math.pi/a_/2;local k=function(g)return b2*(g/2-a_*math.sin(b7*g)/math.pi)+b3*g+aV end;local b8=b1 and function(i)return i>=aX end or function(i)return i<=aX end;b6=2*a_;if b8(k(b6))then local b9=0;while math.abs(b6-b9)>0.25 do local g=(b6+b9)/2;if b8(k(g))then b6=g else b9=g end end end;local ba=2*b2*a_^2/math.pi^2;b5=ba*(math.cos(b7*b6)-1)+(b2+2*b3)*b6^2/4+aV*b6;if b6<2*a_ then return b5,b6 end;aV=k(b6)end;local t=b2+b3;local g=aT.computeAccelerationTime(aV,t,aX)local bb=aV*g+t*g*g/2;return b5+bb,b6+g end;function aT.computeTravelTime(aV,aW,ak)if ak==0 then return 0 end;if aW~=0 then return(math.sqrt(2*aW*ak+aV^2)-aV)/aW end;assert(aV>0,'Acceleration and initial speed are both zero.')return ak/aV end;return aT end;function EventDelegate()local t={}t.Delegates={}function t.Add(u)if type(u)~=\"function\"then error(\"[EventDelegate] Unable to add callback - not a function\")return end;for bc=1,#t.Delegates do if t.Delegates[bc]==u then return false end end;table.insert(t.Delegates,u)return true end;function t.Remove(u)if type(u)~=\"function\"then error(\"[EventDelegate] Unable to remove callback - not a function\")return end;for bc=1,#t.Delegates do if t.Delegates[bc]==u then table.remove(t.Delegates,bc)return true end end;return false end;function t.Call(...)for bc=1,#t.Delegates do t.Delegates[bc](...)end end;function t.Count()return#t.Delegates end;setmetatable(t,{__call=function(bb,...)t.Call(...)end,__add=function(bd,be)if bd==t then t.Add(be)return t end;if be==t then t.Add(bd)return t end;return t end,__sub=function(bd,be)if bd==t then t.Remove(be)return t end;if be==t then t.Remove(bd)return t end;return t end,__tostring=function()return\"EventDelegate(#\"..#t.Delegates..\")\"end})return t end;Events={Update=EventDelegate(),Flush=EventDelegate()}TaskManager=function()local self={}self.Stack={}function self.Register(bf)if not bf.Coroutine then error(\"[TaskManager] Trying to register a non-Task\")end;table.insert(self.Stack,bf)end;function self.Update()for B=1,#self.Stack do local bf=self.Stack[B]if bf and bf.Coroutine~=nil then if coroutine.status(bf.Coroutine)~=\"dead\"then local bg,bh=coroutine.resume(bf.Coroutine)bf.Error=not bg;bf.LastReturn=bh else table.remove(self.Stack,B)if bf.Error and bf._Catch then bf._Catch(bf.LastReturn)elseif bf._Then~=nil then bf._Then(bf.LastReturn)end;if bf._Finally~=nil then bf._Finally()end;bf.Finished=true end end end end;return self end()function Task(bi)local self={}self.LastReturn=nil;self.Error=nil;self.Finished=false;if type(bi)~=\"function\"then error(\"[Task] Not a function.\")end;self.Coroutine=coroutine.create(bi)function self.Then(bi)if type(bi)~=\"function\"then error(\"[Task] Then callback not a function.\")end;self._Then=bi;return self end;function self.Finally(bi)if type(bi)~=\"function\"then error(\"[Task] Finally callback not a function.\")end;self._Finally=bi;return self end;function self.Catch(bi)if type(bi)~=\"function\"then error(\"[Task] Catch callback not a function.\")end;self._Catch=bi;return self end;TaskManager.Register(self)return self end;function await(bf)if not bf or not bf.Coroutine then error(\"Trying to await non-task object\")end;while not bf.Finished do coroutine.yield()end;return bf.LastReturn end;function DynamicDocument(t)local self={}self.template=t or\"\"local u=\"\"local bc={}self.tree={}local bb={br=true,hr=true,img=true,embed=true,param=true,area=true,col=true,input=true,meta=true,link=true,base=true,basefont=true,iframe=true,isindex=true,circle=true,polygon=true,polyline=true,ellipse=true,path=true,line=true,rect=true,use=true}function table.indexOf(val,table)for bd,be in ipairs(table)do if be==val then return bd end end;return nil end;function self.makeFunc(string)local val=\"nil\"if bc[string]==nil then local aO,bj=pcall(load(\"return function() return \"..string..\" end\",nil,\"t\",_ENV))if aO then bc[string]=bj;val=bj()if type(val)==\"function\"then bc[string]=bj()val=val()end end else val=bc[string]()end;return val end;local function B(t)local bk=0;local a={}local bl={}bl.dd={}table.insert(a,bl)local node={}for m,d,bm,Q,bn,bo,val,i in string.gmatch(t,\"(<)(%/?!?)([%w:_-'\\\\\\\"%[]+)(.-)(%/?%-?)>([%s\\r\\n\\t]*)([^<]*)([%s\\r\\n\\t]*)\")do bm=string.lower(bm)if d==\"/\"then if bk==0 then return bl end;bk=bk-1;table.remove(a)else local function g(bp)local k=\"dd-\"return bp:sub(1,#k)==k end;bk=bk+1;node={}node.name=bm;node.children={}node.attr={}if a[bk-1]then node.parent=a[bk-1][#a[bk-1]]else node.parent=nil end;if Q~=\"\"then for bq,be in string.gmatch(Q,\"%s([^%s=]+)=\\\"([^\\\"]+)\\\"\")do node.attr[bq]=string.gsub(be,'\"','[^\\\\]\\\\\"')if g(bq)then if not bl.dd[bq]then bl.dd[bq]={}end;table.insert(bl.dd[bq],node)end end;for bq,be in string.gmatch(Q,\"%s([^%s=]+)='([^']+)'\")do node.attr[bq]=string.gsub(be,'\"','[^\\\\]\\\\\"')if g(bq)then if not bl.dd[bq]then bl.dd[bq]={}end;table.insert(bl.dd[bq],node)end end end;if not a[bk]then a[bk]={}end;table.insert(a[bk],node)if bb[bm]then if val~=\"\"then table.insert(a[bk],{name=\"textNode\",value=val})end;node.children={}bk=bk-1 else if val~=\"\"then table.insert(node.children,{name=\"textNode\",value=val})end;table.insert(a,node.children)end end end;return bl end;local function br(bs,bt)local a={bs}local bu=\"\"local function bv(bw)local bx=0;for by in pairs(bw)do bx=bx+1 end;return bx end;if not bt and bv(bs.dd)>0 then if bs.dd[\"dd-repeat\"]then for bz=#bs.dd[\"dd-repeat\"],1,-1 do local node=bs.dd[\"dd-repeat\"][bz]var,array=string.match(node.attr[\"dd-repeat\"],\"(.*) in (.*)\")node.attr[\"dd-repeat\"]=nil;local bA=br({node},true)local bB=string.gmatch(bA,\"{{([^}}]+)}}\")local bC={}for bD in bB do if string.match(bD,var)then table.insert(bC,bD)end end;local u=\"\"local ba=self.makeFunc(array)for bz=1,#ba do _ENV[var]=ba[bz]local bE=bA;local bF=B(bE:gsub(\"^%s*(.-)%s*$\",\"%1\"))u=u..br(bF)end;node.children={}node.name=\"textNode\"node.value=u end end;if bs.dd[\"dd-if\"]then for bz=#bs.dd[\"dd-if\"],1,-1 do local node=bs.dd[\"dd-if\"][bz]local bG=self.makeFunc(node.attr[\"dd-if\"])if bG then node.attr[\"dd-if\"]=nil else local bH=table.indexOf(node,node.parent.children)if bH then table.remove(node.parent.children,bH)end;node=nil;table.remove(bs.dd[\"dd-if\"],bz)bs.dd[\"dd-if\"][bz]=nil end end end;if bs.dd[\"dd-init\"]then for bz=#bs.dd[\"dd-init\"],1,-1 do local node=bs.dd[\"dd-init\"][bz]pcall(load(node.attr[\"dd-init\"],nil,\"t\",_ENV))node.attr[\"dd-init\"]=nil end end end;while#a~=0 do node=a[#a][1]if not node then break end;if node.name==\"textNode\"then local val=node.value:gsub(\"^%s*(.-)%s*$\",\"%1\")if not bt then val=self.transformClosures(val)end;bu=bu..val else bu=bu..\"\\n\"..string.rep(\" \",#a-1)bu=bu..\"<\"..node.name;if node.attr then for bI,be in pairs(node.attr)do if not bt then bI=self.transformClosures(bI)be=self.transformClosures(be)end;bu=bu..\" \"..bI..'=\"'..be..'\"'end end;if bb[node.name]then bu=bu..\"/>\"else bu=bu..\">\"end end;if node.children and#node.children>0 then table.insert(a,node.children)else table.remove(a[#a],1)if node.children and#node.children==0 and not bb[node.name]and not node.name==\"textNode\"then bu=bu..\"</\"..node.name..\">\"end;while#a>0 and#a[#a]==0 do table.remove(a)if#a>0 then if#a[#a][1].children>1 then bu=bu..\"\\n\"..string.rep(\" \",#a-1)..\"</\"..a[#a][1].name..\">\"else bu=bu..\"</\"..a[#a][1].name..\">\"end;table.remove(a[#a],1)end end end end;return bu:match\"^%s*(.-)%s*$\"end;function self.transformClosures(bJ)local bK={}local bL=string.gmatch(bJ,\"{{([^}}]+)}}\")for bz in bL do table.insert(bK,bz)end;if#bK>0 then for bz=1,#bK do local bM=bK[bz]val=self.makeFunc(bM)bJ=string.gsub(bJ,self.literalize(\"{{\"..bM..\"}}\"),tostring(val))end end;return bJ end;function self.literalize(bp)return bp:gsub(\"[%(%)%.%%%+%-%*%?%[%]%^%$]\",function(bD)return\"%\"..bD end)end;function self.Read()return br(B(self.template))end;return self end;DUTTY={}local t={}local u={}local function bc(bb,bd)return bb:sub(bd,bd)end;local function be(bb)local aO={}local bj=false;local B=''local bk=false;for a=1,#bb do local bl=bc(bb,a)if bk==false and bj and bl==bj then table.insert(aO,B)bj=false;B=''elseif bk==false and#B==0 and(not bj and(bl=='\"'or bl==\"'\"))then bj=bl elseif bk==false and bl==' 'and bj==false then if#B>0 then table.insert(aO,B)B=''end elseif bk==false and bl=='\\\\'then bk=true else if bk then bk=false end;B=B..bl end end;if#B>0 then table.insert(aO,B)end;return aO end;function DUTTY.input(bb)for a,m in pairs(t)do if'function'==type(m)then m(bb)end end;local d=be(bb)if#d>0 then local bm=''local Q={}for a,bb in pairs(d)do if a==1 then bm=bb:lower()else table.insert(Q,bb)end end;if u[bm]and'function'==type(u[bm])then u[bm](table.unpack(Q))end end end;function DUTTY.onInput(m)if not'function'==type(m)then error('Event handler must be of type function')end;table.insert(t,m)end;function DUTTY.onCommand(aO,m)if not'function'==type(m)then error('Event handler must be of type function')end;u[aO:lower()]=m end;CSS_SHUD=[[\r\n#horizon {\r\n  left: 0;\r\n  top: 0;\r\n  position: fixed;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: radial-gradient(ellipse 27vw 11vw at 50% 51vw, rgba(1,5,8,0.6) 50%,rgba(1,5,8,0) 90%);\r\n  font-family: Verdana;\r\n\r\n}\r\n#artificialHorizon\r\n{\r\n  position: absolute;\r\n  display: block;\r\n  left: 50%;\r\n  top: 50%;\r\n  height: 50vw;\r\n  width: 50vw;\r\n  transform: translate(-50%, -50%);\r\n  filter: drop-shadow(0px 3px 4px #000000);\r\n}\r\n\r\n#artificialHorizon > svg {\r\n  width: 100%;\r\n}\r\n\r\n#speedometer::before {\r\n  display: block;\r\n  position: absolute;\r\n  content: ' ';\r\n  top: 0.25vh;\r\n  bottom: -17vh;\r\n  left: 50%;\r\n  width: 31vw;\r\n  border: 10px solid #]]..primaryColor..[[;\r\n  border-bottom: 0;\r\n  border-right: 0;\r\n  border-left: 0;\r\n  border-radius: 100%;\r\n  transform: translateX(-50%);\r\n  background-color: transparent;\r\n  filter: blur(100vw);\r\n}\r\n\r\n#speedometerBar {\r\n  display: block;\r\n  position: fixed;\r\n  left: 50%;\r\n  top: 77.2vh;\r\n  width: 30vw;\r\n  height: 24.5vh;\r\n  transform: translate(-50%);\r\n  content: ' ';\r\n  border: 10px solid #]]..primaryColor..[[;\r\n  border-bottom: 0;\r\n  border-right: 0;\r\n  border-left: 0;\r\n  border-radius: 100%;\r\n  background-size: contain;\r\n  background-color: transparent;\r\n  filter: blur(0.1vw);\r\n}\r\n\r\n#speedometer {\r\n  font-family: 'Verdana';\r\n  font-weight: normal;\r\n  font-style: normal;\r\n  position: fixed;\r\n  left: 50%;\r\n  bottom: 13vh;\r\n  font-size: 2vw;\r\n  transform: translate(-50%);\r\n  background-color: transparent;\r\n  width: 30vw;\r\n  height: 10vh;\r\n  text-align: center;\r\n}\r\n\r\n#speedometer .display {\r\n  position: absolute;\r\n  top: calc(50% + 1vh);\r\n  left: calc(50% + 0.25em);\r\n  transform: translate(-50%, -50%);\r\n  text-shadow: 0 0 0.75vw #]]..textShadow..[[;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-size: 2.8vw;\r\n}\r\n\r\n#speedometer .display .minor, #speedometer .unit {\r\n  position: relative;\r\n  left: -0.5em;\r\n  vertical-align: super;\r\n  font-size: 40%;\r\n}\r\n\r\n#speedometer .unit {\r\n  vertical-align: 50%;\r\n  font-size: 23%;\r\n  left: -1.33em;\r\n}\r\n\r\n#speedometer .accel {\r\n  font-size: 1.2vw;\r\n  text-shadow: 0 0 0.15vw #000000;\r\n  position: absolute;\r\n  left: 12.5%;\r\n  bottom: 0;\r\n  opacity: 0.75;\r\n}\r\n\r\n#speedometer .accel .major::before {\r\n  content: 'Δ';\r\n  font-size: 40%;\r\n}\r\n\r\n#speedometer .accel .unit {\r\n  left: -0.66em;\r\n}\r\n\r\n#speedometer .alt {\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: -0.65vh;\r\n  transform: translateX(-50%);\r\n  font-size: 0.65vw;\r\n  text-align: center;\r\n}\r\n\r\n#speedometer .misc {\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: -1.5vh;\r\n  transform: translateX(-50%);\r\n  font-size: 0.4vw;\r\n  text-align: center;\r\n}\r\n\r\n#speedometer .throttle {\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: -4.3vh;\r\n  transform: translateX(-50%);\r\n  font-size: 0.7vw;\r\n  text-align: center;\r\n}\r\n\r\n#speedometer .vertical {\r\n  font-size: 1.3vw;\r\n  text-shadow: 0 0 0.15vw #000000;\r\n  position: absolute;\r\n  right: 12.5%;\r\n  bottom: 0;\r\n  opacity: 0.75;\r\n  text-align: right;\r\n}\r\n\r\n#speedometer .vertical::after {\r\n  content: '↕ m/s';\r\n  vertical-align: 50%;\r\n  font-size: 33%;\r\n}\r\n\r\n#speedometer::after {\r\n  display: block;\r\n  font-size: 0;\r\n  background-size: contain;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 0.5vh;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  z-index: 666;\r\n  opacity: 0.5;\r\n}\r\n\r\n#horizon-menu {\r\n  text-transform: uppercase;\r\n  font-family: 'Verdana';\r\n  font-size: ]]..displaySize..[[vw;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: fixed;\r\n  bottom: 35%;\r\n  left: 2vw;\r\n  width: 18vw;\r\n  padding: 1vw;\r\n  transform: perspective(50vw) rotateY(35deg);\r\n  text-shadow: 0.1vw 0 0.25vw #000000;\r\n}\r\n#horizon-menu .item {\r\n  color: #fff;\r\n  padding: 0.2vw 0.5vw;\r\n  z-index: 99999;\r\n}\r\n#horizon-menu .item .right {\r\n  float: right;\r\n}\r\n#horizon-menu .item .red {\r\n  color: #]]..secondaryColor..[[;\r\n}\r\n#horizon-menu .item.active {\r\n  position: relative;\r\n  text-shadow: 0 0 0.75vw #]]..secondaryColor..[[;\r\n  transform: translateZ(0.33vw);\r\n  font-size: 1.15em;\r\n  transform-style: preserve-3d;\r\n}\r\n\r\n#horizon-menu .item.active::before {\r\n  display: block;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 15%;\r\n  bottom: 15%;\r\n  left: 0.1vw;\r\n  right: 0.1vw;\r\n  background: #]]..secondaryColor..[[aa;\r\n  z-index: -50;\r\n  filter: blur(1vw);\r\n  opacity: 0.2;\r\n}\r\n\r\n#horizon-menu .item.active::after {\r\n  display: block;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 20%;\r\n  bottom: 40%;\r\n  left: 0.1vw;\r\n  right: 0.1vw;\r\n  background: #]]..secondaryColor..[[aa;\r\n  z-index: -50;\r\n  filter: blur(0.2vw);\r\n  opacity: 0.3;\r\n}\r\n#horizon-menu .item.locked {\r\n  padding-left: 0.4vw;\r\n}\r\n#horizon-menu .item.locked::before {\r\n  display: block;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 15%;\r\n  bottom: 15%;\r\n  left: 0.1vw;\r\n  right: 0.1vw;\r\n  background: #]]..primaryColor..[[aa;\r\n  z-index: -50;\r\n  filter: blur(1vw);\r\n  opacity: 0.2;\r\n}\r\n#horizon-menu .item.locked::after {\r\n  display: block;\r\n  content: ' ';\r\n  position: absolute;\r\n  top: 20%;\r\n  bottom: 40%;\r\n  left: 0.1vw;\r\n  right: 0.1vw;\r\n  background: #]]..primaryColor..[[aa;\r\n  z-index: -50;\r\n  filter: blur(0.2vw);\r\n  opacity: 0.6;\r\n}\r\n\r\n#horizon-menu::after {\r\n  content: ' ';\r\n  filter: blur(1vw);\r\n  display: block;\r\n  border-top-left-radius: 1vw;\r\n  border-top-right-radius: 1vw;\r\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\r\n  background: linear-gradient(to bottom, rgba(0,0,0,0.65) 50%,rgba(0,0,0,0) 100%);\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: -99;\r\n}\r\n\r\n#horizon-menu::before {\r\n  content: ' ';\r\n  filter: blur(0.05vw);\r\n  display: block;\r\n  border-top-left-radius: 1vw;\r\n  border-top-right-radius: 1vw;\r\n  border-top: 0.25vw solid #]]..primaryColor..[[;\r\n  border-left: 0.25vw solid #]]..primaryColor..[[;\r\n  border-right: 0.25vw solid #]]..primaryColor..[[;\r\n  border-image: linear-gradient(to bottom, #]]..primaryColor..[[ff, #]]..primaryColor..[[00) 1 100%;\r\n  background: radial-gradient(ellipse at top, rgba(0,0,0,0.65) 0%,rgba(0,0,0,0) 100%);\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  z-index: -100;\r\n}\r\n\r\n#fuelTanks {\r\n  position: absolute;\r\n  top: 2%;\r\n  left: 2%;\r\n  width: 12vw;\r\n\r\n  color: #1b1b1b;\r\n  font-family: Verdana;\r\n  font-size: 0.8vh;\r\n  text-align: center;\r\n}\r\n#fuelTanks .fuel-meter {\r\n  display: block;\r\n  position: relative;\r\n  z-index: 1;\r\n  border-radius: 0.5em;\r\n  background: #c6c6c6;\r\n  padding: 0.5em 1em;\r\n  margin-bottom: 0.5em;\r\n  overflow: hidden;\r\n  box-sizing: border-box;\r\n}\r\n#fuelTanks .fuel-meter .fuel-level {\r\n  display: block;\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  bottom: 0px;\r\n  z-index: -1;\r\n  border: 0px none;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n#fuelTanks .fuel-meter.fuel-type-atmo .fuel-level { background: #1dd1f9; }\r\n#fuelTanks .fuel-meter.fuel-type-space .fuel-level { background: #fac31e; }\r\n#fuelTanks .fuel-meter.fuel-type-rocket .fuel-level { background: #bfa6ff; }\r\n\r\n\r\n]]fuelTanks={}FuelMass={}FuelTime={}fuelTypes={atmo={density=4.000},space={density=6.000},rocket={density=0.800}}local function bN(bO)if fuelTankHandlingAtmo>0 then return bO+bO*fuelTankHandlingAtmo*0.2 else return bO end end;local function bP(bO)if fuelTankHandlingSpace>0 then return bO+bO*fuelTankHandlingSpace*0.2 else return bO end end;local function bQ(bR,type)local bS=bR*fuelTypes[type].density;local bT=bS;if ContainerOptimization>0 then bT=bS-bS*ContainerOptimization*0.05 end;if FuelTankOptimization>0 then bT=bT-bS*FuelTankOptimization*0.05 end;return bT end;function normalizeHp(type,bU)local bV=0;if type==\"atmo\"then if bU>=50 and bU<163 then bV=50 elseif bU>=163 and bU<1315 then bV=163 elseif bU>=1315 and bU<10461 then bV=1315 elseif bU>=10461 then bV=10461 end elseif type==\"space\"then if bU>=50 and bU<187 then bV=50 elseif bU>=187 and bU<1496 then bV=187 elseif bU>=1496 and bU<15933 then bV=1496 elseif bU>=15933 then bV=15933 end elseif type==\"rocket\"then if bU>=366 and bU<736 then bV=366 elseif bU>=736 and bU<6231 then bV=736 elseif bU>=6231 and bU<68824 then bV=6231 elseif bU>=68824 then bV=68824 end end;return bV end;function normalizeHpAtmo(bU)end;function normalizeHpSpace(bU)end;function normalizeHpRocket(bU)end;fuelTankSpecsByMaxHP={atmo={_50={type=\"atmo\",size=\"XS\",capacity=function()return bN(100)end,baseWeight=35.030,maxWeight=function()return bQ(bN(100),\"atmo\")end},_163={type=\"atmo\",size=\"S\",capacity=function()return bN(400)end,baseWeight=182.670,maxWeight=function()return bQ(bN(400),\"atmo\")end},_1315={type=\"atmo\",size=\"M\",capacity=function()return bN(1600)end,baseWeight=988.670,maxWeight=function()return bQ(bN(1600),\"atmo\")end},_10461={type=\"atmo\",size=\"L\",capacity=function()return bN(12800)end,baseWeight=5480.000,maxWeight=function()return bQ(bN(12800),\"atmo\")end}},space={_50={type=\"space\",size=\"XS\",capacity=function()return bN(100)end,baseWeight=35.030,maxWeight=function()return bQ(bN(100),\"space\")end},_187={type=\"space\",size=\"S\",capacity=function()return bP(400)end,baseWeight=182.670,maxWeight=function()return bQ(bN(400),\"space\")end},_1496={type=\"space\",size=\"M\",capacity=function()return bP(1600)end,baseWeight=988.670,maxWeight=function()return bQ(bN(1600),\"space\")end},_15933={type=\"space\",size=\"L\",capacity=function()return bP(12800)end,baseWeight=5480.000,maxWeight=function()return bQ(bN(12800),\"space\")end}},rocket={_366={type=\"rocket\",size=\"XS\",capacity=function()return 400 end,baseWeight=173.420,maxWeight=function()return bQ(bN(400),\"rocket\")end},_736={type=\"rocket\",size=\"S\",capacity=function()return 800 end,baseWeight=886.720,maxWeight=function()return bQ(bN(800),\"rocket\")end},_6231={type=\"rocket\",size=\"M\",capacity=function()return 6400 end,baseWeight=4720.000,maxWeight=function()return bQ(bN(6400),\"rocket\")end},_68824={type=\"rocket\",size=\"L\",capacity=function()return 50000 end,baseWeight=25740.000,maxWeight=function()return bQ(bN(50000),\"rocket\")end}}}local function bW(C)return C==math.huge or C==-math.huge end;local function bX(C)return C~=C end;function disp_time(bY)if bW(bY)or bX(bY)then return\"inf\"end;local bZ=math.floor(bY/86400)local b_=math.floor(math.fmod(bY,86400)/3600)local c0=math.floor(math.fmod(bY,3600)/60)local c1=math.floor(math.fmod(bY,60))if bY>=86400 then return string.format(\"%dd:%02dh\",bZ,b_)elseif bY<86400 and bY>3600 then return string.format(\"%02dh:%02dm:%02ds\",b_,c0,c1)elseif bY<3600 and bY>60 then return string.format(\"%02dm:%02ds\",c0,c1)else return string.format(\"%02ds\",c1)end end;local c2=table.unpack;function fuelUsed(c3)local g={}function sum(t,...)if t then return t-sum(...)else return 0 end end;function average(d)if#g==c3 then table.remove(g,1)end;if d~=0 and d~=nil then g[#g+1]=d end;return sum(c2(g))end;return average end;function getFuelSituation()local c4={atmo={},space={},rocket={}}for a4,c5 in pairs(fuelTanks)do table.insert(c4[c5.type],{name=core.getElementNameById(a4),level=getFuelTankLevel(a4),time=getFuelTime(a4),specs=c5})end;return c4 end;function getFuelTankSpecs(c6,c7)local c8=math.floor(core.getElementMaxHitPointsById(c7))return fuelTankSpecsByMaxHP[c6]['_'..normalizeHp(c6,c8)]end;function getFuelTankLiters(c7)local c9=fuelTanks[c7]local ca=core.getElementMassById(c7)local cb=ca-c9.baseWeight;return cb end;function getFuelTankLevel(c7)local c9=fuelTanks[c7]local bT=c9.maxWeight()return getFuelTankLiters(c7)/bT end;function getFuelTime(c7)local c9=fuelTanks[c7]local cc=FuelTime[c7]or system.getArkTime()local cd=math.max(system.getArkTime()-cc,0.001)local ca=core.getElementMassById(c7)local ce=c9.baseWeight;local fuelUsed=FuelMass[c7](ca)local cf=cd/fuelUsed*(ca-ce)local cg=disp_time(cf)FuelTime[c7]=system.getArkTime()return cg end;function getFuelTanks()local ch=core.getElementIdList()for a,ci in pairs(ch)do local cj=core.getElementDisplayNameById(ci)if cj==\"Atmospheric Fuel Tank\"then local ck=getFuelTankSpecs(\"atmo\",ci)fuelTanks[ci]=ck;FuelMass[ci]=fuelUsed(2)elseif cj==\"Space Fuel Tank\"then fuelTanks[ci]=getFuelTankSpecs(\"space\",ci)FuelMass[ci]=fuelUsed(2)elseif cj==\"Rocket Fuel Tank\"then fuelTanks[ci]=getFuelTankSpecs(\"rocket\",ci)FuelMass[ci]=fuelUsed(2)end end end;getFuelTanks()function TagManager(cl)self={}local cm={}local cn=\"\"local function co(cp,cq)if cp==''then return false end;local cr,cs=0,{}for ct,cu in function()return string.find(cq,cp,cr,true)end do table.insert(cs,string.sub(cq,cr,ct-1))cr=cu+1 end;table.insert(cs,string.sub(cq,cr))return cs end;function self.tagsToString()if#cm==0 then cn=\"all\"else cn=table.concat(cm,\",\")end end;function self.Remove(i)if type(i)~=\"string\"then error(\"[TagManager] Unable to remove a tag - Not a string\")end;for a,k in pairs(cm)do if i==k then table.remove(cm,a)end end;self.tagsToString()end;function self.Add(i)if type(i)~=\"string\"then error(\"[TagManager] Unable to add a tag - Not a string\")end;for a,k in pairs(cm)do if i==k then return end end;table.insert(cm,i)self.tagsToString()end;if cl~=nil and type(cl)==\"string\"then for a,k in pairs(co(\",\",cl))do self.Add(k)end else self.Add(\"all\")end;setmetatable(self,{__tostring=function(self)return cn end})return self end;function Keybind(cv)local self={}self.Key=cv;local cw={}function self.Add(be,cx)if type(be)~=\"function\"then error(\"[Keybind] Unable to add callback - not a function\")end;table.insert(cw,{Function=be,Name=cx})end;function self.Remove(be)if type(be)~=\"function\"then error(\"[Keybind] Unable to remove callback - not a function\")end;local cy={}for a,k in pairs(cw)do cy[k.Function]=a end;for a,k in pairs(cy)do if a==be then cw[k]=nil end end end;function self.GetNames()local cz={}for G,k in pairs(cw)do if k.Name then table.insert(cz,k.Name)end end;return cz end;function self.Call()for G,k in pairs(cw)do k.Function(self.Key)end end;return self end;function KeybindController()local self={}local cA={\"forward\",\"backward\",\"left\",\"right\",\"yawleft\",\"yawright\",\"up\",\"down\",\"gear\",\"light\",\"landing\",\"brake\",\"option1\",\"option2\",\"option3\",\"option4\",\"option5\",\"option6\",\"option7\",\"option8\",\"option9\",\"stopengines\",\"speedup\",\"speeddown\",\"antigravity\",\"booster\",\"lshift\",\"lalt\",\"lalt\",\"strafeleft\",\"straferight\"}self.keyUp={}self.keyDown={}self.keyLoop={}function self.Call(cB,type)if type==\"up\"then if self.keyUp[cB]then self.keyUp[cB].Call(cB)end elseif type==\"down\"then if self.keyDown[cB]then self.keyDown[cB].Call(cB)end else if self.keyLoop[cB]then self.keyDown[cB].Call(cB)end end end;function self.GetNamedKeybinds()local cz={}for a,k in pairs(self.keyUp)do local cC=k.GetNames()if#cC>0 then for B=1,#cC do table.insert(cz,{Key=k.Key,Name=cC[B]})end end end;for a,k in pairs(self.keyDown)do local cC=k.GetNames()if#cC>0 then for B=1,#cC do table.insert(cz,{Key=k.Key,Name=cC[B]})end end end;for a,k in pairs(self.keyLoop)do local cC=k.GetNames()if#cC>0 then for B=1,#cC do table.insert(cz,{Key=k.Key,Name=cC[B]})end end end;table.sort(cz,function(t,u)return t.Key<u.Key end)return cz end;self.Init=function()end;local function cD()for B=1,#cA do self.keyUp[cA[B]]=Keybind(cA[B])self.keyDown[cA[B]]=Keybind(cA[B])self.keyLoop[cA[B]]=Keybind(cA[B])end end;cD()return self end;keybindPresets={}local a2=require('atlas')planetaryReference=PlanetRef()galaxyReference=planetaryReference(a2)helios=galaxyReference[0]kinematics=Kinematics()local cE=require(\"dkjson\")local cF=cE.decode;local a2=require('atlas')local cG=string.find;function getJsonNum(cE,cv,cD)local cH=[[\"]]..cv..[[\"%s*:%s*(-?[0-9.e-]+)]]local cI,cJ,cK=cG(cE,cH,cD)return tonumber(cK),cI,cJ end;function round(val,cL)if cL then return math.floor(val*10^cL+0.5)/10^cL else return math.floor(val+0.5)end end;function STEC(core,cM,cN)local self={}self.core=core;self.construct=construct;self.constructMaxSpeed=construct.getMaxSpeed()*3.6;self.control=cM;self.nearestPlanet=helios:closestBody(construct.getWorldPosition())self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=vec3(construct.getWorldPosition()),gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=cM.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0,atlasAltitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())}if antigrav and antigrav.getState()==1 then self.world.gravity=self.nearestPlanet:getGravity(construct.getWorldPosition())end;self.target={prograde=function()return self.world.velocity:normalize()end,retrograde=function()return-self.world.velocity:normalize()end,radial=function()return self.nearestPlanet:getGravity(construct.getWorldPosition()):normalize()end,antiradial=function()return-self.nearestPlanet:getGravity(construct.getWorldPosition()):normalize()end,normal=function()return self.world.velocity:cross(self.world.right):normalize()end,antinormal=function()return self.world.velocity:cross(self.world.left):normalize()end}function self.generatePlanetTable()local cO={}local cP=require('atlas')for G,cQ in pairs(cP[0])do cO[cQ.name[1]]=function()return helios[cQ.id]:getGravity(construct.getWorldPosition()):normalize()end end;return cO end;self.planets=self.generatePlanetTable()self.id=construct.getId()self.forwardThrust=0;self.atmoThrust=0;self.spaceThrust=0;self.controlMode=unit.getControlMode()self.alternateCM=false;self.tempThrottle=0;self.tempCruise=0;self.tags=TagManager(\"all\")self.targetVector=nil;self.targetVectorAutoUnlock=true;self.targetGoTo=nil;self.altitude=0;self.mass=self.construct.getMass()self.thrust=vec3(0,0,0)self.direction=vec3(0,0,0)self.rotation=vec3(0,0,0)self.rotationSpeed=2;self.rotationSpeedMin=0.01;self.rotationSpeedMax=5;self.rotationStep=0.03;self.brakingFactor=10;self.angularThrust=vec3(0,0,0)self.inertialDampening=false;self.IDIntensity=5;self.brake=false;self.counterGravity=true;self.followGravity=false;self.gravityFollowSpeed=4;self.throttle=1;self.pocket=pocket;self.altitudeHold=0;self.cruiseSpeed=0;self.ignoreVerticalThrottle=false;self.ignoreHorizontalThrottle=true;self.localVelocity=vec3(construct.getVelocity())self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.vtolPriority=true;self.disableVtol=false;self.disabledTags=\"\"local cc=system.getArkTime()self.thrustVec=vec3(0,0,0)self.trajectoryDiff=0;self.ETA=0;self.simulationPos=vec3(0,0,0)self.priorityTags1=\"airfoil,torque,ground\"self.priorityTags2=\"atmospheric_engine,space_engine\"self.priorityTags3=\"brake,vertical\"self.brakeDistance=0;self.accelTime=0;self.targetDist=0;self.inertialMass=0;self.maxBrake=cF(unit.getWidgetData()).maxBrake;self.debug=vec3(0,0,0)self.deviationAngle=0;self.stopping=false;function getAngle(t,u,bc)if t+bc<u then u=t end;return math.deg(math.acos((t^2+u^2-bc^2)/(2*t*u)))end;function getGapFromAngle(t,u,cR)return math.sqrt(t^2+u^2-2*u*t*math.cos(cR))end;function errHandler(br)system.print(\"Error: \"..br)return\"ERROR\"end;function simulateAhead(cS,cT)local cU=self.world.velocity:clone()local cu=self.world.position:clone()local cV=self.world.acceleration:clone()local cW=cS/cT;for cX=0,cW do local cY=simulate(cT,cu,cU,cV)cU=cY.velocity;cu=cY.position;if cY.collision~=nil then cY.time=cX*cT;return cY end end;return{[\"position\"]=cu,[\"velocity\"]=cU,[\"collision\"]=nil}end;function simulate(cZ,c_,d0,d1)local bA=6.6740831*10^-11;local d2=nil;local d3=0;local d4=d0;local d5=nil;local d6=c_;for B=1,#a2[0]do local aq=a2[0][B]local d7=vec3(aq.center[1],aq.center[2],aq.center[3])local ax=c_-d7:normalize()local d8=c_-d7:len()if d8<aq.radius or d5~=nil then if d5==nil then d5=aq;d2=aq end;return{[\"position\"]=d6,[\"velocity\"]=vec3(0,0,0),[\"collision\"]=d5}end;local d9=bA*ship.mass*aq.GM/d8^2;local da=ax*d9/ship.mass*-cZ;d4=d4+da;if d2==nil or(d8-aq.radius)/d9<(c_-vec3(d2.center[1],d2.center[2],d2.center[3]):len()-d2.radius)/d9 then d2=aq end;if d4:len()>d3 then d3=d4:len()end end;if d5==nil and cZ>0 then if d2~=nil then end;d4=d4+d1*cZ;if d4:len()>8333.333333 then d4=d4:normalize()*8333.333333 end;d6=d6+d4*cZ end;return{[\"position\"]=d6,[\"velocity\"]=d4,[\"collision\"]=d5}end;function sMovingAverage(c3)local g={}function _sum(t,...)if t then return t+_sum(...)else return 0 end end;function _average(d)if#g==c3 then table.remove(g,1)end;g[#g+1]=d;return _sum(table.unpack(g))/#g end;return _average end;local db=sMovingAverage(25)function self.updateWorld()self.world={up=vec3(construct.getWorldOrientationUp()),down=-vec3(construct.getWorldOrientationUp()),left=-vec3(construct.getWorldOrientationRight()),right=vec3(construct.getWorldOrientationRight()),forward=vec3(construct.getWorldOrientationForward()),back=-vec3(construct.getWorldOrientationForward()),velocity=vec3(construct.getWorldVelocity()),acceleration=vec3(construct.getWorldAcceleration()),position=vec3(construct.getWorldPosition()),gravity=vec3(core.getWorldGravity()),vertical=vec3(core.getWorldVertical()),atmosphericDensity=cM.getAtmosphereDensity(),nearPlanet=unit.getClosestPlanetInfluence()>0,atlasAltitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())}self.nearestPlanet=helios:closestBody(construct.getWorldPosition())if antigrav and antigrav.getState()==1 then self.world.gravity=self.nearestPlanet:getGravity(construct.getWorldPosition())end;self.rollDegrees=self.world.vertical:angle_between(self.world.left)/math.pi*180-90;if self.world.vertical:dot(self.world.up)>0 then self.rollDegrees=180-self.rollDegrees end;self.pitchRatio=self.world.vertical:angle_between(self.world.forward)/math.pi-0.5;self.AngularVelocity=vec3(construct.getWorldAngularVelocity())self.AngularAcceleration=vec3(construct.getWorldAngularAcceleration())self.AngularAirFriction=vec3(construct.getWorldAirFrictionAngularAcceleration())self.airFriction=vec3(construct.getWorldAirFrictionAcceleration())self.mass=self.construct.getMass()self.altitude=self.nearestPlanet:getAltitude(construct.getWorldPosition())self.localVelocity=vec3(construct.getVelocity())if self.vtolPriority then self.priorityTags1=\"brake,airfoil,torque,vertical,lateral,longitudinal\"self.priorityTags2=\"atmospheric_engine,space_engine\"self.priorityTags3=\"\"else self.priorityTags1=\"brake,airfoil,torque,lateral,longitudinal\"self.priorityTags2=\"atmospheric_engine,space_engine\"self.priorityTags3=\"vertical\"end;local dc=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local dd=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,1):unpack()})local de=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})local df=0;if self.world.atmosphericDensity<0.1 then df=2 end;virtualGravityEngine=vec3(library.systemResolution3({self.world.right:unpack()},{self.world.forward:unpack()},{self.world.up:unpack()},{self.world.gravity*self.mass:unpack()}))self.MaxKinematics={Forward=math.abs(dc[1+df]+virtualGravityEngine.y),Backward=math.abs(dc[2+df]-virtualGravityEngine.y),Up=math.abs(dd[1+df]+virtualGravityEngine.z),Down=math.abs(dd[2+df]-virtualGravityEngine.z),Right=math.abs(de[1+df]+virtualGravityEngine.x),Left=math.abs(de[2+df]-virtualGravityEngine.x)}if self.world.atmosphericDensity>0.01 and self.world.atmosphericDensity<0.1 then self.MaxKinematics.Forward=math.abs(dc[1]+dc[3]+virtualGravityEngine.y)end;self.maxBrake=cF(unit.getWidgetData()).maxBrake;local bc=50000000/3600;local k=self.world.velocity:len()local bs=1/math.sqrt(1-k*k/(bc*bc))self.inertialMass=utils.clamp(self.mass*bs,self.mass,self.mass*1.5)end;function self.calculateAccelerationForce(aW,bY)return self.mass*aW/bY end;function clamp(d,dg,dh)return math.min(dh,math.max(d,dg))end;function round(q,di)local dj=10^(di or 0)return math.floor(q*dj+0.5)/dj end;function math.sign(k)return k>=0 and 1 or-1 end;function math.round(k,dk)dk=dk or 1;return math.floor(k/dk+math.sign(k)*0.5)*dk end;function self.throttleUp()self.throttle=clamp(self.throttle+0.05,0,1)end;function self.throttleDown()self.throttle=clamp(self.throttle-0.05,0,1)end;function self.scaleRotation()if self.rotationSpeed<=self.rotationSpeedMax then self.rotationSpeed=self.rotationSpeed+self.rotationStep end end;function self.worldToLocal(dl)return vec3(library.systemResolution3({self.world.right:unpack()},{self.world.forward:unpack()},{self.world.up:unpack()},{dl:unpack()}))end;function self.localToRelative(cr,dm,dn,dp)local dq,dr,ds=dn:unpack()local dt,du,dv=dp:unpack()local dw,dx,dy=dm:unpack()local dz,dA,dB=cr:unpack()local dC=dz*dq+dA*dt+dB*dw;local dD=dz*dr+dA*du+dB*dx;local dE=dz*ds+dA*dv+dB*dy;return vec3(dC,dD,dE)end;function self.localToWorld(dl)dl={dl:unpack()}local dq,dr,ds=self.world.right:unpack()local dt,du,dv=self.world.forward:unpack()local dw,dx,dy=self.world.up:unpack()local dz,dA,dB=dl:unpack()local dC=dz*dq+dA*dt+dB*dw;local dD=dz*dr+dA*du+dB*dx;local dE=dz*ds+dA*dv+dB*dy;return vec3(dC,dD,dE)end;function moveWaypointZ(dl,V)return dl-self.nearestPlanet:getGravity(dl):normalize()*V end;function moveWaypointY(V,ak)local bt=moveWaypointZ(self.world.position,V-self.altitude)return bt-self.world.right:cross(self.nearestPlanet:getGravity(self.world.position)):normalize()*-ak end;function moveWaypoint(am,dF,ak)return am+am-dF:normalize()*ak end;function self.getTrajectory(ak)ak=ak or 1;local k=self.world.position+self.world.velocity+self.world.gravity:normalize()return self.world.position-self.world.position-k:normalize()*ak end;function self.apply()local cd=math.max(system.getArkTime()-cc,0.001)self.updateWorld()local dG=self.thrust;local dH=self.angularThrust;local dI=false;local dJ=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,1,0):unpack()})local dK=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,1):unpack()})local dL=construct.getMaxThrustAlongAxis(\"all\",{vec3(0,0,-1):unpack()})local dM=construct.getMaxThrustAlongAxis(\"all\",{vec3(1,0,0):unpack()})self.forwardThrust=self.MaxKinematics.Forward;if self.direction.x>0 then dG=dG+self.world.right*self.MaxKinematics.Right*self.throttle end;if self.direction.x<0 then dG=dG-self.world.right*self.MaxKinematics.Right*self.throttle end;if self.direction.y>0 then dG=dG+self.world.forward*self.MaxKinematics.Forward*self.throttle end;if self.direction.y<0 then dG=dG-self.world.forward*self.MaxKinematics.Backward*self.throttle end;if self.direction.z>0 then dG=dG+self.world.up*self.MaxKinematics.Up;if not self.ignoreVerticalThrottle then dG=dG*self.throttle end end;if self.direction.z<0 then dG=dG+-self.world.up*self.MaxKinematics.Down;if not self.ignoreVerticalThrottle then dG=dG*self.throttle end end;if self.rotation.x~=0 then self.scaleRotation()dH=dH+self.world.forward:cross(self.world.up)*self.rotation.x*self.rotationSpeed;if self.targetVectorAutoUnlock then self.targetVector=nil;self.followGravity=false;self.altitudeHold=0 end end;if self.rotation.y~=0 then self.scaleRotation()dH=dH+self.world.up:cross(self.world.right)*self.rotation.y*self.rotationSpeed end;if self.rotation.z~=0 then self.scaleRotation()dH=dH+self.world.forward:cross(self.world.right)*self.rotation.z*self.rotationSpeed end;if self.followGravity and self.rotation.x==0 then local dN=self.world.up:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition()))local dO=1;if self.pocket then if self.direction.x<0 then dO=0.25;dN=dN+ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)elseif self.direction.x>0 then dO=0.25;dN=dN-ship.world.right:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)elseif self.direction.y<0 then dN=dN+ship.world.forward:cross(-self.nearestPlanet:getGravity(construct.getWorldPosition())*0.25)end end;dN=dN*dO;dH=dH+dN end;if self.altitudeHold~=0 then local dP=self.altitudeHold-self.altitude;local dQ=moveWaypointY(self.altitudeHold,self.world.velocity:len()*3+50)self.targetVector=dQ-self.world.position:normalize()dH=dH-self.world.right:cross(self.world.forward:cross(self.world.gravity:normalize()))*self.rotationSpeed*9-(self.AngularVelocity*3-self.AngularAirFriction*3)dG=dG-self.nearestPlanet:getGravity(construct.getWorldPosition())*self.mass*dP end;if self.targetVector==nil then self.gotoLock=nil end;if self.gotoLock~=nil then local dR=ap_stop_distance;if not self.inertialDampening then self.inertialDampening=true end;self.direction.y=0;self.vtolPriority=true;local dS=self.constructMaxSpeed;local dT=self.world.position-self.gotoLock:normalize()self.targetDist=math.abs(self.world.position-self.gotoLock:len()-dR)local k=self.simulationPos;self.trajectoryDiff=db(k-self.gotoLock:len())local dU=dG:dot(self.world.position-self.gotoLock)self.brakeDistance,self.accelTime=kinematics.computeDistanceAndTime(self.world.velocity+self.world.gravity:len(),0,self.inertialMass,dU,0,self.maxBrake)if self.brakeDistance>=self.targetDist-dR or self.targetDist<=dR then dS=self.targetDist-self.brakeDistance;self.stopping=true end;if self.trajectoryDiff>10 and self.world.velocity:len()>250/3.6 and not self.stopping then end;dT=self.world.position-self.gotoLock:normalize()self.targetVector=-dT;if self.targetDist<1 then dS=0;self.gotoLock=nil;self.targetVector=nil;self.stopping=false end;self.ETA=self.targetDist/self.world.velocity:len()+self.accelTime;dG=dG-dT*self.mass*utils.clamp(self.targetDist*3.6,0.3,math.abs(dS)/3.6*self.IDIntensity)end;if self.alternateCM then local dS=self.cruiseSpeed/3.6;local az=self.world.forward:dot(self.airFriction)local dV=dS-az;local dW=self.world.forward*dV;local dX=dW-self.world.velocity;dG=dG+dX*self.mass end;if self.inertialDampening then local dY=self.localVelocity;local dX=vec3(0,0,0)local dZ=self.direction or vec3(0,0,0)if dZ.x==0 then dX.x=dY.x end;if dZ.y==0 then dX.y=dY.y end;if dZ.z==0 then dX.z=dY.z end;dX=self.localToRelative(dX,self.world.up,self.world.right,self.world.forward)dG=dG-dX*self.mass*self.IDIntensity end;if self.brake then local d_=self.world.velocity:len()dG=-self.world.velocity*self.mass*math.max(self.brakingFactor*math.max(1,d_*0.5),d_*d_)end;if self.targetVector~=nil then local e0=vec3(self.world.forward.x,self.world.forward.y,self.world.forward.z)if type(self.targetVector)==\"function\"then e0=self.targetVector()elseif type(self.targetVector)==\"table\"then e0=self.targetVector end;local e1=self.mass*0.000001*2+4;dH=dH+self.world.forward:cross(e0)*self.rotationSpeedMax-(self.AngularVelocity*e1-self.AngularAirFriction*e1)end;if self.counterGravity then if self.direction.z>=0 then dG=dG-self.nearestPlanet:getGravity(construct.getWorldPosition())*self.mass end end;dH=dH-(self.AngularVelocity*2-self.AngularAirFriction*2)dG=dG/self.mass;if self.controlMode~=unit.getControlMode()then self.controlMode=unit.getControlMode()if unit.getControlMode()==0 then self.tempCruise=self.cruiseSpeed;self.cruiseSpeed=0;self.throttle=self.tempThrottle;self.alternateCM=false end;if unit.getControlMode()==1 then self.tempThrottle=self.throttle;self.throttle=0;self.alternateCM=true end end;if self.disableVtol then self.disabledTags=\"vtol\"else self.disabledTags=\"\"end;self.control.setEngineCommand(\"all\",{dG:unpack()},{dH:unpack()},false,false,self.priorityTags1,self.priorityTags2,self.priorityTags3)self.control.setEngineCommand(self.disabledTags)self.thrustVec=self.worldToLocal(dG)dH=vec3(0,0,0)dG=vec3(0,0,0)cc=system.getArkTime()end;return self end;ship=STEC(core,unit)vec2=require('cpml/vec2')mat4=require(\"cpml/mat4\")local e2=string.format;function round2(q,di)if q~=nil then return tonumber(string.format(\"%.\"..(di or 0)..\"f\",q))end end;function SpeedConvert(C)if not C or C==0 then return{0,\"00\",\"km/h\"}end;if C>5000 then local e3=tonumber(tostring(round2(C/55.55,2)):match(\"%.(%d+)\"))e3=string.format(\"%02d\",e3)return{round2(C/55.55),e3,\"su/h\"}end;local e3=tonumber(tostring(round2(C/3.6,2)):match(\"%.(%d+)\"))e3=string.format(\"%02d\",e3)return{round2(C*3.6),e3,\"km/h\"}end;function CruiseControl(C)local e4=0;if ship.cruiseSpeed<500 then e4=C*10 elseif ship.cruiseSpeed>=500 and ship.cruiseSpeed<=1999 then e4=C*50 elseif ship.cruiseSpeed>=2000 and ship.cruiseSpeed<=9999 then e4=C*100 elseif ship.cruiseSpeed>=10000 then e4=C*1000 end;local dh=construct.getMaxSpeed()ship.cruiseSpeed=utils.clamp(ship.cruiseSpeed+e4,-dh*3.6,dh*3.6)end;function getControlMode()if ship.alternateCM then return\"Cruise\"else return\"Travel\"end end;function SHUDMenuItem(e5,cB,e6)local self={}self.Enabled=true;self.Active=false;self.Content=e5;self.Class=\"\"self.Action=cB or function(system,unit,self)end;self.Update=e6 or function(system,unit,self)end;function self.Disable()self.Enabled=false;return self end;function self.Enable()self.True=false;return self end;function self.Lock()SHUD.ScrollLock=true;self.Active=true;self.Class=\"locked\"return self end;function self.Unlock()SHUD.ScrollLock=false;self.Active=false;self.Class=\"\"return self end;return self end;SHUD=function()local self={}self.Enabled=false;self.FreezeUpdate=false;self.IntroPassed=false;self.FOV=system.getCameraHorizontalFov()self.ScreenW=system.getScreenWidth()self.ScreenH=system.getScreenHeight()self.Resolution=vec2(self.ScreenW,self.ScreenH)self.Opacity=1;self.SvgMinX=-round(self.ScreenW/4/2,0)self.SvgMinY=-round(self.ScreenH/4/2,0)self.SvgWidth=round(self.ScreenW/4,0)self.SvgHeight=round(self.ScreenH/4,0)self.Markers={}self.MarkerBuffer={}function self.worldToScreen(cr)local bI=mat4():perspective(self.FOV,self.ScreenW/self.ScreenH,0.1,100000)local e7=ship.world.position-vec3(player.getWorldPosition())local e8=mat4():look_at(e7,e7+ship.world.forward,ship.world.up)local cr=e8*bI*{cr.x,cr.y,cr.z,1}cr[1]=cr[1]/cr[4]*0.5+0.5;cr[2]=cr[2]/cr[4]*0.5+0.5;cr[1]=cr[1]*100;cr[2]=cr[2]*100;return vec3(cr[1],cr[2],cr[3])end;local e9=SHUDMenuItem;local ea=DynamicDocument;function self.UpdateMarkers()self.MarkerBuffer={}for B=1,#self.Markers do local m=self.Markers[B]local eb={}local Q=vec3(0,0,0)if type(m.Position)==\"function\"then eb.pos=m.Position()Q=m.Position()else eb.pos=m.Position;Q=m.Position end;eb.pos=self.worldToScreen(eb.pos)eb.class=m.Class;eb.content='&nbsp;'if m.Name then eb.content=[[<div class=\"name\">]]..m.Name..[[</div>]]end;if m.ShowDistance then eb.content=eb.content..[[<div class=\"distance\">]]..round2(ship.world.position-Q:len())..[[m</div>]]end;if eb.pos.z>0 then self.MarkerBuffer[#self.MarkerBuffer+1]=eb end end end;local function ec(br)return br:gsub(\"%%\",\"%%%%\")end;if antigrav~=nil then antiGravState=false;antiGravBaseAlt=antigrav.getBaseAltitude()antiGravSetPoint=antigrav.getBaseAltitude()targetAlt=antigrav.getBaseAltitude()antiGravAdjMultiplier=100;function updateAGGState()if antigrav.getState()==1 then antiGravState=true else antiGravState=false end end;antiGravSetPoint=1000;function updateAGGBaseAlt()antiGravBaseAlt=antigrav.getBaseAltitude()end;function readAGGState()local ed=antigrav.getWidgetData()local y,cr,ee=cE.decode(ed,1,nil)gvCurrentBaseAltitude=0;gvCurrentAntiGPower=0;gvCurrentAntiGravityField=0;if ee then debugp(\"Error:\"..ee)else if type(y)==\"table\"then gvCurrentBaseAltitude=math.floor(y.baseAltitude)gvCurrentAntiGPower=math.floor(y.antiGPower*100)gvCurrentAntiGravityField=math.floor(y.antiGravityField*100)end end end;showAG=false;function showAGToggle()if showAG then antigrav.showWidget()else antigrav.hideWidget()end end end;function self.MakeBooleanIndicator(ef)local eg=[[<span class=\"right\">\r\n            <i dd-if=\"varName == true\">✓&nbsp;</i>\r\n            <i dd-if=\"varName == false\">✘&nbsp;</i>\r\n        </span>]]return eg:gsub(\"varName\",ec(ef))end;function self.MakeSliderIndicator(ef,eh)eh=eh or\"\"local eg=[[<span class=\"right\">{{varName}}{{suffix}}<i>&udarr;&nbsp;</i></span>]]return eg:gsub(\"varName\",ec(ef)):gsub(\"{{suffix}}\",ec(eh))end;function self.GenerateMenuLink(ei,ej)return e9(ei..self.MenuIcon,function()self.SelectMenu(ej)end)end;self.MenuIcon=[[<span class=\"right\"><i>&gt;&nbsp;</i></span>]]self.BackButton=e9([[<i>&lt;&nbsp;</i>&nbsp;]]..\"Back\",function()SHUD.Menu=SHUD.MenuList.prev;SHUD.CurrentIndex=1 end)if antigrav~=nil then self.Menu={e9(ea([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\",\"%\")),function(G,G,bq)if bq.Active then bq.Unlock()else bq.Lock()end end,function(system,G,bq)ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end),e9(ea(\"<span>Mouse Steering<span>\"..self.MakeBooleanIndicator(\"mouse.enabled\")),function()mouse.enabled=not mouse.enabled;if mouse.enabled then mouse.lock()else mouse.unlock()end end),self.GenerateMenuLink(\"Flight Mode\",\"flightMode\"),self.GenerateMenuLink(\"Anti-Gravity\",\"antigravity\"),self.GenerateMenuLink(\"Stability Assist\",\"stability\"),self.GenerateMenuLink(\"Vector Locking\",\"vectorLock\"),self.GenerateMenuLink(\"Ship Stats\",\"shipStats\"),e9([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon,function()self.SelectMenu(\"hotkeys\")end)}else self.Menu={e9(ea([[<span>Throttle<span>]]..self.MakeSliderIndicator(\"round2(ship.throttle * 100)\",\"%\")),function(G,G,bq)if bq.Active then bq.Unlock()else bq.Lock()end end,function(system,G,bq)ship.throttle=utils.clamp(ship.throttle+system.getMouseWheel()*0.05,-1,1)end),e9(ea(\"<span>Mouse Steering<span>\"..self.MakeBooleanIndicator(\"mouse.enabled\")),function()mouse.enabled=not mouse.enabled;if mouse.enabled then mouse.lock()else mouse.unlock()end end),self.GenerateMenuLink(\"Flight Mode\",\"flightMode\"),self.GenerateMenuLink(\"Stability Assist\",\"stability\"),self.GenerateMenuLink(\"Vector Locking\",\"vectorLock\"),self.GenerateMenuLink(\"Ship Stats\",\"shipStats\"),e9([[<i>&#9432;&nbsp;</i><span>&nbsp;Hotkeys</span>]]..self.MenuIcon,function()self.SelectMenu(\"hotkeys\")end)}end;self.MenuList={}self.MenuList.flightMode={}self.MenuList.shipStats={e9(ea([[<span>Core ID:</span><span class=\"right\">{{ship.id}}</span>]])).Disable(),e9(ea([[<span>Mass:</span><span class=\"right\">{{round2(ship.mass/1000,2)}} Ton</span>]])).Disable(),e9(ea([[<span>FMax:</span><span class=\"right\">{{round2(ship.fMax/1000,2)}} KN</span>]])).Disable(),e9(ea([[<span>Pos X:</span><span class=\"right\">{{round2(ship.world.position.x)}}</span>]])).Disable(),e9(ea([[<span>Pos Y:</span><span class=\"right\">{{round2(ship.world.position.y)}}</span>]])).Disable(),e9(ea([[<span>Pos Z:</span><span class=\"right\">{{round2(ship.world.position.z)}}</span>]])).Disable()}if antigrav~=nil then self.MenuList.antigravity={e9(ea(\"<span>AGG Toggle<span>\"..self.MakeBooleanIndicator(\"antiGravState\")),function()antigrav.toggle()end),e9(ea([[<span>Multiplier<span>]]..self.MakeSliderIndicator(\"antiGravAdjMultiplier\",\"\")),function(G,G,bq)if bq.Active then bq.Unlock()else bq.Lock()end end,function(system,G,bq)antiGravAdjMultiplier=utils.clamp(antiGravAdjMultiplier+system.getMouseWheel()*10,1,500)end),e9(ea([[<span>Alt Setpoint<span>]]..self.MakeSliderIndicator(\"round2(targetAlt,0)\",\"m\")),function(G,G,bq)if bq.Active then bq.Unlock()else bq.Lock()end end,function(system,G,bq)targetAlt=utils.clamp(targetAlt+system.getMouseWheel()*antiGravAdjMultiplier,1000,100000)antigrav.setBaseAltitude(targetAlt)end),e9(ea([[<span>Base Altitude:</span><span class=\"right\">{{round2(gvCurrentBaseAltitude,0)}}</span>]])).Disable(),e9(ea([[<span>HOLD:</span><span class=\"right\">{{gvCurrentAntiGPower}}%</span>]])).Disable(),e9(ea([[<span>AG Field:</span><span class=\"right\">{{gvCurrentAntiGravityField}}Es</span>]])).Disable(),e9(ea(\"<span>Show AG Widget<span>\"..self.MakeBooleanIndicator(\"showAG\")),function()showAG=not showAG;showAGToggle()end)}end;self.MenuList.stability={e9(ea(\"<span>Gravity Suppression<span>\"..self.MakeBooleanIndicator(\"ship.counterGravity\")),function()ship.counterGravity=not ship.counterGravity end),e9(ea(\"<span>Gravity Follow</span>\"..self.MakeBooleanIndicator(\"ship.followGravity\")),function()ship.targetVector=nil;ship.followGravity=not ship.followGravity end),e9(ea(\"<span>Inertial Dampening<span>\"..self.MakeBooleanIndicator(\"ship.inertialDampening\")),function()ship.inertialDampening=not ship.inertialDampening end)}self.MenuList.vectorLock={e9(ea(\"<span>Auto Unlock<span>\"..self.MakeBooleanIndicator(\"ship.targetVectorAutoUnlock\")),function()ship.targetVectorAutoUnlock=not ship.targetVectorAutoUnlock end),e9(\"Unlock\",function()ship.followGravity=false;ship.targetVector=nil end),e9(\"Lock Prograde\",function()ship.followGravity=false;ship.targetVector=ship.target.prograde end),e9(\"Lock Retrograde\",function()ship.followGravity=false;ship.targetVector=ship.target.retrograde end),e9(\"Lock Radial\",function()ship.followGravity=false;ship.targetVector=ship.target.radial end),e9(\"Lock Anti-Radial\",function()ship.followGravity=false;ship.targetVector=ship.target.antiradial end),e9(\"Lock Normal\",function()ship.followGravity=false;ship.targetVector=ship.target.normal end),e9(\"Lock Anti-Normal\",function()ship.followGravity=false;ship.targetVector=ship.target.antinormal end)}self.MenuList.planetaryVLock={e9(\"Lock Sancuary\",function()ship.followGravity=false;ship.targetVector=ship.planets.sancuary end),e9(\"Lock Madis\",function()ship.followGravity=false;ship.targetVector=ship.planets.madis end),e9(\"Lock Thades\",function()ship.followGravity=false;ship.targetVector=ship.planets.thades end),e9(\"Lock Alioth\",function()ship.followGravity=false;ship.targetVector=ship.planets.alioth end),e9(\"Lock Jago\",function()ship.followGravity=false;ship.targetVector=ship.planets.jago end),e9(\"Lock Sicari\",function()ship.followGravity=false;ship.targetVector=ship.planets.sicari end),e9(\"Lock Sinnen\",function()ship.followGravity=false;ship.targetVector=ship.planets.sinnen end),e9(\"Lock Talemai\",function()ship.followGravity=false;ship.targetVector=ship.planets.talemai end),e9(\"Lock Teoma\",function()ship.followGravity=false;ship.targetVector=ship.planets.teoma end)}self.MenuList.hotkeys={}local ek=\"<style>\"..CSS_SHUD..\"</style>\"self.fuel=nil;function getFuelRenderedHtml()self.fuel=getFuelSituation()local el=\"\"local em=function(type,ck)local en=100*ck.level;local eo=ck.level*ck.specs.capacity()return'<div class=\"fuel-meter fuel-type-'..type..'\"><hr class=\"fuel-level\" style=\"width:'..en..'%%;\" />'..ck.time..' ('..math.floor(en)..'%%, '..math.floor(eo)..'L)</div>'end;for G,ck in pairs(self.fuel.atmo)do el=el..em(\"atmo\",ck)end;for G,ck in pairs(self.fuel.space)do el=el..em(\"space\",ck)end;for G,ck in pairs(self.fuel.rocket)do el=el..em(\"rocket\",ck)end;self.SHUDFuelHtml=el end;local ek=\"<style>\"..CSS_SHUD..\"</style>\"local ep=ea(ek..[[\r\n    <div id=\"horizon\" style=\"opacity: {{SHUD.Opacity}};\">\r\n        <div id=\"artificialHorizon\">\r\n            <svg height=\"100%\" width=\"100%\" viewBox=\"{{SHUD.SvgMinX}} {{SHUD.SvgMinY}} {{SHUD.SvgWidth}} {{SHUD.SvgHeight}}\">\r\n                <g dd-if=\"ship.world.nearPlanet\" transform=\"translate(0,{{ ship.pitchRatio * 1200 }})\">\r\n                  <path dd-if=\"ship.world.nearPlanet\" d=\"M -150 0 Q -165 0 -170 10 M -150 0 -95 0\" stroke=\"#]]..primaryColor..[[\" fill=\"transparent\" stroke-width=\"1.5px\" />\r\n                  <path dd-if=\"ship.world.nearPlanet\" d=\"M 150 0 Q 165 0 170 10 M 150 0 95 0\" stroke=\"#]]..primaryColor..[[\" fill=\"transparent\" stroke-width=\"1.5px\" />\r\n                </g dd-if=\"ship.world.nearPlanet\">\r\n                <g dd-if=\"ship.world.nearPlanet\" transform=\"rotate({{ ship.rollDegrees * -1 }} 0,0)\">\r\n                   <polyline dd-if=\"ship.world.nearPlanet\" points=\"-95,0 -65,0\" fill=\"none\" stroke=\"#]]..primaryColor..[[\" stroke-width=\"1.5px\" />\r\n                   <polyline dd-if=\"ship.world.nearPlanet\" points=\"95,0 65,0\" fill=\"none\" stroke=\"#]]..primaryColor..[[\" stroke-width=\"1.5px\" />\r\n                </g dd-if=\"ship.world.nearPlanet\">\r\n              <path d=\"M -65 0 Q -50 0, -45 5 T -30 10 M -30 10 -10 10\" stroke=\"#]]..primaryColor..[[\" fill=\"transparent\" stroke-width=\"1.5px\" />\r\n              <path d=\"M 65 0 Q 50 0, 45 5 T 30 10 M 30 10 10 10\" stroke=\"#]]..primaryColor..[[\" fill=\"transparent\" stroke-width=\"1.5px\" />\r\n            </svg>\r\n        </div>\r\n\r\n\r\n        <div id=\"speedometerBar\">&nbsp;</div>\r\n           <div id=\"speedometer\">\r\n               <span class=\"display\">\r\n               \t<span class=\"major\">{{SpeedConvert(ship.world.velocity:len())[1]}}</span>\r\n               \t<span class=\"minor\">{{SpeedConvert(ship.world.velocity:len())[2]}}</span>\r\n               \t<span class=\"unit\">{{SpeedConvert(ship.world.velocity:len())[3]}}</span>\r\n               </span>\r\n               <span class=\"accel\">\r\n               \t<span class=\"major\">{{round2(ship.world.acceleration:len(), 1)}}</span>\r\n               \t<span class=\"unit\">m/s</span>\r\n               </span>\r\n               <span class=\"vertical\">\r\n               \t{{round2(ship.world.velocity:dot(-ship.world.gravity:normalize()), 1)}}\r\n               </span>\r\n               <span class=\"alt\">\r\n               \t{{round2(ship.altitude)}}m\r\n               </span>\r\n\r\n               <span class=\"misc\">ATM {{round2(ship.world.atmosphericDensity, 2)}} | G {{round2(ship.world.gravity:len(), 2)}}m/s</span>\r\n               <span dd-if=\"not ship.alternateCM\" class=\"throttle\">Throttle {{round2(ship.throttle * 100)}}%</span>\r\n\t\t     <span dd-if=\"ship.alternateCM\" class=\"throttle\">Cruise {{round2(ship.cruiseSpeed)}} km/h</span>\r\n            </div>\r\n\r\n            <div id=\"horizon-menu\">\r\n                {{_SHUDBUFFER}}\r\n            </div>\r\n\r\n            </div>\r\n        <div id=\"fuelTanks\">{{ SHUD.SHUDFuelHtml }}</div>\r\n\r\n    </div>\r\n\r\n    ]])local eq=[[<div class=\"item {{class}}\">{{content}}</div>]]function self.SelectMenu(er)if not SHUD.MenuList[er]then error(\"[SHUD] Undefined menu: \"..er)end;SHUD.MenuList.prev=SHUD.Menu;SHUD.Menu=SHUD.MenuList[er]SHUD.CurrentIndex=1;if SHUD.Menu[#SHUD.Menu]~=SHUD.BackButton then table.insert(SHUD.Menu,SHUD.BackButton)end end;function self.Select()if not self.Enabled then return end;if#self.Menu<1 then return end;self.Menu[self.CurrentIndex].Action(self.system,self.unit,self.Menu[self.CurrentIndex])end;function self.Render()local es=\"\"local et;if ship.altitudeHold~=0 then et=ship.altitudeHold else et=\"OFF\"end;if self.Enabled then for B=1,#self.Menu do local eu=self.Menu[B]if eu.Active then eu.Update(self.system,self.unit,eu)end;local ev=eq;local ew=\"\"local e5=eu.Content;if e5.Read then e5=e5.Read()end;e5=ec(e5)if self.CurrentIndex==B then ew=\"active\"end;if not eu.Enabled then ew=ew..\" disabled\"end;ev=ev:gsub(\"{{class}}\",ew..\" \"..eu.Class)ev=ev:gsub(\"{{content}}\",e5)es=es..ev end;_ENV[\"_SHUDBUFFER\"]=ec(es)else ship.frozen=not player.isFrozen()if unit.isRemoteControlled()then _ENV[\"_SHUDBUFFER\"]=ea([[<div class=\"item helpText\">Press ]]..\"[\"..self.system.getActionKeyName(\"speedup\")..\"]\"..[[ to  toggle menu</div>[[\r\n                        <div class=\"item helpText\"><span>Altitude Hold: </span><span class=\"right\">]]..et..[[</span></div>\r\n            \t        <div class=\"item helpText\"><span>Character movement:</span>]]..self.MakeBooleanIndicator(\"ship.frozen\")..[[</div>\r\n            \t        <div class=\"item helpText\"><span>Inertial Dampening:</span>]]..self.MakeBooleanIndicator(\"ship.inertialDampening\")..[[</div>\r\n                        <div class=\"item helpText\"><span>VTOL Priority:</span>]]..self.MakeBooleanIndicator(\"ship.vtolPriority\")..[[</div>\r\n            \t        <div class=\"item helpText\"><span>Gravity Follow:</span>]]..self.MakeBooleanIndicator(\"ship.followGravity\")..[[</div>\r\n            \t        <div class=\"item helpText\"><span>Gravity Supression:</span>]]..self.MakeBooleanIndicator(\"ship.counterGravity\")..[[</div>\r\n            \t        <div class=\"item helpText\"><span>Control Mode:</span><span class=\"right\">{{keybindPreset}}</span></div>\r\n            \t        ]]).Read()else _ENV[\"_SHUDBUFFER\"]=ea([[<div class=\"item helpText\">Press ]]..\"[\"..self.system.getActionKeyName(\"speedup\")..\"]\"..[[ to  toggle menu</div>[[\r\n                        <div class=\"item helpText\"><span>Altitude Hold: </span><span class=\"right\">]]..et..[[</span></div>\r\n            \t        <div class=\"item helpText\"><span>Inertial Dampening:</span>]]..self.MakeBooleanIndicator(\"ship.inertialDampening\")..[[</div>\r\n                        <div class=\"item helpText\"><span>VTOL Priority:</span>]]..self.MakeBooleanIndicator(\"ship.vtolPriority\")..[[</div>\r\n            \t        <div class=\"item helpText\"><span>Gravity Follow:</span>]]..self.MakeBooleanIndicator(\"ship.followGravity\")..[[</div>\r\n            \t        <div class=\"item helpText\"><span>Gravity Supression:</span>]]..self.MakeBooleanIndicator(\"ship.counterGravity\")..[[</div>\r\n            \t        <div class=\"item helpText\"><span>Control Mode:</span><span class=\"right\">{{keybindPreset}}</span></div>\r\n            \t        ]]).Read()end end;if not self.FreezeUpdate then self.system.setScreen(ep.Read())end end;function self.Update()if unit.isRemoteControlled()then if player.isFrozen()or self.Enabled then self.Opacity=1 else self.Opacity=0.5 end end;if not self.ScrollLock and self.Enabled then local ex=system.getMouseWheel()if ex~=0 then self.CurrentIndex=self.CurrentIndex-ex;if self.CurrentIndex>#self.Menu then self.CurrentIndex=1 elseif self.CurrentIndex<1 then self.CurrentIndex=#self.Menu end end elseif not self.Enabled then local ey=system.getMouseWheel()if ship.direction.y==0 and ey~=0 then ship.direction.y=1 end;if not ship.alternateCM then ship.throttle=utils.clamp(ship.throttle+ey*0.05,-1,1)elseif ship.alternateCM then CruiseControl(ey)end end;self.UpdateMarkers()end;function self.Init(system,unit,ez)self.system=system;self.unit=unit;self.CurrentIndex=1;self.ScrollLock=false;system.showScreen(true)unit.hideWidget()local F=ez.GetNamedKeybinds()self.MenuList.hotkeys={}for B=1,#F do local cv=F[B]table.insert(self.MenuList.hotkeys,e9([[<span>]]..cv.Name..[[</span><span class=\"right\">]]..self.system.getActionKeyName(cv.Key)..[[</span>]]).Disable())end;self.MenuList.flightMode={}for a,k in pairs(keybindPresets)do table.insert(self.MenuList.flightMode,e9(string.lower(a),function()self.Init(self.system,self.unit,k)keybindPreset=a;keybindPresets[keybindPreset].Init()end))end;ez.Init()end;return self end()function STMM(eA,system)local self={}self.enabled=true;self.enableX=true;self.enableY=true;self.sensitivity=0.005;self.threshold=0.2;self.deltaClamp=3000;self.recenterSpeed=20;self.deltaPos=vec3(0,0,0)self.system=system;local eB=false;function self.lock()eB=true;system.lockView(true)end;function self.unlock()eB=false;system.lockView(false)end;function self.isLocked()return eB end;function self.toggleLock()if self.isLocked()then self.unlock()else self.lock()end end;function clamp(d,dg,dh)return math.min(dh,math.max(d,dg))end;function withinThreshold(d,eC)return d>eC and d>0 or d<-eC and d<0 end;function self.apply()if not self.enabled then return end;self.deltaPos=self.deltaPos-self.deltaPos/self.recenterSpeed-vec3(self.system.getMouseDeltaX()*self.sensitivity,self.system.getMouseDeltaY()*self.sensitivity,0)self.deltaPos=vec3(clamp(self.deltaPos.x,-self.deltaClamp,self.deltaClamp),clamp(self.deltaPos.y,-self.deltaClamp,self.deltaClamp),0)if withinThreshold(self.deltaPos.x,self.threshold)then if self.enableX then eA.rotation.z=-self.deltaPos.x end else if self.enableX then eA.rotation.z=0 end end;if withinThreshold(self.deltaPos.y,self.threshold)then if self.enableY then eA.rotation.x=self.deltaPos.y end else if self.enableY then eA.rotation.x=0 end end end;self.lock()return self end;mouse=STMM(ship,system)ship.inertialDampening=inertialDampening;ship.followGravity=followGravity;ship.counterGravity=counterGravity;ship.rotationSpeed=rotationMin;ship.rotationSpeedMin=rotationMin;ship.rotationSpeedMax=rotationMax;ship.rotationStep=rotationStep;local eD=false;local eE=false;function softLanding()if eD then ship.counterGravity=false;ship.inertialDampening=true;ship.followGravity=true;ship.direction.y=0;ship.direction.x=0;unit.extendLandingGears()ship.throttle=0;if unit.getControlMode()==1 then unit.cancelCurrentControlMasterMode()end else ship.counterGravity=true;ship.inertialDampening=false;unit.retractLandingGears()end end;softLanding()function holdAlt()if ship.altitudeHold==0 then ship.altitudeHold=round2(ship.altitude,0)system.print(\"altitudeHold: \"..round2(ship.altitudeHold,0))else ship.targetVector=nil;ship.altitudeHold=0;system.print(\"Altitude Hold OFF\")end end;function goButton()ship.direction.y=1;if not ship.alternateCM then if ship.throttle~=0 then ship.throttle=0 else ship.throttle=1 end else if ship.cruiseSpeed~=goButtonSpeed then ship.cruiseSpeed=goButtonSpeed elseif ship.cruiseSpeed==goButtonSpeed then ship.cruiseSpeed=0 end end end;function switchFlightMode(eF)SHUD.Init(system,unit,keybindPresets[eF])keybindPreset=eF;if flightModeDb then flightModeDb.setStringValue(\"flightMode\",eF)end end;function math.sign(k)return k>=0 and 1 or-1 end;function math.round(k,dk)dk=dk or 1;return math.floor(k/dk+math.sign(k)*0.5)*dk end;function switchControlMode()if ship.alternateCM==false then ship.tempThrottle=ship.throttle;ship.throttle=0;ship.cruiseSpeed=math.round(ship.world.velocity:len()*3.6,100)ship.alternateCM=true else ship.tempCruise=ship.cruiseSpeed;ship.cruiseSpeed=0;ship.throttle=ship.tempThrottle;ship.alternateCM=false end end;keybindPresets[\"standard\"]=KeybindController()keybindPresets[\"standard\"].Init=function()mouse.enabled=false;mouse.unlock()ship.ignoreVerticalThrottle=true;ship.ignoreHorizontalThrottle=true;ship.inertialDampening=false;ship.throttle=0;ship.direction.y=1 end;keybindPresets[\"maneuver\"]=KeybindController()keybindPresets[\"maneuver\"].Init=function()keybindPreset=\"maneuver\"mouse.enabled=false;mouse.unlock()ship.ignoreVerticalThrottle=true;ship.inertialDampening=true;ship.followGravity=true;ship.throttle=1;ship.direction.y=0 end;keybindPresets[\"maneuver\"].keyDown.up.Add(function()ship.direction.z=1;if not ship.counterGravity then ship.counterGravity=true end end)keybindPresets[\"maneuver\"].keyUp.up.Add(function()ship.direction.z=0 end)keybindPresets[\"maneuver\"].keyDown.down.Add(function()ship.direction.z=-1 end)keybindPresets[\"maneuver\"].keyUp.down.Add(function()ship.direction.z=0 end)keybindPresets[\"maneuver\"].keyDown.yawleft.Add(function()ship.rotation.z=-1 end)keybindPresets[\"maneuver\"].keyUp.yawleft.Add(function()ship.rotation.z=0;ship.rotationSpeed=ship.rotationSpeedMin end)keybindPresets[\"maneuver\"].keyDown.yawright.Add(function()ship.rotation.z=1 end)keybindPresets[\"maneuver\"].keyUp.yawright.Add(function()ship.rotation.z=0;ship.rotationSpeed=ship.rotationSpeedMin end)keybindPresets[\"maneuver\"].keyDown.forward.Add(function()ship.direction.y=1 end)keybindPresets[\"maneuver\"].keyUp.forward.Add(function()ship.direction.y=0 end)keybindPresets[\"maneuver\"].keyDown.backward.Add(function()ship.direction.y=-1 end)keybindPresets[\"maneuver\"].keyUp.backward.Add(function()ship.direction.y=0 end)keybindPresets[\"maneuver\"].keyDown.left.Add(function()ship.direction.x=-1 end)keybindPresets[\"maneuver\"].keyUp.left.Add(function()ship.direction.x=0 end)keybindPresets[\"maneuver\"].keyDown.right.Add(function()ship.direction.x=1 end)keybindPresets[\"maneuver\"].keyUp.right.Add(function()ship.direction.x=0 end)keybindPresets[\"maneuver\"].keyDown.lshift.Add(function()eE=true end,\"Shift Modifier\")keybindPresets[\"maneuver\"].keyUp.lshift.Add(function()eE=false end)keybindPresets[\"maneuver\"].keyDown.brake.Add(function()ship.brake=true end)keybindPresets[\"maneuver\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"maneuver\"].keyUp.stopengines.Add(function()SHUD.Select()if not SHUD.Enabled then if ship.direction.y==1 then ship.direction.y=0 else ship.direction.y=1 end end end,\"Cruise\")keybindPresets[\"maneuver\"].keyUp.gear.Add(function()useGEAS=not useGEAS;updateGEAS()end)keybindPresets[\"maneuver\"].keyUp.speedup.Add(function()SHUD.Enabled=not SHUD.Enabled end)keybindPresets[\"maneuver\"].keyUp[\"option1\"].Add(function()ship.inertialDampening=not ship.inertialDampening end,\"Inertial Dampening\")keybindPresets[\"maneuver\"].keyUp[\"option2\"].Add(function()ship.targetVector=nil;ship.followGravity=not ship.followGravity end,\"Gravity Follow\")keybindPresets[\"maneuver\"].keyUp[\"option3\"].Add(function()ship.followGravity=not ship.followGravity end,\"Gravity Follow\")keybindPresets[\"maneuver\"].keyUp[\"option4\"].Add(function()ship.counterGravity=not ship.counterGravity end,\"Counter Gravity\")keybindPresets[\"maneuver\"].keyUp[\"option5\"].Add(function()switchFlightMode(\"standard\")end,\"Switch Flight Mode\")keybindPresets[\"standard\"].keyDown.up.Add(function()ship.direction.z=1 end)keybindPresets[\"standard\"].keyUp.up.Add(function()ship.direction.z=0 end)keybindPresets[\"standard\"].keyDown.down.Add(function()ship.direction.z=-1 end)keybindPresets[\"standard\"].keyUp.down.Add(function()ship.direction.z=0 end)keybindPresets[\"standard\"].keyDown.yawleft.Add(function()ship.rotation.z=-1 end)keybindPresets[\"standard\"].keyUp.yawleft.Add(function()ship.rotation.z=0;ship.rotationSpeed=ship.rotationSpeedMin end)keybindPresets[\"standard\"].keyDown.yawright.Add(function()ship.rotation.z=1 end)keybindPresets[\"standard\"].keyUp.yawright.Add(function()ship.rotation.z=0;ship.rotationSpeed=ship.rotationSpeedMin end)keybindPresets[\"standard\"].keyDown.forward.Add(function()ship.rotation.x=-1 end)keybindPresets[\"standard\"].keyUp.forward.Add(function()ship.rotation.x=0;ship.rotationSpeed=ship.rotationSpeedMin end)keybindPresets[\"standard\"].keyDown.backward.Add(function()ship.rotation.x=1 end)keybindPresets[\"standard\"].keyUp.backward.Add(function()ship.rotation.x=0;ship.rotationSpeed=ship.rotationSpeedMin end)keybindPresets[\"standard\"].keyDown.left.Add(function()ship.rotation.y=-1 end)keybindPresets[\"standard\"].keyUp.left.Add(function()ship.rotation.y=0;ship.rotationSpeed=ship.rotationSpeedMin end)keybindPresets[\"standard\"].keyDown.right.Add(function()ship.rotation.y=1 end)keybindPresets[\"standard\"].keyUp.right.Add(function()ship.rotation.y=0;ship.rotationSpeed=ship.rotationSpeedMin end)keybindPresets[\"standard\"].keyDown.strafeleft.Add(function()ship.direction.x=-1 end)keybindPresets[\"standard\"].keyUp.strafeleft.Add(function()ship.direction.x=0 end)keybindPresets[\"standard\"].keyDown.straferight.Add(function()ship.direction.x=1 end)keybindPresets[\"standard\"].keyUp.straferight.Add(function()ship.direction.x=0 end)keybindPresets[\"standard\"].keyDown.brake.Add(function()ship.brake=true;ship.gotoLock=nil end)keybindPresets[\"standard\"].keyUp.brake.Add(function()ship.brake=false end)keybindPresets[\"standard\"].keyUp.stopengines.Add(function()SHUD.Select()if not SHUD.Enabled then goButton()end end,\"Go Button\")keybindPresets[\"standard\"].keyUp.speedup.Add(function()SHUD.Enabled=not SHUD.Enabled end)keybindPresets[\"standard\"].keyDown.lshift.Add(function()player.freeze(not player.isFrozen())end,\"Freeze character\")keybindPresets[\"standard\"].keyDown.lshift.Add(function()eE=true end,\"Shift Modifier\")keybindPresets[\"standard\"].keyUp.lshift.Add(function()eE=false end)keybindPresets[\"standard\"].keyUp[\"booster\"].Add(function()holdAlt()end,\"Altitude Hold\")keybindPresets[\"standard\"].keyUp[\"gear\"].Add(function()eD=not eD;softLanding()end,\"Land\")keybindPresets[\"standard\"].keyUp[\"option1\"].Add(function()ship.inertialDampening=not ship.inertialDampening end,\"Inertial Dampening\")keybindPresets[\"standard\"].keyUp[\"option2\"].Add(function()ship.targetVector=nil;ship.followGravity=not ship.followGravity end,\"Gravity Follow\")keybindPresets[\"standard\"].keyUp[\"option3\"].Add(function()if ship.direction.y==1 then ship.direction.y=0 else ship.direction.y=1 end end,\"Thrust on/off\")keybindPresets[\"standard\"].keyUp[\"option4\"].Add(function()ship.counterGravity=not ship.counterGravity end,\"Counter Gravity\")keybindPresets[\"standard\"].keyUp[\"option5\"].Add(function()switchFlightMode(\"maneuver\")end,\"Switch Flight Mode\")keybindPresets[\"standard\"].keyUp[\"option6\"].Add(function()switchControlMode()end,\"Alternate Control Mode Switch\")keybindPresets[\"standard\"].keyUp[\"option7\"].Add(function()if eE then ship.disableVtol=not ship.disableVtol else ship.vtolPriority=not ship.vtolPriority end end,\"VTOL Priority\")keybindPresets[\"standard\"].keyUp[\"option8\"].Add(function()construct.setDockingMode(0)construct.undock()end,\"Undock\")keybindPresets[\"standard\"].keyUp[\"option9\"].Add(function()flightModeDb.clear()system.print(\"DB Cleared\")end,\"Clear DB\")keybindPreset=\"standard\"if flightModeDb then if not flightModeDb.hasKey(\"flightMode\")then flightModeDb.setStringValue(\"flightMode\",\"standard\")end;keybindPreset=flightModeDb.getStringValue(\"flightMode\")if keybindPreset==\"keyboard\"then flightModeDb.clear()system.print(\"DB Cleared\")keybindPreset=\"standard\"end else system.print(\"No databank installed.\")end;SHUD.Init(system,unit,keybindPresets[keybindPreset])Task(function()coroutine.yield()SHUD.FreezeUpdate=true;local eG=system.getArkTime()+2;while system.getArkTime()<eG do coroutine.yield()end;SHUD.FreezeUpdate=false;SHUD.IntroPassed=true end)SHUD.Markers={{Position=function()return ship.world.position+ship.target.prograde()*2 end,Class=\"prograde\"},{Position=function()return ship.world.position+ship.target.retrograde()*2 end,Class=\"retrograde\"},{Position=function()return ship.world.position+ship.target.radial()*2 end,Class=\"radial\"},{Position=function()return ship.world.position+ship.target.antiradial()*2 end,Class=\"antiradial\"}}player.freeze(true)ship.frozen=false;unit.deactivateGroundEngineAltitudeStabilization()_G.BuildUnit={}local eH=_G.BuildUnit;_G.BuildSystem={}local eI=_G.BuildSystem;function eH.onStart()Events.Flush.Add(mouse.apply)Events.Flush.Add(ship.apply)Events.Update.Add(SHUD.Update)if flightModeDb then if flightModeDb.hasKey(\"controlMode\")==0 then flightModeDb.setIntValue(\"controlMode\",unit.getControlMode())end;local eJ=flightModeDb.getIntValue(\"controlMode\")if eJ~=unit.getControlMode()then unit.cancelCurrentControlMasterMode()end end;if flightModeDb~=nil then getFuelRenderedHtml()end;unit.setTimer(\"SHUDRender\",0.02)unit.setTimer(\"FuelStatus\",3)unit.setTimer(\"KeplerSim\",0.1)system.print([[Horizon 1.1.1.9]])if showDockingWidget then parentingPanelId=system.createWidgetPanel(\"Docking\")parentingWidgetId=system.createWidget(parentingPanelId,\"parenting\")system.addDataToWidget(unit.getWidgetDataId(),parentingWidgetId)end;if system.showHelper then system.showHelper(0)end end;function dump(bm)if type(bm)=='table'then local i='{ 'for a,k in pairs(bm)do if type(a)~='number'then a='\"'..a..'\"'end;i=i..'['..a..'] = '..dump(k)..','end;return i..'} 'else return tostring(bm)end end;function format_int(eK)eK=round2(eK,0)local B,bk,eL,eM,eN=tostring(eK):find('([-]?)(%d+)([.]?%d*)')eM=eM:reverse():gsub(\"(%d%d%d)\",\"%1,\")return eL..eM:reverse():gsub(\"^,\",\"\")..eN end;function eH.onStop()if flightModeDb then flightModeDb.setIntValue(\"controlMode\",unit.getControlMode())end;system.showScreen(false)end;local eO=false;function eH.onTimer(eP)if eP==\"SHUDRender\"then if SHUD then SHUD.Render()end;if antigrav~=nil then updateAGGBaseAlt()readAGGState()updateAGGState()end end;if eP==\"FuelStatus\"then getFuelRenderedHtml()end;if eP==\"KeplerSim\"then if ship.gotoLock~=nil then Task(function()local g=ship.ETA-ship.accelTime;if ship.ETA==0 then g=30 end;local be=simulateAhead(g,g*0.1)ship.simulationPos=be.position end)end end;if eP==\"WaypointTest\"then end end;function eI.onActionStart(cB)keybindPresets[keybindPreset].Call(cB,\"down\")end;function eI.onActionStop(cB)keybindPresets[keybindPreset].Call(cB,\"up\")end;function eI.onInputText(cB)if DUTTY then DUTTY.input(cB)end end;function eI.onActionLoop(cB)end;function eI.onUpdate()if Events then Events.Update()end;if TaskManager then TaskManager.Update()end end;function eI.onFlush()if Events then Events.Flush()end end",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "0"
    },
    {
      "code": "_G.BuildUnit.onStart()",
      "filter": {
        "args": [],
        "signature": "onStart",
        "slotKey": "-1"
      },
      "key": "1"
    },
    {
      "code": "_G.BuildUnit.onStop()",
      "filter": {
        "args": [],
        "signature": "onStop",
        "slotKey": "-1"
      },
      "key": "2"
    },
    {
      "code": "_G.BuildSystem.onActionStart(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStart(action)",
        "slotKey": "-2"
      },
      "key": "3"
    },
    {
      "code": "_G.BuildSystem.onActionStop(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onActionStop(action)",
        "slotKey": "-2"
      },
      "key": "4"
    },
    {
      "code": "_G.BuildSystem.onInputText(action)",
      "filter": {
        "args": [
          {
            "variable": "*"
          }
        ],
        "signature": "onInputText(action)",
        "slotKey": "-2"
      },
      "key": "5"
    },
    {
      "code": "_G.BuildSystem.onUpdate()",
      "filter": {
        "args": [],
        "signature": "onUpdate",
        "slotKey": "-2"
      },
      "key": "6"
    },
    {
      "code": "_G.BuildSystem.onFlush()",
      "filter": {
        "args": [],
        "signature": "onFlush",
        "slotKey": "-2"
      },
      "key": "7"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"SHUDRender\")",
      "filter": {
        "args": [
          {
            "variable": "SHUDRender"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "8"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"FuelStatus\")",
      "filter": {
        "args": [
          {
            "variable": "FuelStatus"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "9"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"KeplerSim\")",
      "filter": {
        "args": [
          {
            "variable": "KeplerSim"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "10"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"WaypointTest\")",
      "filter": {
        "args": [
          {
            "variable": "WaypointTest"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "11"
    },
    {
      "code": "_G.BuildUnit.onTimer(\"Debug\")",
      "filter": {
        "args": [
          {
            "variable": "Debug"
          }
        ],
        "signature": "onTimer(timerId)",
        "slotKey": "-1"
      },
      "key": "12"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "0"
      },
      "key": "13"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "0"
      },
      "key": "14"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "0"
      },
      "key": "15"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot1)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "0"
      },
      "key": "16"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "1"
      },
      "key": "17"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "1"
      },
      "key": "18"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "1"
      },
      "key": "19"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot2)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "1"
      },
      "key": "20"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "2"
      },
      "key": "21"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "2"
      },
      "key": "22"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "2"
      },
      "key": "23"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot3)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "2"
      },
      "key": "24"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "3"
      },
      "key": "25"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "3"
      },
      "key": "26"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "3"
      },
      "key": "27"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot4)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "3"
      },
      "key": "28"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "4"
      },
      "key": "29"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "4"
      },
      "key": "30"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "4"
      },
      "key": "31"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot5)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "4"
      },
      "key": "32"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "5"
      },
      "key": "33"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "5"
      },
      "key": "34"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "5"
      },
      "key": "35"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot6)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "5"
      },
      "key": "36"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "6"
      },
      "key": "37"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "6"
      },
      "key": "38"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "6"
      },
      "key": "39"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot7)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "6"
      },
      "key": "40"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "7"
      },
      "key": "41"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "7"
      },
      "key": "42"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "7"
      },
      "key": "43"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot8)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "7"
      },
      "key": "44"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "8"
      },
      "key": "45"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "8"
      },
      "key": "46"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "8"
      },
      "key": "47"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot9)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "8"
      },
      "key": "48"
    },
    {
      "code": "_G.BuildEmitter.onSent(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onSent(channel,message)",
        "slotKey": "9"
      },
      "key": "49"
    },
    {
      "code": "_G.BuildReceiver.onReceived(channel, message, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onReceived(channel,message)",
        "slotKey": "9"
      },
      "key": "50"
    },
    {
      "code": "_G.BuildScreen.onMouseDown(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseDown(x,y)",
        "slotKey": "9"
      },
      "key": "51"
    },
    {
      "code": "_G.BuildScreen.onMouseUp(x, y, slot10)",
      "filter": {
        "args": [
          {
            "variable": "*"
          },
          {
            "variable": "*"
          }
        ],
        "signature": "onMouseUp(x,y)",
        "slotKey": "9"
      },
      "key": "52"
    }
  ],
  "methods": [],
  "events": []
}